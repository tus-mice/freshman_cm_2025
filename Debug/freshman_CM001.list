
freshman_CM001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c648  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800c7d8  0800c7d8  0001c7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc80  0800cc80  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc80  0800cc80  0001cc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc88  0800cc88  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc88  0800cc88  0001cc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc8c  0800cc8c  0001cc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800cc90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  200001d4  0800ce64  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  0800ce64  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b020  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bf6  00000000  00000000  0003b267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0003ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121c  00000000  00000000  000405c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254b5  00000000  00000000  000417dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e6cc  00000000  00000000  00066c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df494  00000000  00000000  0008535d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007790  00000000  00000000  001647f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0016bf84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7c0 	.word	0x0800c7c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800c7c0 	.word	0x0800c7c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <lcd_cmd>:
#include "i2c.h"

#define LCD_ADDRESS 0x7c

void lcd_cmd(uint8_t x)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[2] = {0x00, x};
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	733b      	strb	r3, [r7, #12]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	737b      	strb	r3, [r7, #13]

	while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK)
 8001002:	e007      	b.n	8001014 <lcd_cmd+0x24>
	{
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <lcd_cmd+0x48>)
 8001006:	f003 fdc9 	bl	8004b9c <HAL_I2C_GetError>
 800100a:	4603      	mov	r3, r0
 800100c:	2b04      	cmp	r3, #4
 800100e:	d001      	beq.n	8001014 <lcd_cmd+0x24>
		{
			Error_Handler();
 8001010:	f000 fd83 	bl	8001b1a <Error_Handler>
	while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK)
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2302      	movs	r3, #2
 8001020:	217c      	movs	r1, #124	; 0x7c
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <lcd_cmd+0x48>)
 8001024:	f003 fca2 	bl	800496c <HAL_I2C_Master_Transmit>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ea      	bne.n	8001004 <lcd_cmd+0x14>
		}
	}
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200002c8 	.word	0x200002c8

0800103c <lcd_data>:

void lcd_data(uint8_t x)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af02      	add	r7, sp, #8
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[2] = {0x40, x};
 8001046:	2340      	movs	r3, #64	; 0x40
 8001048:	733b      	strb	r3, [r7, #12]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK)
 800104e:	e007      	b.n	8001060 <lcd_data+0x24>
	{
		if(HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <lcd_data+0x48>)
 8001052:	f003 fda3 	bl	8004b9c <HAL_I2C_GetError>
 8001056:	4603      	mov	r3, r0
 8001058:	2b04      	cmp	r3, #4
 800105a:	d001      	beq.n	8001060 <lcd_data+0x24>
		{
			Error_Handler();
 800105c:	f000 fd5d 	bl	8001b1a <Error_Handler>
	while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK)
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	217c      	movs	r1, #124	; 0x7c
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <lcd_data+0x48>)
 8001070:	f003 fc7c 	bl	800496c <HAL_I2C_Master_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1ea      	bne.n	8001050 <lcd_data+0x14>
		}
	}
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200002c8 	.word	0x200002c8

08001088 <pl_lcd_puts>:

void pl_lcd_puts(const char *s)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	while (*s)lcd_data(*s++);
 8001090:	e006      	b.n	80010a0 <pl_lcd_puts+0x18>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ffce 	bl	800103c <lcd_data>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f4      	bne.n	8001092 <pl_lcd_puts+0xa>
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <pl_lcd_init>:

void pl_lcd_init(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
	lcd_cmd(0x38);
 80010b6:	2038      	movs	r0, #56	; 0x38
 80010b8:	f7ff ff9a 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x39);
 80010bc:	2039      	movs	r0, #57	; 0x39
 80010be:	f7ff ff97 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x14);
 80010c2:	2014      	movs	r0, #20
 80010c4:	f7ff ff94 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x70);
 80010c8:	2070      	movs	r0, #112	; 0x70
 80010ca:	f7ff ff91 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x56);
 80010ce:	2056      	movs	r0, #86	; 0x56
 80010d0:	f7ff ff8e 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x6c);
 80010d4:	206c      	movs	r0, #108	; 0x6c
 80010d6:	f7ff ff8b 	bl	8000ff0 <lcd_cmd>
	HAL_Delay(300);
 80010da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010de:	f001 fa37 	bl	8002550 <HAL_Delay>
	lcd_cmd(0x38);
 80010e2:	2038      	movs	r0, #56	; 0x38
 80010e4:	f7ff ff84 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x0c);
 80010e8:	200c      	movs	r0, #12
 80010ea:	f7ff ff81 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x01);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ff7e 	bl	8000ff0 <lcd_cmd>
	HAL_Delay(2);
 80010f4:	2002      	movs	r0, #2
 80010f6:	f001 fa2b 	bl	8002550 <HAL_Delay>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}

080010fe <pl_lcd_pos>:
{
	lcd_cmd(0x80 | pos);
}

void pl_lcd_pos(uint8_t row, uint8_t col)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	460a      	mov	r2, r1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	4613      	mov	r3, r2
 800110c:	71bb      	strb	r3, [r7, #6]
	lcd_cmd(0x80 | ((row & 0x01) << 6) | col);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	019b      	lsls	r3, r3, #6
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001118:	b2da      	uxtb	r2, r3
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	4313      	orrs	r3, r2
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff62 	bl	8000ff0 <lcd_cmd>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <pl_lcd_clear>:

void pl_lcd_clear()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff ff59 	bl	8000ff0 <lcd_cmd>
	HAL_Delay(2);
 800113e:	2002      	movs	r0, #2
 8001140:	f001 fa06 	bl	8002550 <HAL_Delay>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <pl_callback_getSensor>:
uint16_t g_sensor[4];

float g_V_Batt;

void pl_callback_getSensor(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int i, j;
	HAL_ADC_Stop_DMA(&hadc1);
 800114e:	4870      	ldr	r0, [pc, #448]	; (8001310 <pl_callback_getSensor+0x1c8>)
 8001150:	f001 fe10 	bl	8002d74 <HAL_ADC_Stop_DMA>
	switch (AD_step)
 8001154:	4b6f      	ldr	r3, [pc, #444]	; (8001314 <pl_callback_getSensor+0x1cc>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d044      	beq.n	80011e6 <pl_callback_getSensor+0x9e>
 800115c:	2b02      	cmp	r3, #2
 800115e:	dc69      	bgt.n	8001234 <pl_callback_getSensor+0xec>
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <pl_callback_getSensor+0x22>
 8001164:	2b01      	cmp	r3, #1
 8001166:	d017      	beq.n	8001198 <pl_callback_getSensor+0x50>
 8001168:	e064      	b.n	8001234 <pl_callback_getSensor+0xec>
	{
	case 0:
		HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001170:	4869      	ldr	r0, [pc, #420]	; (8001318 <pl_callback_getSensor+0x1d0>)
 8001172:	f003 fb47 	bl	8004804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117c:	4866      	ldr	r0, [pc, #408]	; (8001318 <pl_callback_getSensor+0x1d0>)
 800117e:	f003 fb41 	bl	8004804 <HAL_GPIO_WritePin>

		for (j=0; j <= 500; j ++)
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	e002      	b.n	800118e <pl_callback_getSensor+0x46>
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3301      	adds	r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001194:	ddf8      	ble.n	8001188 <pl_callback_getSensor+0x40>
		{
		}
		break;
 8001196:	e04d      	b.n	8001234 <pl_callback_getSensor+0xec>

	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8001198:	4b60      	ldr	r3, [pc, #384]	; (800131c <pl_callback_getSensor+0x1d4>)
 800119a:	885a      	ldrh	r2, [r3, #2]
 800119c:	4b60      	ldr	r3, [pc, #384]	; (8001320 <pl_callback_getSensor+0x1d8>)
 800119e:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 80011a0:	4b5e      	ldr	r3, [pc, #376]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011a2:	889a      	ldrh	r2, [r3, #4]
 80011a4:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <pl_callback_getSensor+0x1d8>)
 80011a6:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 80011a8:	4b5c      	ldr	r3, [pc, #368]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011aa:	88da      	ldrh	r2, [r3, #6]
 80011ac:	4b5d      	ldr	r3, [pc, #372]	; (8001324 <pl_callback_getSensor+0x1dc>)
 80011ae:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 80011b0:	4b5a      	ldr	r3, [pc, #360]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011b2:	891a      	ldrh	r2, [r3, #8]
 80011b4:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <pl_callback_getSensor+0x1dc>)
 80011b6:	80da      	strh	r2, [r3, #6]

		HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011be:	4856      	ldr	r0, [pc, #344]	; (8001318 <pl_callback_getSensor+0x1d0>)
 80011c0:	f003 fb20 	bl	8004804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	4853      	ldr	r0, [pc, #332]	; (8001318 <pl_callback_getSensor+0x1d0>)
 80011cc:	f003 fb1a 	bl	8004804 <HAL_GPIO_WritePin>

		for (j=0; j <= 500; j++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	e002      	b.n	80011dc <pl_callback_getSensor+0x94>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3301      	adds	r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011e2:	ddf8      	ble.n	80011d6 <pl_callback_getSensor+0x8e>
		{
		}
		break;
 80011e4:	e026      	b.n	8001234 <pl_callback_getSensor+0xec>

	case 2:
		g_sensor_off[0] = g_ADCBuffer[1];
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011e8:	885a      	ldrh	r2, [r3, #2]
 80011ea:	4b4e      	ldr	r3, [pc, #312]	; (8001324 <pl_callback_getSensor+0x1dc>)
 80011ec:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 80011ee:	4b4b      	ldr	r3, [pc, #300]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011f0:	889a      	ldrh	r2, [r3, #4]
 80011f2:	4b4c      	ldr	r3, [pc, #304]	; (8001324 <pl_callback_getSensor+0x1dc>)
 80011f4:	805a      	strh	r2, [r3, #2]
		g_sensor_on[2] = g_ADCBuffer[3];
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011f8:	88da      	ldrh	r2, [r3, #6]
 80011fa:	4b49      	ldr	r3, [pc, #292]	; (8001320 <pl_callback_getSensor+0x1d8>)
 80011fc:	809a      	strh	r2, [r3, #4]
		g_sensor_on[3] = g_ADCBuffer[4];
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <pl_callback_getSensor+0x1d4>)
 8001200:	891a      	ldrh	r2, [r3, #8]
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <pl_callback_getSensor+0x1d8>)
 8001204:	80da      	strh	r2, [r3, #6]

		HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120c:	4842      	ldr	r0, [pc, #264]	; (8001318 <pl_callback_getSensor+0x1d0>)
 800120e:	f003 faf9 	bl	8004804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001218:	483f      	ldr	r0, [pc, #252]	; (8001318 <pl_callback_getSensor+0x1d0>)
 800121a:	f003 faf3 	bl	8004804 <HAL_GPIO_WritePin>

		for (j=0; j <= 500; j++)
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	e002      	b.n	800122a <pl_callback_getSensor+0xe2>
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	3301      	adds	r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001230:	ddf8      	ble.n	8001224 <pl_callback_getSensor+0xdc>
		{
		}
		break;
 8001232:	bf00      	nop
	}

	V_battAD = g_ADCBuffer[0];
 8001234:	4b39      	ldr	r3, [pc, #228]	; (800131c <pl_callback_getSensor+0x1d4>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	80fb      	strh	r3, [r7, #6]
	g_V_Batt = 3.3 * (float)V_battAD / (float)(4056 - 1) * (100.0 + 22.0) / 22.0;
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ee17 0a90 	vmov	r0, s15
 8001248:	f7ff f97e 	bl	8000548 <__aeabi_f2d>
 800124c:	a32c      	add	r3, pc, #176	; (adr r3, 8001300 <pl_callback_getSensor+0x1b8>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f9d1 	bl	80005f8 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	a32a      	add	r3, pc, #168	; (adr r3, 8001308 <pl_callback_getSensor+0x1c0>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff faf2 	bl	800084c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <pl_callback_getSensor+0x1e0>)
 8001276:	f7ff f9bf 	bl	80005f8 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <pl_callback_getSensor+0x1e4>)
 8001288:	f7ff fae0 	bl	800084c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fca8 	bl	8000be8 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4a25      	ldr	r2, [pc, #148]	; (8001330 <pl_callback_getSensor+0x1e8>)
 800129c:	6013      	str	r3, [r2, #0]
	AD_step ++;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <pl_callback_getSensor+0x1cc>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <pl_callback_getSensor+0x1cc>)
 80012a8:	701a      	strb	r2, [r3, #0]

	if (AD_step != 3)
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <pl_callback_getSensor+0x1cc>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d005      	beq.n	80012be <pl_callback_getSensor+0x176>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 80012b2:	2205      	movs	r2, #5
 80012b4:	4919      	ldr	r1, [pc, #100]	; (800131c <pl_callback_getSensor+0x1d4>)
 80012b6:	4816      	ldr	r0, [pc, #88]	; (8001310 <pl_callback_getSensor+0x1c8>)
 80012b8:	f001 fcd8 	bl	8002c6c <HAL_ADC_Start_DMA>
		AD_step = 0;
		for(i=0;i<4;i++){
			g_sensor[i] = g_sensor_on[i] - g_sensor_off[i];
		}
	}
}
 80012bc:	e019      	b.n	80012f2 <pl_callback_getSensor+0x1aa>
		AD_step = 0;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <pl_callback_getSensor+0x1cc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
		for(i=0;i<4;i++){
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	e010      	b.n	80012ec <pl_callback_getSensor+0x1a4>
			g_sensor[i] = g_sensor_on[i] - g_sensor_off[i];
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <pl_callback_getSensor+0x1d8>)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012d2:	4914      	ldr	r1, [pc, #80]	; (8001324 <pl_callback_getSensor+0x1dc>)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b299      	uxth	r1, r3
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <pl_callback_getSensor+0x1ec>)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0;i<4;i++){
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	ddeb      	ble.n	80012ca <pl_callback_getSensor+0x182>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	66666666 	.word	0x66666666
 8001304:	400a6666 	.word	0x400a6666
 8001308:	00000000 	.word	0x00000000
 800130c:	40afae00 	.word	0x40afae00
 8001310:	2000021c 	.word	0x2000021c
 8001314:	200001fa 	.word	0x200001fa
 8001318:	48000800 	.word	0x48000800
 800131c:	200001f0 	.word	0x200001f0
 8001320:	200001fc 	.word	0x200001fc
 8001324:	20000204 	.word	0x20000204
 8001328:	405e8000 	.word	0x405e8000
 800132c:	40360000 	.word	0x40360000
 8001330:	20000214 	.word	0x20000214
 8001334:	2000020c 	.word	0x2000020c

08001338 <pl_interupt_getSensor>:

void pl_interupt_getSensor(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)g_ADCBuffer,
 800133c:	2205      	movs	r2, #5
 800133e:	4903      	ldr	r1, [pc, #12]	; (800134c <pl_interupt_getSensor+0x14>)
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <pl_interupt_getSensor+0x18>)
 8001342:	f001 fc93 	bl	8002c6c <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));


}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001f0 	.word	0x200001f0
 8001350:	2000021c 	.word	0x2000021c

08001354 <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;

void pl_timer_init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	g_timCount = 0;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <pl_timer_init+0x14>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <pl_timer_init+0x18>)
 8001360:	f005 f8b6 	bl	80064d0 <HAL_TIM_Base_Start_IT>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000218 	.word	0x20000218
 800136c:	200003b8 	.word	0x200003b8

08001370 <pl_timer_count>:

void pl_timer_count(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	g_timCount ++;
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <pl_timer_count+0x18>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a03      	ldr	r2, [pc, #12]	; (8001388 <pl_timer_count+0x18>)
 800137c:	6013      	str	r3, [r2, #0]
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	20000218 	.word	0x20000218

0800138c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a2:	4b46      	ldr	r3, [pc, #280]	; (80014bc <MX_ADC1_Init+0x130>)
 80013a4:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <MX_ADC1_Init+0x134>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013a8:	4b44      	ldr	r3, [pc, #272]	; (80014bc <MX_ADC1_Init+0x130>)
 80013aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b42      	ldr	r3, [pc, #264]	; (80014bc <MX_ADC1_Init+0x130>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b6:	4b41      	ldr	r3, [pc, #260]	; (80014bc <MX_ADC1_Init+0x130>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013bc:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <MX_ADC1_Init+0x130>)
 80013be:	2201      	movs	r2, #1
 80013c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <MX_ADC1_Init+0x130>)
 80013c4:	2204      	movs	r2, #4
 80013c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <MX_ADC1_Init+0x130>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <MX_ADC1_Init+0x130>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80013d4:	4b39      	ldr	r3, [pc, #228]	; (80014bc <MX_ADC1_Init+0x130>)
 80013d6:	2205      	movs	r2, #5
 80013d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <MX_ADC1_Init+0x130>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <MX_ADC1_Init+0x130>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e8:	4b34      	ldr	r3, [pc, #208]	; (80014bc <MX_ADC1_Init+0x130>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <MX_ADC1_Init+0x130>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013f6:	4b31      	ldr	r3, [pc, #196]	; (80014bc <MX_ADC1_Init+0x130>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <MX_ADC1_Init+0x130>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001404:	482d      	ldr	r0, [pc, #180]	; (80014bc <MX_ADC1_Init+0x130>)
 8001406:	f001 faef 	bl	80029e8 <HAL_ADC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001410:	f000 fb83 	bl	8001b1a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_ADC1_Init+0x138>)
 8001416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001418:	2306      	movs	r3, #6
 800141a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800141c:	2302      	movs	r3, #2
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001420:	237f      	movs	r3, #127	; 0x7f
 8001422:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001424:	2304      	movs	r3, #4
 8001426:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4822      	ldr	r0, [pc, #136]	; (80014bc <MX_ADC1_Init+0x130>)
 8001432:	f001 fed3 	bl	80031dc <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800143c:	f000 fb6d 	bl	8001b1a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_ADC1_Init+0x13c>)
 8001442:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001444:	230c      	movs	r3, #12
 8001446:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	481b      	ldr	r0, [pc, #108]	; (80014bc <MX_ADC1_Init+0x130>)
 800144e:	f001 fec5 	bl	80031dc <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001458:	f000 fb5f 	bl	8001b1a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_ADC1_Init+0x140>)
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001460:	2312      	movs	r3, #18
 8001462:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4814      	ldr	r0, [pc, #80]	; (80014bc <MX_ADC1_Init+0x130>)
 800146a:	f001 feb7 	bl	80031dc <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001474:	f000 fb51 	bl	8001b1a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_ADC1_Init+0x144>)
 800147a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800147c:	2318      	movs	r3, #24
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4619      	mov	r1, r3
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_ADC1_Init+0x130>)
 8001486:	f001 fea9 	bl	80031dc <HAL_ADC_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001490:	f000 fb43 	bl	8001b1a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_ADC1_Init+0x148>)
 8001496:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_ADC1_Init+0x130>)
 80014a4:	f001 fe9a 	bl	80031dc <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80014ae:	f000 fb34 	bl	8001b1a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000021c 	.word	0x2000021c
 80014c0:	50040000 	.word	0x50040000
 80014c4:	43210000 	.word	0x43210000
 80014c8:	3ef08000 	.word	0x3ef08000
 80014cc:	32601000 	.word	0x32601000
 80014d0:	2e300800 	.word	0x2e300800
 80014d4:	2a000400 	.word	0x2a000400

080014d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0a0      	sub	sp, #128	; 0x80
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	2254      	movs	r2, #84	; 0x54
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f007 fd26 	bl	8008f4a <memset>
  if(adcHandle->Instance==ADC1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a4b      	ldr	r2, [pc, #300]	; (8001630 <HAL_ADC_MspInit+0x158>)
 8001504:	4293      	cmp	r3, r2
 8001506:	f040 808f 	bne.w	8001628 <HAL_ADC_MspInit+0x150>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800150a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800150e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001510:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001514:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001516:	2303      	movs	r3, #3
 8001518:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800151e:	2310      	movs	r3, #16
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001522:	2307      	movs	r3, #7
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800152e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	4618      	mov	r0, r3
 800153a:	f004 fc89 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001544:	f000 fae9 	bl	8001b1a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001548:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	4a39      	ldr	r2, [pc, #228]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 800154e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001554:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	4a33      	ldr	r2, [pc, #204]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156c:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	4a2d      	ldr	r2, [pc, #180]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 8001590:	23e0      	movs	r3, #224	; 0xe0
 8001592:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001594:	230b      	movs	r3, #11
 8001596:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f002 ffab 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 80015aa:	2303      	movs	r3, #3
 80015ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ae:	230b      	movs	r3, #11
 80015b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015ba:	4619      	mov	r1, r3
 80015bc:	481e      	ldr	r0, [pc, #120]	; (8001638 <HAL_ADC_MspInit+0x160>)
 80015be:	f002 ff9f 	bl	8004500 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015c4:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_ADC_MspInit+0x168>)
 80015c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015fc:	480f      	ldr	r0, [pc, #60]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015fe:	f002 fd49 	bl	8004094 <HAL_DMA_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001608:	f000 fa87 	bl	8001b1a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_ADC_MspInit+0x164>)
 8001610:	64da      	str	r2, [r3, #76]	; 0x4c
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_ADC_MspInit+0x164>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2012      	movs	r0, #18
 800161e:	f002 fd02 	bl	8004026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001622:	2012      	movs	r0, #18
 8001624:	f002 fd1b 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001628:	bf00      	nop
 800162a:	3780      	adds	r7, #128	; 0x80
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	50040000 	.word	0x50040000
 8001634:	40021000 	.word	0x40021000
 8001638:	48000400 	.word	0x48000400
 800163c:	20000280 	.word	0x20000280
 8001640:	40020008 	.word	0x40020008

08001644 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 800164c:	f7ff fd7c 	bl	8001148 <pl_callback_getSensor>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_DMA_Init+0x38>)
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <MX_DMA_Init+0x38>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6493      	str	r3, [r2, #72]	; 0x48
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_DMA_Init+0x38>)
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	200b      	movs	r0, #11
 800167c:	f002 fcd3 	bl	8004026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001680:	200b      	movs	r0, #11
 8001682:	f002 fcec 	bl	800405e <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b39      	ldr	r3, [pc, #228]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a38      	ldr	r2, [pc, #224]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a32      	ldr	r2, [pc, #200]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b30      	ldr	r3, [pc, #192]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80016f8:	4826      	ldr	r0, [pc, #152]	; (8001794 <MX_GPIO_Init+0x100>)
 80016fa:	f003 f883 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f003 f87c 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2138      	movs	r1, #56	; 0x38
 8001710:	4821      	ldr	r0, [pc, #132]	; (8001798 <MX_GPIO_Init+0x104>)
 8001712:	f003 f877 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 8001716:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800171a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	4819      	ldr	r0, [pc, #100]	; (8001794 <MX_GPIO_Init+0x100>)
 8001730:	f002 fee6 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 8001734:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f002 fed6 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 8001754:	2338      	movs	r3, #56	; 0x38
 8001756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <MX_GPIO_Init+0x104>)
 800176c:	f002 fec8 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 8001770:	23c0      	movs	r3, #192	; 0xc0
 8001772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001778:	2301      	movs	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	4619      	mov	r1, r3
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_GPIO_Init+0x104>)
 8001784:	f002 febc 	bl	8004500 <HAL_GPIO_Init>

}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	48000800 	.word	0x48000800
 8001798:	48000400 	.word	0x48000400

0800179c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_I2C1_Init+0x74>)
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <MX_I2C1_Init+0x78>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_I2C1_Init+0x74>)
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <MX_I2C1_Init+0x7c>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_I2C1_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_I2C1_Init+0x74>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_I2C1_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_I2C1_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_I2C1_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_I2C1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_I2C1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <MX_I2C1_Init+0x74>)
 80017d8:	f003 f82c 	bl	8004834 <HAL_I2C_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017e2:	f000 f99a 	bl	8001b1a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4809      	ldr	r0, [pc, #36]	; (8001810 <MX_I2C1_Init+0x74>)
 80017ea:	f003 fbfd 	bl	8004fe8 <HAL_I2CEx_ConfigAnalogFilter>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017f4:	f000 f991 	bl	8001b1a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_I2C1_Init+0x74>)
 80017fc:	f003 fc3f 	bl	800507e <HAL_I2CEx_ConfigDigitalFilter>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001806:	f000 f988 	bl	8001b1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200002c8 	.word	0x200002c8
 8001814:	40005400 	.word	0x40005400
 8001818:	10909cec 	.word	0x10909cec

0800181c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b09e      	sub	sp, #120	; 0x78
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	2254      	movs	r2, #84	; 0x54
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f007 fb84 	bl	8008f4a <memset>
  if(i2cHandle->Instance==I2C1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <HAL_I2C_MspInit+0xa8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d137      	bne.n	80018bc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001850:	2300      	movs	r3, #0
 8001852:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4618      	mov	r0, r3
 800185a:	f004 faf9 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001864:	f000 f959 	bl	8001b1a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001880:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001884:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001886:	2312      	movs	r3, #18
 8001888:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	2301      	movs	r3, #1
 800188c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001892:	2304      	movs	r3, #4
 8001894:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f002 fe2e 	bl	8004500 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 80018aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ae:	6593      	str	r3, [r2, #88]	; 0x58
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018bc:	bf00      	nop
 80018be:	3778      	adds	r7, #120	; 0x78
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40005400 	.word	0x40005400
 80018c8:	40021000 	.word	0x40021000

080018cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80018d2:	f000 fdc8 	bl	8002466 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80018d6:	f000 f8d1 	bl	8001a7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80018da:	f7ff fedb 	bl	8001694 <MX_GPIO_Init>
	MX_DMA_Init();
 80018de:	f7ff febb 	bl	8001658 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80018e2:	f000 fcfd 	bl	80022e0 <MX_USART2_UART_Init>
	MX_TIM6_Init();
 80018e6:	f000 fb53 	bl	8001f90 <MX_TIM6_Init>
	MX_TIM15_Init();
 80018ea:	f000 fb87 	bl	8001ffc <MX_TIM15_Init>
	MX_I2C1_Init();
 80018ee:	f7ff ff55 	bl	800179c <MX_I2C1_Init>
	MX_ADC1_Init();
 80018f2:	f7ff fd4b 	bl	800138c <MX_ADC1_Init>
	MX_TIM1_Init();
 80018f6:	f000 fa61 	bl	8001dbc <MX_TIM1_Init>
	MX_TIM2_Init();
 80018fa:	f000 faef 	bl	8001edc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// HAL_TIM_Base_Start_IT(&htim15);
	// HAL_TIM_PWM_MspInit(&htim15);
	// HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
	HAL_TIM_Base_Start_IT(&htim1);
 80018fe:	4854      	ldr	r0, [pc, #336]	; (8001a50 <main+0x184>)
 8001900:	f004 fde6 	bl	80064d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_MspInit(&htim1);
 8001904:	4852      	ldr	r0, [pc, #328]	; (8001a50 <main+0x184>)
 8001906:	f000 fbff 	bl	8002108 <HAL_TIM_PWM_MspInit>
	HAL_TIM_Base_Start_IT(&htim2);
 800190a:	4852      	ldr	r0, [pc, #328]	; (8001a54 <main+0x188>)
 800190c:	f004 fde0 	bl	80064d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_MspInit(&htim2);
 8001910:	4850      	ldr	r0, [pc, #320]	; (8001a54 <main+0x188>)
 8001912:	f000 fbf9 	bl	8002108 <HAL_TIM_PWM_MspInit>

	pl_timer_init();
 8001916:	f7ff fd1d 	bl	8001354 <pl_timer_init>

	pl_lcd_init();
 800191a:	f7ff fbca 	bl	80010b2 <pl_lcd_init>
	pl_lcd_puts("Hello");
 800191e:	484e      	ldr	r0, [pc, #312]	; (8001a58 <main+0x18c>)
 8001920:	f7ff fbb2 	bl	8001088 <pl_lcd_puts>
	pl_lcd_pos(1, 0);
 8001924:	2100      	movs	r1, #0
 8001926:	2001      	movs	r0, #1
 8001928:	f7ff fbe9 	bl	80010fe <pl_lcd_pos>
	pl_lcd_puts("  STM32");
 800192c:	484b      	ldr	r0, [pc, #300]	; (8001a5c <main+0x190>)
 800192e:	f7ff fbab 	bl	8001088 <pl_lcd_puts>
	HAL_Delay(500);
 8001932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001936:	f000 fe0b 	bl	8002550 <HAL_Delay>
	pl_lcd_clear();
 800193a:	f7ff fbfb 	bl	8001134 <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 800193e:	2100      	movs	r1, #0
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fbdc 	bl	80010fe <pl_lcd_pos>
	pl_lcd_puts("Mice");
 8001946:	4846      	ldr	r0, [pc, #280]	; (8001a60 <main+0x194>)
 8001948:	f7ff fb9e 	bl	8001088 <pl_lcd_puts>

	pl_lcd_clear();
 800194c:	f7ff fbf2 	bl	8001134 <pl_lcd_clear>

	int cnt = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c

	float batf;
	uint16_t bat;
	char batBuffer[17] = { 0 };
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	731a      	strb	r2, [r3, #12]
//	  sprintf(batBuffer, "BAT:%f", batf);
//
//	  pl_lcd_pos(0,0);
//	  pl_lcd_puts(batBuffer);

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 8001966:	2205      	movs	r2, #5
 8001968:	493e      	ldr	r1, [pc, #248]	; (8001a64 <main+0x198>)
 800196a:	483f      	ldr	r0, [pc, #252]	; (8001a68 <main+0x19c>)
 800196c:	f001 f97e 	bl	8002c6c <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));

		sprintf(batBuffer, "%d", g_ADCBuffer[1]);
 8001970:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <main+0x198>)
 8001972:	885b      	ldrh	r3, [r3, #2]
 8001974:	461a      	mov	r2, r3
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	493c      	ldr	r1, [pc, #240]	; (8001a6c <main+0x1a0>)
 800197c:	4618      	mov	r0, r3
 800197e:	f007 fa81 	bl	8008e84 <siprintf>

		pl_lcd_pos(0, 0);
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fbba 	bl	80010fe <pl_lcd_pos>
		pl_lcd_puts(batBuffer);
 800198a:	f107 0318 	add.w	r3, r7, #24
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb7a 	bl	8001088 <pl_lcd_puts>

		char strBuffer[17] = { 0 };
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	731a      	strb	r2, [r3, #12]
		sprintf(strBuffer, "CNT=%04d", cnt);
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019aa:	4931      	ldr	r1, [pc, #196]	; (8001a70 <main+0x1a4>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f007 fa69 	bl	8008e84 <siprintf>
		cnt++;
 80019b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b4:	3301      	adds	r3, #1
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		pl_lcd_pos(1, 0);
 80019b8:	2100      	movs	r1, #0
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff fb9f 	bl	80010fe <pl_lcd_pos>
		pl_lcd_puts(strBuffer);
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fb60 	bl	8001088 <pl_lcd_puts>

		printf("OK: %d\n\r", cnt);
 80019c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019ca:	482a      	ldr	r0, [pc, #168]	; (8001a74 <main+0x1a8>)
 80019cc:	f007 fa48 	bl	8008e60 <iprintf>

		if (HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port, SWITCH_1_Pin) == 0) {
 80019d0:	2140      	movs	r1, #64	; 0x40
 80019d2:	4829      	ldr	r0, [pc, #164]	; (8001a78 <main+0x1ac>)
 80019d4:	f002 fefe 	bl	80047d4 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1c3      	bne.n	8001966 <main+0x9a>

			HAL_GPIO_WritePin(INTERFACELED_GPIO_Port, INTERFACELED_Pin,
 80019de:	2201      	movs	r2, #1
 80019e0:	2108      	movs	r1, #8
 80019e2:	4825      	ldr	r0, [pc, #148]	; (8001a78 <main+0x1ac>)
 80019e4:	f002 ff0e 	bl	8004804 <HAL_GPIO_WritePin>
								GPIO_PIN_SET);

			HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin,
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f002 ff07 	bl	8004804 <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
			HAL_GPIO_WritePin(MD_RESET_GPIO_Port, MD_RESET_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2120      	movs	r1, #32
 80019fa:	481f      	ldr	r0, [pc, #124]	; (8001a78 <main+0x1ac>)
 80019fc:	f002 ff02 	bl	8004804 <HAL_GPIO_WritePin>
			HAL_Delay(3);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 fda5 	bl	8002550 <HAL_Delay>
			HAL_GPIO_WritePin(MD_RESET_GPIO_Port, MD_RESET_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2120      	movs	r1, #32
 8001a0a:	481b      	ldr	r0, [pc, #108]	; (8001a78 <main+0x1ac>)
 8001a0c:	f002 fefa 	bl	8004804 <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a10:	2100      	movs	r1, #0
 8001a12:	480f      	ldr	r0, [pc, #60]	; (8001a50 <main+0x184>)
 8001a14:	f004 fe08 	bl	8006628 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a18:	2104      	movs	r1, #4
 8001a1a:	480e      	ldr	r0, [pc, #56]	; (8001a54 <main+0x188>)
 8001a1c:	f004 fe04 	bl	8006628 <HAL_TIM_PWM_Start>
			HAL_Delay(5000);
 8001a20:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a24:	f000 fd94 	bl	8002550 <HAL_Delay>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4809      	ldr	r0, [pc, #36]	; (8001a50 <main+0x184>)
 8001a2c:	f004 feda 	bl	80067e4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001a30:	2104      	movs	r1, #4
 8001a32:	4808      	ldr	r0, [pc, #32]	; (8001a54 <main+0x188>)
 8001a34:	f004 fed6 	bl	80067e4 <HAL_TIM_PWM_Stop>

			HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin,
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a42:	f002 fedf 	bl	8004804 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			HAL_Delay(1000);
 8001a46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a4a:	f000 fd81 	bl	8002550 <HAL_Delay>
	while (1) {
 8001a4e:	e78a      	b.n	8001966 <main+0x9a>
 8001a50:	20000320 	.word	0x20000320
 8001a54:	2000036c 	.word	0x2000036c
 8001a58:	0800c7d8 	.word	0x0800c7d8
 8001a5c:	0800c7e0 	.word	0x0800c7e0
 8001a60:	0800c7e8 	.word	0x0800c7e8
 8001a64:	200001f0 	.word	0x200001f0
 8001a68:	2000021c 	.word	0x2000021c
 8001a6c:	0800c7f0 	.word	0x0800c7f0
 8001a70:	0800c7f4 	.word	0x0800c7f4
 8001a74:	0800c800 	.word	0x0800c800
 8001a78:	48000400 	.word	0x48000400

08001a7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b096      	sub	sp, #88	; 0x58
 8001a80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	2244      	movs	r2, #68	; 0x44
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f007 fa5d 	bl	8008f4a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a90:	463b      	mov	r3, r7
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001aa2:	f003 fb47 	bl	8005134 <HAL_PWREx_ControlVoltageScaling>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001aac:	f000 f835 	bl	8001b1a <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ab4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ab8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aba:	2302      	movs	r3, #2
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 3;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001ac6:	2328      	movs	r3, #40	; 0x28
 8001ac8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001aca:	2307      	movs	r3, #7
 8001acc:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fb80 	bl	80051e0 <HAL_RCC_OscConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SystemClock_Config+0x6e>
		Error_Handler();
 8001ae6:	f000 f818 	bl	8001b1a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001aea:	230f      	movs	r3, #15
 8001aec:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aee:	2303      	movs	r3, #3
 8001af0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001afe:	463b      	mov	r3, r7
 8001b00:	2104      	movs	r1, #4
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 ff80 	bl	8005a08 <HAL_RCC_ClockConfig>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <SystemClock_Config+0x96>
		Error_Handler();
 8001b0e:	f000 f804 	bl	8001b1a <Error_Handler>
	}
}
 8001b12:	bf00      	nop
 8001b14:	3758      	adds	r7, #88	; 0x58
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1e:	b672      	cpsid	i
}
 8001b20:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b22:	e7fe      	b.n	8001b22 <Error_Handler+0x8>

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_MspInit+0x44>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_MspInit+0x44>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6613      	str	r3, [r2, #96]	; 0x60
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_MspInit+0x44>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_MspInit+0x44>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_MspInit+0x44>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_MspInit+0x44>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <NMI_Handler+0x4>

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 fcaa 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <DMA1_Channel1_IRQHandler+0x10>)
 8001bc6:	f002 fbbb 	bl	8004340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000280 	.word	0x20000280

08001bd4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <ADC1_IRQHandler+0x10>)
 8001bda:	f001 f92c 	bl	8002e36 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000021c 	.word	0x2000021c

08001be8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <TIM6_DAC_IRQHandler+0x18>)
 8001bee:	f004 fe81 	bl	80068f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 8001bf2:	f7ff fbbd 	bl	8001370 <pl_timer_count>
  pl_interupt_getSensor();
 8001bf6:	f7ff fb9f 	bl	8001338 <pl_interupt_getSensor>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200003b8 	.word	0x200003b8

08001c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return 1;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_kill>:

int _kill(int pid, int sig)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c1e:	f007 f9e7 	bl	8008ff0 <__errno>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2216      	movs	r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_exit>:

void _exit (int status)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffe7 	bl	8001c14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c46:	e7fe      	b.n	8001c46 <_exit+0x12>

08001c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c5a:	f3af 8000 	nop.w
 8001c5e:	4601      	mov	r1, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf0      	blt.n	8001c5a <_read+0x12>
  }

  return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e00a      	b.n	8001cac <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)(ptr++), 1, 1);
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	1c4b      	adds	r3, r1, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <_write+0x3c>)
 8001ca2:	f005 fcd3 	bl	800764c <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbf0      	blt.n	8001c96 <_write+0x12>
	}
	return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000450 	.word	0x20000450

08001cc4 <_close>:

int _close(int file)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cec:	605a      	str	r2, [r3, #4]
  return 0;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_isatty>:

int _isatty(int file)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d04:	2301      	movs	r3, #1
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b085      	sub	sp, #20
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d5c:	f007 f948 	bl	8008ff0 <__errno>
 8001d60:	4603      	mov	r3, r0
 8001d62:	220c      	movs	r2, #12
 8001d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20010000 	.word	0x20010000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	2000031c 	.word	0x2000031c
 8001d94:	20000628 	.word	0x20000628

08001d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <SystemInit+0x20>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <SystemInit+0x20>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b096      	sub	sp, #88	; 0x58
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	611a      	str	r2, [r3, #16]
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	222c      	movs	r2, #44	; 0x2c
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f007 f8ae 	bl	8008f4a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dee:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001df0:	4a39      	ldr	r2, [pc, #228]	; (8001ed8 <MX_TIM1_Init+0x11c>)
 8001df2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001df4:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001df6:	2207      	movs	r2, #7
 8001df8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001e00:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001e02:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e08:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e1a:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001e1c:	f004 fbac 	bl	8006578 <HAL_TIM_PWM_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001e26:	f7ff fe78 	bl	8001b1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4825      	ldr	r0, [pc, #148]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001e3e:	f005 fabb 	bl	80073b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e48:	f7ff fe67 	bl	8001b1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4c:	2360      	movs	r3, #96	; 0x60
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 8001e50:	f241 3387 	movw	r3, #4999	; 0x1387
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e56:	2300      	movs	r3, #0
 8001e58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4619      	mov	r1, r3
 8001e72:	4818      	ldr	r0, [pc, #96]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001e74:	f004 fe46 	bl	8006b04 <HAL_TIM_PWM_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001e7e:	f7ff fe4c 	bl	8001b1a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001eb8:	f005 fae4 	bl	8007484 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001ec2:	f7ff fe2a 	bl	8001b1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ec6:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <MX_TIM1_Init+0x118>)
 8001ec8:	f000 f98a 	bl	80021e0 <HAL_TIM_MspPostInit>

}
 8001ecc:	bf00      	nop
 8001ece:	3758      	adds	r7, #88	; 0x58
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000320 	.word	0x20000320
 8001ed8:	40012c00 	.word	0x40012c00

08001edc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
 8001efc:	615a      	str	r2, [r3, #20]
 8001efe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <MX_TIM2_Init+0xb0>)
 8001f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001f08:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <MX_TIM2_Init+0xb0>)
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <MX_TIM2_Init+0xb0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <MX_TIM2_Init+0xb0>)
 8001f16:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <MX_TIM2_Init+0xb0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_TIM2_Init+0xb0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f28:	4818      	ldr	r0, [pc, #96]	; (8001f8c <MX_TIM2_Init+0xb0>)
 8001f2a:	f004 fb25 	bl	8006578 <HAL_TIM_PWM_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001f34:	f7ff fdf1 	bl	8001b1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	4811      	ldr	r0, [pc, #68]	; (8001f8c <MX_TIM2_Init+0xb0>)
 8001f48:	f005 fa36 	bl	80073b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001f52:	f7ff fde2 	bl	8001b1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f56:	2360      	movs	r3, #96	; 0x60
 8001f58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8001f5a:	f241 3387 	movw	r3, #4999	; 0x1387
 8001f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f68:	463b      	mov	r3, r7
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4807      	ldr	r0, [pc, #28]	; (8001f8c <MX_TIM2_Init+0xb0>)
 8001f70:	f004 fdc8 	bl	8006b04 <HAL_TIM_PWM_ConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001f7a:	f7ff fdce 	bl	8001b1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <MX_TIM2_Init+0xb0>)
 8001f80:	f000 f92e 	bl	80021e0 <HAL_TIM_MspPostInit>

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000036c 	.word	0x2000036c

08001f90 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <MX_TIM6_Init+0x64>)
 8001fa2:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <MX_TIM6_Init+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <MX_TIM6_Init+0x64>)
 8001fa8:	224f      	movs	r2, #79	; 0x4f
 8001faa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_TIM6_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <MX_TIM6_Init+0x64>)
 8001fb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fb8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_TIM6_Init+0x64>)
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <MX_TIM6_Init+0x64>)
 8001fc2:	f004 fa2d 	bl	8006420 <HAL_TIM_Base_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001fcc:	f7ff fda5 	bl	8001b1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <MX_TIM6_Init+0x64>)
 8001fde:	f005 f9eb 	bl	80073b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001fe8:	f7ff fd97 	bl	8001b1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200003b8 	.word	0x200003b8
 8001ff8:	40001000 	.word	0x40001000

08001ffc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b096      	sub	sp, #88	; 0x58
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002002:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800200e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]
 800201e:	615a      	str	r2, [r3, #20]
 8002020:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	222c      	movs	r2, #44	; 0x2c
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f006 ff8e 	bl	8008f4a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800202e:	4b34      	ldr	r3, [pc, #208]	; (8002100 <MX_TIM15_Init+0x104>)
 8002030:	4a34      	ldr	r2, [pc, #208]	; (8002104 <MX_TIM15_Init+0x108>)
 8002032:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8002034:	4b32      	ldr	r3, [pc, #200]	; (8002100 <MX_TIM15_Init+0x104>)
 8002036:	224f      	movs	r2, #79	; 0x4f
 8002038:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b31      	ldr	r3, [pc, #196]	; (8002100 <MX_TIM15_Init+0x104>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 8002040:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <MX_TIM15_Init+0x104>)
 8002042:	f241 3287 	movw	r2, #4999	; 0x1387
 8002046:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <MX_TIM15_Init+0x104>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800204e:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <MX_TIM15_Init+0x104>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <MX_TIM15_Init+0x104>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800205a:	4829      	ldr	r0, [pc, #164]	; (8002100 <MX_TIM15_Init+0x104>)
 800205c:	f004 fa8c 	bl	8006578 <HAL_TIM_PWM_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002066:	f7ff fd58 	bl	8001b1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002072:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002076:	4619      	mov	r1, r3
 8002078:	4821      	ldr	r0, [pc, #132]	; (8002100 <MX_TIM15_Init+0x104>)
 800207a:	f005 f99d 	bl	80073b8 <HAL_TIMEx_MasterConfigSynchronization>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002084:	f7ff fd49 	bl	8001b1a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002088:	2360      	movs	r3, #96	; 0x60
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 800208c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002092:	2300      	movs	r3, #0
 8002094:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002096:	2300      	movs	r3, #0
 8002098:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020aa:	2204      	movs	r2, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4814      	ldr	r0, [pc, #80]	; (8002100 <MX_TIM15_Init+0x104>)
 80020b0:	f004 fd28 	bl	8006b04 <HAL_TIM_PWM_ConfigChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80020ba:	f7ff fd2e 	bl	8001b1a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <MX_TIM15_Init+0x104>)
 80020e2:	f005 f9cf 	bl	8007484 <HAL_TIMEx_ConfigBreakDeadTime>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 80020ec:	f7ff fd15 	bl	8001b1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <MX_TIM15_Init+0x104>)
 80020f2:	f000 f875 	bl	80021e0 <HAL_TIM_MspPostInit>

}
 80020f6:	bf00      	nop
 80020f8:	3758      	adds	r7, #88	; 0x58
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000404 	.word	0x20000404
 8002104:	40014000 	.word	0x40014000

08002108 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_TIM_PWM_MspInit+0x80>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10c      	bne.n	8002134 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_TIM_PWM_MspInit+0x84>)
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_TIM_PWM_MspInit+0x84>)
 8002120:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002124:	6613      	str	r3, [r2, #96]	; 0x60
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_TIM_PWM_MspInit+0x84>)
 8002128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002132:	e022      	b.n	800217a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213c:	d10c      	bne.n	8002158 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_TIM_PWM_MspInit+0x84>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <HAL_TIM_PWM_MspInit+0x84>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_TIM_PWM_MspInit+0x84>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
}
 8002156:	e010      	b.n	800217a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM15)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <HAL_TIM_PWM_MspInit+0x88>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10b      	bne.n	800217a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_TIM_PWM_MspInit+0x84>)
 8002164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_TIM_PWM_MspInit+0x84>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6613      	str	r3, [r2, #96]	; 0x60
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_TIM_PWM_MspInit+0x84>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
}
 800217a:	bf00      	nop
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40012c00 	.word	0x40012c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40014000 	.word	0x40014000

08002194 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <HAL_TIM_Base_MspInit+0x44>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d113      	bne.n	80021ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_TIM_Base_MspInit+0x48>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <HAL_TIM_Base_MspInit+0x48>)
 80021ac:	f043 0310 	orr.w	r3, r3, #16
 80021b0:	6593      	str	r3, [r2, #88]	; 0x58
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_TIM_Base_MspInit+0x48>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2036      	movs	r0, #54	; 0x36
 80021c4:	f001 ff2f 	bl	8004026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021c8:	2036      	movs	r0, #54	; 0x36
 80021ca:	f001 ff48 	bl	800405e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40001000 	.word	0x40001000
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a35      	ldr	r2, [pc, #212]	; (80022d4 <HAL_TIM_MspPostInit+0xf4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d11e      	bne.n	8002240 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <HAL_TIM_MspPostInit+0xf8>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	4a34      	ldr	r2, [pc, #208]	; (80022d8 <HAL_TIM_MspPostInit+0xf8>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800220e:	4b32      	ldr	r3, [pc, #200]	; (80022d8 <HAL_TIM_MspPostInit+0xf8>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 800221a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800222c:	2301      	movs	r3, #1
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223a:	f002 f961 	bl	8004500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800223e:	e044      	b.n	80022ca <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002248:	d11d      	bne.n	8002286 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_TIM_MspPostInit+0xf8>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_TIM_MspPostInit+0xf8>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_TIM_MspPostInit+0xf8>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 8002262:	2302      	movs	r3, #2
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002272:	2301      	movs	r3, #1
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4619      	mov	r1, r3
 800227c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002280:	f002 f93e 	bl	8004500 <HAL_GPIO_Init>
}
 8002284:	e021      	b.n	80022ca <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a14      	ldr	r2, [pc, #80]	; (80022dc <HAL_TIM_MspPostInit+0xfc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d11c      	bne.n	80022ca <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_TIM_MspPostInit+0xf8>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_TIM_MspPostInit+0xf8>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_TIM_MspPostInit+0xf8>)
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 80022a8:	2308      	movs	r3, #8
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80022b8:	230e      	movs	r3, #14
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c6:	f002 f91b 	bl	8004500 <HAL_GPIO_Init>
}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40012c00 	.word	0x40012c00
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40014000 	.word	0x40014000

080022e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <MX_USART2_UART_Init+0x58>)
 80022e6:	4a15      	ldr	r2, [pc, #84]	; (800233c <MX_USART2_UART_Init+0x5c>)
 80022e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <MX_USART2_UART_Init+0x58>)
 80022ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_USART2_UART_Init+0x58>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <MX_USART2_UART_Init+0x58>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_USART2_UART_Init+0x58>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_USART2_UART_Init+0x58>)
 8002306:	220c      	movs	r2, #12
 8002308:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <MX_USART2_UART_Init+0x58>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_USART2_UART_Init+0x58>)
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <MX_USART2_UART_Init+0x58>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_USART2_UART_Init+0x58>)
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_USART2_UART_Init+0x58>)
 8002324:	f005 f944 	bl	80075b0 <HAL_UART_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800232e:	f7ff fbf4 	bl	8001b1a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000450 	.word	0x20000450
 800233c:	40004400 	.word	0x40004400

08002340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b09e      	sub	sp, #120	; 0x78
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	2254      	movs	r2, #84	; 0x54
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f006 fdf2 	bl	8008f4a <memset>
  if(uartHandle->Instance==USART2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_UART_MspInit+0xcc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d148      	bne.n	8002402 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002370:	2302      	movs	r3, #2
 8002372:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002374:	2300      	movs	r3, #0
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	4618      	mov	r0, r3
 800237e:	f003 fd67 	bl	8005e50 <HAL_RCCEx_PeriphCLKConfig>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002388:	f7ff fbc7 	bl	8001b1a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_UART_MspInit+0xd0>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <HAL_UART_MspInit+0xd0>)
 8002392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002396:	6593      	str	r3, [r2, #88]	; 0x58
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_UART_MspInit+0xd0>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_UART_MspInit+0xd0>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_UART_MspInit+0xd0>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_UART_MspInit+0xd0>)
 80023b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80023bc:	2304      	movs	r3, #4
 80023be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c8:	2303      	movs	r3, #3
 80023ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023cc:	2307      	movs	r3, #7
 80023ce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023d4:	4619      	mov	r1, r3
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023da:	f002 f891 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80023de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ec:	2303      	movs	r3, #3
 80023ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80023f0:	2303      	movs	r3, #3
 80023f2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80023f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023f8:	4619      	mov	r1, r3
 80023fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fe:	f002 f87f 	bl	8004500 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002402:	bf00      	nop
 8002404:	3778      	adds	r7, #120	; 0x78
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40004400 	.word	0x40004400
 8002410:	40021000 	.word	0x40021000

08002414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800244c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002418:	f7ff fcbe 	bl	8001d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <LoopForever+0x6>)
  ldr r1, =_edata
 800241e:	490d      	ldr	r1, [pc, #52]	; (8002454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <LoopForever+0xe>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002434:	4c0a      	ldr	r4, [pc, #40]	; (8002460 <LoopForever+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002442:	f006 fddb 	bl	8008ffc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002446:	f7ff fa41 	bl	80018cc <main>

0800244a <LoopForever>:

LoopForever:
    b LoopForever
 800244a:	e7fe      	b.n	800244a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800244c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002458:	0800cc90 	.word	0x0800cc90
  ldr r2, =_sbss
 800245c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002460:	20000628 	.word	0x20000628

08002464 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <CAN1_RX0_IRQHandler>

08002466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f001 fdcd 	bl	8004010 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f80e 	bl	8002498 <HAL_InitTick>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	e001      	b.n	800248c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002488:	f7ff fb4c 	bl	8001b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248c:	79fb      	ldrb	r3, [r7, #7]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <HAL_InitTick+0x6c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d023      	beq.n	80024f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024ac:	4b16      	ldr	r3, [pc, #88]	; (8002508 <HAL_InitTick+0x70>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_InitTick+0x6c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 fdd9 	bl	800407a <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0f      	cmp	r3, #15
 80024d2:	d809      	bhi.n	80024e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d4:	2200      	movs	r2, #0
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f001 fda3 	bl	8004026 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e0:	4a0a      	ldr	r2, [pc, #40]	; (800250c <HAL_InitTick+0x74>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e007      	b.n	80024f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e004      	b.n	80024f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e001      	b.n	80024f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000008 	.word	0x20000008
 8002508:	20000000 	.word	0x20000000
 800250c:	20000004 	.word	0x20000004

08002510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x20>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x24>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_IncTick+0x24>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000008 	.word	0x20000008
 8002534:	200004d8 	.word	0x200004d8

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_GetTick+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	200004d8 	.word	0x200004d8

08002550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff ffee 	bl	8002538 <HAL_GetTick>
 800255c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d005      	beq.n	8002576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_Delay+0x44>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002576:	bf00      	nop
 8002578:	f7ff ffde 	bl	8002538 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d8f7      	bhi.n	8002578 <HAL_Delay+0x28>
  {
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000008 	.word	0x20000008

08002598 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	609a      	str	r2, [r3, #8]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3360      	adds	r3, #96	; 0x60
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <LL_ADC_SetOffset+0x44>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	4313      	orrs	r3, r2
 8002630:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	03fff000 	.word	0x03fff000

08002648 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3360      	adds	r3, #96	; 0x60
 8002656:	461a      	mov	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3360      	adds	r3, #96	; 0x60
 8002684:	461a      	mov	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	431a      	orrs	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3330      	adds	r3, #48	; 0x30
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	4413      	add	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	211f      	movs	r1, #31
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	f003 011f 	and.w	r1, r3, #31
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	431a      	orrs	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3314      	adds	r3, #20
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	0e5b      	lsrs	r3, r3, #25
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	4413      	add	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	0d1b      	lsrs	r3, r3, #20
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	2107      	movs	r1, #7
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	401a      	ands	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	0d1b      	lsrs	r3, r3, #20
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	431a      	orrs	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002798:	bf00      	nop
 800279a:	371c      	adds	r7, #28
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0318 	and.w	r3, r3, #24
 80027c6:	4908      	ldr	r1, [pc, #32]	; (80027e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027c8:	40d9      	lsrs	r1, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	400b      	ands	r3, r1
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d2:	431a      	orrs	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	0007ffff 	.word	0x0007ffff

080027ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6093      	str	r3, [r2, #8]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002824:	d101      	bne.n	800282a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002848:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800284c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002874:	d101      	bne.n	800287a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028c4:	f043 0202 	orr.w	r2, r3, #2
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <LL_ADC_IsEnabled+0x18>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <LL_ADC_IsEnabled+0x1a>
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d101      	bne.n	8002916 <LL_ADC_IsDisableOngoing+0x18>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_ADC_IsDisableOngoing+0x1a>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800295c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002960:	f043 0210 	orr.w	r2, r3, #16
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d101      	bne.n	800298c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d101      	bne.n	80029da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e126      	b.n	8002c50 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fe fd61 	bl	80014d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fef1 	bl	8002810 <LL_ADC_IsDeepPowerDownEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fed7 	bl	80027ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff0c 	bl	8002860 <LL_ADC_IsInternalRegulatorEnabled>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d115      	bne.n	8002a7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fef0 	bl	8002838 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a58:	4b7f      	ldr	r3, [pc, #508]	; (8002c58 <HAL_ADC_Init+0x270>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	4a7f      	ldr	r2, [pc, #508]	; (8002c5c <HAL_ADC_Init+0x274>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a6c:	e002      	b.n	8002a74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f9      	bne.n	8002a6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff feee 	bl	8002860 <LL_ADC_IsInternalRegulatorEnabled>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10d      	bne.n	8002aa6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f043 0210 	orr.w	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff62 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 8002ab0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 80bf 	bne.w	8002c3e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 80bb 	bne.w	8002c3e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ad0:	f043 0202 	orr.w	r2, r3, #2
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fefb 	bl	80028d8 <LL_ADC_IsEnabled>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae8:	485d      	ldr	r0, [pc, #372]	; (8002c60 <HAL_ADC_Init+0x278>)
 8002aea:	f7ff fef5 	bl	80028d8 <LL_ADC_IsEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4619      	mov	r1, r3
 8002afa:	485a      	ldr	r0, [pc, #360]	; (8002c64 <HAL_ADC_Init+0x27c>)
 8002afc:	f7ff fd4c 	bl	8002598 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7e5b      	ldrb	r3, [r3, #25]
 8002b04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d106      	bne.n	8002b3c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	3b01      	subs	r3, #1
 8002b34:	045b      	lsls	r3, r3, #17
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <HAL_ADC_Init+0x280>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff26 	bl	80029c2 <LL_ADC_INJ_IsConversionOngoing>
 8002b76:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d13d      	bne.n	8002bfa <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d13a      	bne.n	8002bfa <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b90:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba0:	f023 0302 	bic.w	r3, r3, #2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	69b9      	ldr	r1, [r7, #24]
 8002baa:	430b      	orrs	r3, r1
 8002bac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d118      	bne.n	8002bea <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bc2:	f023 0304 	bic.w	r3, r3, #4
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bce:	4311      	orrs	r1, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bd4:	4311      	orrs	r1, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	611a      	str	r2, [r3, #16]
 8002be8:	e007      	b.n	8002bfa <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10c      	bne.n	8002c1c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	f023 010f 	bic.w	r1, r3, #15
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	1e5a      	subs	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
 8002c1a:	e007      	b.n	8002c2c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 020f 	bic.w	r2, r2, #15
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c30:	f023 0303 	bic.w	r3, r3, #3
 8002c34:	f043 0201 	orr.w	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
 8002c3c:	e007      	b.n	8002c4e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	f043 0210 	orr.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	053e2d63 	.word	0x053e2d63
 8002c60:	50040000 	.word	0x50040000
 8002c64:	50040300 	.word	0x50040300
 8002c68:	fff0c007 	.word	0xfff0c007

08002c6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fe79 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d167      	bne.n	8002d58 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Start_DMA+0x2a>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e063      	b.n	8002d5e <HAL_ADC_Start_DMA+0xf2>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 ff3a 	bl	8003b18 <ADC_Enable>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d14f      	bne.n	8002d4e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	f023 0206 	bic.w	r2, r3, #6
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8002cda:	e002      	b.n	8002ce2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <HAL_ADC_Start_DMA+0xfc>)
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <HAL_ADC_Start_DMA+0x100>)
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_ADC_Start_DMA+0x104>)
 8002cf8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	221c      	movs	r2, #28
 8002d00:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0210 	orr.w	r2, r2, #16
 8002d18:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3340      	adds	r3, #64	; 0x40
 8002d34:	4619      	mov	r1, r3
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f001 fa63 	bl	8004204 <HAL_DMA_Start_IT>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fdec 	bl	8002924 <LL_ADC_REG_StartConversion>
 8002d4c:	e006      	b.n	8002d5c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d56:	e001      	b.n	8002d5c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	08003ce3 	.word	0x08003ce3
 8002d6c:	08003dbb 	.word	0x08003dbb
 8002d70:	08003dd7 	.word	0x08003dd7

08002d74 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_Stop_DMA+0x16>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e051      	b.n	8002e2e <HAL_ADC_Stop_DMA+0xba>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002d92:	2103      	movs	r1, #3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fe03 	bl	80039a0 <ADC_ConversionStop>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d13f      	bne.n	8002e24 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d10f      	bne.n	8002de2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 fa7c 	bl	80042c4 <HAL_DMA_Abort>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0210 	bic.w	r2, r2, #16
 8002df0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 ff13 	bl	8003c24 <ADC_Disable>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	e002      	b.n	8002e0a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 ff0d 	bl	8003c24 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b088      	sub	sp, #32
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d017      	beq.n	8002e8c <HAL_ADC_IRQHandler+0x56>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d012      	beq.n	8002e8c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d105      	bne.n	8002e7e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 ffeb 	bl	8003e5a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d004      	beq.n	8002ea0 <HAL_ADC_IRQHandler+0x6a>
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d05e      	beq.n	8002f68 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d059      	beq.n	8002f68 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fbea 	bl	80026aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d03e      	beq.n	8002f5a <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d135      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d12e      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fd37 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11a      	bne.n	8002f42 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 020c 	bic.w	r2, r2, #12
 8002f1a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d112      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	f043 0201 	orr.w	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54
 8002f40:	e00b      	b.n	8002f5a <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	f043 0210 	orr.w	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe fb72 	bl	8001644 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	220c      	movs	r2, #12
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_ADC_IRQHandler+0x146>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d072      	beq.n	800306c <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d06d      	beq.n	800306c <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fbbb 	bl	8002728 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002fb2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fb76 	bl	80026aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fbe:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d047      	beq.n	800305e <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_ADC_IRQHandler+0x1b2>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d03f      	beq.n	800305e <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d13a      	bne.n	800305e <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d133      	bne.n	800305e <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d12e      	bne.n	800305e <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fcdc 	bl	80029c2 <LL_ADC_INJ_IsConversionOngoing>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d11a      	bne.n	8003046 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800301e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003024:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d112      	bne.n	800305e <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
 8003044:	e00b      	b.n	800305e <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f043 0210 	orr.w	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fed3 	bl	8003e0a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2260      	movs	r2, #96	; 0x60
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d011      	beq.n	800309a <HAL_ADC_IRQHandler+0x264>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00c      	beq.n	800309a <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f890 	bl	80031b2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d012      	beq.n	80030ca <HAL_ADC_IRQHandler+0x294>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 feb9 	bl	8003e32 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d012      	beq.n	80030fa <HAL_ADC_IRQHandler+0x2c4>
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 feab 	bl	8003e46 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d02a      	beq.n	800315a <HAL_ADC_IRQHandler+0x324>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	d025      	beq.n	800315a <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8003116:	2301      	movs	r3, #1
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e008      	b.n	800312e <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800312a:	2301      	movs	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10e      	bne.n	8003152 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f043 0202 	orr.w	r2, r3, #2
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f83a 	bl	80031c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2210      	movs	r2, #16
 8003158:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d018      	beq.n	8003196 <HAL_ADC_IRQHandler+0x360>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316a:	2b00      	cmp	r3, #0
 800316c:	d013      	beq.n	8003196 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f043 0208 	orr.w	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800318e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fe44 	bl	8003e1e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003196:	bf00      	nop
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b0b6      	sub	sp, #216	; 0xd8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x22>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e3bb      	b.n	8003976 <HAL_ADC_ConfigChannel+0x79a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fbb2 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 83a0 	bne.w	8003958 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d824      	bhi.n	8003272 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	3b02      	subs	r3, #2
 800322e:	2b03      	cmp	r3, #3
 8003230:	d81b      	bhi.n	800326a <HAL_ADC_ConfigChannel+0x8e>
 8003232:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <HAL_ADC_ConfigChannel+0x5c>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	08003249 	.word	0x08003249
 800323c:	08003251 	.word	0x08003251
 8003240:	08003259 	.word	0x08003259
 8003244:	08003261 	.word	0x08003261
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003248:	230c      	movs	r3, #12
 800324a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800324e:	e010      	b.n	8003272 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003250:	2312      	movs	r3, #18
 8003252:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003256:	e00c      	b.n	8003272 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003258:	2318      	movs	r3, #24
 800325a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800325e:	e008      	b.n	8003272 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003268:	e003      	b.n	8003272 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800326a:	2306      	movs	r3, #6
 800326c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003270:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003280:	f7ff fa26 	bl	80026d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fb73 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 800328e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fb93 	bl	80029c2 <LL_ADC_INJ_IsConversionOngoing>
 800329c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f040 81a4 	bne.w	80035f2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f040 819f 	bne.w	80035f2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6819      	ldr	r1, [r3, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f7ff fa44 	bl	800274e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	08db      	lsrs	r3, r3, #3
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d00a      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6919      	ldr	r1, [r3, #16]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f8:	f7ff f982 	bl	8002600 <LL_ADC_SetOffset>
 80032fc:	e179      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff f99f 	bl	8002648 <LL_ADC_GetOffsetChannel>
 800330a:	4603      	mov	r3, r0
 800330c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <HAL_ADC_ConfigChannel+0x14e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff f994 	bl	8002648 <LL_ADC_GetOffsetChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	f003 021f 	and.w	r2, r3, #31
 8003328:	e01e      	b.n	8003368 <HAL_ADC_ConfigChannel+0x18c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff f989 	bl	8002648 <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003348:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800334c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003350:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e004      	b.n	8003366 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800335c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x1a4>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	e018      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1d6>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800339c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e004      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80033a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d106      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff f958 	bl	8002674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2101      	movs	r1, #1
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff f93c 	bl	8002648 <LL_ADC_GetOffsetChannel>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x214>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f931 	bl	8002648 <LL_ADC_GetOffsetChannel>
 80033e6:	4603      	mov	r3, r0
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	f003 021f 	and.w	r2, r3, #31
 80033ee:	e01e      	b.n	800342e <HAL_ADC_ConfigChannel+0x252>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f926 	bl	8002648 <LL_ADC_GetOffsetChannel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800340e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e004      	b.n	800342c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	2b00      	cmp	r3, #0
 8003438:	d105      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x26a>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	e018      	b.n	8003478 <HAL_ADC_ConfigChannel+0x29c>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800345a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800345e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003462:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800346a:	2320      	movs	r3, #32
 800346c:	e004      	b.n	8003478 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800346e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003478:	429a      	cmp	r2, r3
 800347a:	d106      	bne.n	800348a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2200      	movs	r2, #0
 8003482:	2101      	movs	r1, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff f8f5 	bl	8002674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2102      	movs	r1, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff f8d9 	bl	8002648 <LL_ADC_GetOffsetChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x2da>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2102      	movs	r1, #2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff f8ce 	bl	8002648 <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	e01e      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x318>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff f8c3 	bl	8002648 <LL_ADC_GetOffsetChannel>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80034d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80034dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e004      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80034e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_ADC_ConfigChannel+0x330>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0e9b      	lsrs	r3, r3, #26
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	e014      	b.n	8003536 <HAL_ADC_ConfigChannel+0x35a>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800351a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800351c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003528:	2320      	movs	r3, #32
 800352a:	e004      	b.n	8003536 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800352c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003536:	429a      	cmp	r2, r3
 8003538:	d106      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2200      	movs	r2, #0
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f896 	bl	8002674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2103      	movs	r1, #3
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f87a 	bl	8002648 <LL_ADC_GetOffsetChannel>
 8003554:	4603      	mov	r3, r0
 8003556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10a      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x398>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2103      	movs	r1, #3
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff f86f 	bl	8002648 <LL_ADC_GetOffsetChannel>
 800356a:	4603      	mov	r3, r0
 800356c:	0e9b      	lsrs	r3, r3, #26
 800356e:	f003 021f 	and.w	r2, r3, #31
 8003572:	e017      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x3c8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2103      	movs	r1, #3
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f864 	bl	8002648 <LL_ADC_GetOffsetChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800358c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003596:	2320      	movs	r3, #32
 8003598:	e003      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800359a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x3e0>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	0e9b      	lsrs	r3, r3, #26
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	e011      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x404>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80035ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035cc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80035ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80035d4:	2320      	movs	r3, #32
 80035d6:	e003      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80035d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d106      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2103      	movs	r1, #3
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff f841 	bl	8002674 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff f96e 	bl	80028d8 <LL_ADC_IsEnabled>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f040 8140 	bne.w	8003884 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	461a      	mov	r2, r3
 8003612:	f7ff f8c7 	bl	80027a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	4a8f      	ldr	r2, [pc, #572]	; (8003858 <HAL_ADC_ConfigChannel+0x67c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	f040 8131 	bne.w	8003884 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_ADC_ConfigChannel+0x46e>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	0e9b      	lsrs	r3, r3, #26
 8003638:	3301      	adds	r3, #1
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2b09      	cmp	r3, #9
 8003640:	bf94      	ite	ls
 8003642:	2301      	movls	r3, #1
 8003644:	2300      	movhi	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e019      	b.n	800367e <HAL_ADC_ConfigChannel+0x4a2>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800365c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003662:	2320      	movs	r3, #32
 8003664:	e003      	b.n	800366e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	2b09      	cmp	r3, #9
 8003676:	bf94      	ite	ls
 8003678:	2301      	movls	r3, #1
 800367a:	2300      	movhi	r3, #0
 800367c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367e:	2b00      	cmp	r3, #0
 8003680:	d079      	beq.n	8003776 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368a:	2b00      	cmp	r3, #0
 800368c:	d107      	bne.n	800369e <HAL_ADC_ConfigChannel+0x4c2>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	0e9b      	lsrs	r3, r3, #26
 8003694:	3301      	adds	r3, #1
 8003696:	069b      	lsls	r3, r3, #26
 8003698:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800369c:	e015      	b.n	80036ca <HAL_ADC_ConfigChannel+0x4ee>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e003      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80036ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	069b      	lsls	r3, r3, #26
 80036c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x50e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	0e9b      	lsrs	r3, r3, #26
 80036dc:	3301      	adds	r3, #1
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	2101      	movs	r1, #1
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	e017      	b.n	800371a <HAL_ADC_ConfigChannel+0x53e>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80036f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80036fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e003      	b.n	800370e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	ea42 0103 	orr.w	r1, r2, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x564>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	0e9b      	lsrs	r3, r3, #26
 8003730:	3301      	adds	r3, #1
 8003732:	f003 021f 	and.w	r2, r3, #31
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	051b      	lsls	r3, r3, #20
 800373e:	e018      	b.n	8003772 <HAL_ADC_ConfigChannel+0x596>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003758:	2320      	movs	r3, #32
 800375a:	e003      	b.n	8003764 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f003 021f 	and.w	r2, r3, #31
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003772:	430b      	orrs	r3, r1
 8003774:	e081      	b.n	800387a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377e:	2b00      	cmp	r3, #0
 8003780:	d107      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x5b6>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	0e9b      	lsrs	r3, r3, #26
 8003788:	3301      	adds	r3, #1
 800378a:	069b      	lsls	r3, r3, #26
 800378c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003790:	e015      	b.n	80037be <HAL_ADC_ConfigChannel+0x5e2>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80037aa:	2320      	movs	r3, #32
 80037ac:	e003      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	069b      	lsls	r3, r3, #26
 80037ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_ADC_ConfigChannel+0x602>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	0e9b      	lsrs	r3, r3, #26
 80037d0:	3301      	adds	r3, #1
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	2101      	movs	r1, #1
 80037d8:	fa01 f303 	lsl.w	r3, r1, r3
 80037dc:	e017      	b.n	800380e <HAL_ADC_ConfigChannel+0x632>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	61bb      	str	r3, [r7, #24]
  return result;
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80037f6:	2320      	movs	r3, #32
 80037f8:	e003      	b.n	8003802 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2101      	movs	r1, #1
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	ea42 0103 	orr.w	r1, r2, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <HAL_ADC_ConfigChannel+0x65e>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	0e9b      	lsrs	r3, r3, #26
 8003824:	3301      	adds	r3, #1
 8003826:	f003 021f 	and.w	r2, r3, #31
 800382a:	4613      	mov	r3, r2
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4413      	add	r3, r2
 8003830:	3b1e      	subs	r3, #30
 8003832:	051b      	lsls	r3, r3, #20
 8003834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003838:	e01e      	b.n	8003878 <HAL_ADC_ConfigChannel+0x69c>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	60fb      	str	r3, [r7, #12]
  return result;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003852:	2320      	movs	r3, #32
 8003854:	e006      	b.n	8003864 <HAL_ADC_ConfigChannel+0x688>
 8003856:	bf00      	nop
 8003858:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fab3 f383 	clz	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f003 021f 	and.w	r2, r3, #31
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	3b1e      	subs	r3, #30
 8003872:	051b      	lsls	r3, r3, #20
 8003874:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003878:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800387e:	4619      	mov	r1, r3
 8003880:	f7fe ff65 	bl	800274e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <HAL_ADC_ConfigChannel+0x7a4>)
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d06c      	beq.n	800396a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003890:	483c      	ldr	r0, [pc, #240]	; (8003984 <HAL_ADC_ConfigChannel+0x7a8>)
 8003892:	f7fe fea7 	bl	80025e4 <LL_ADC_GetCommonPathInternalCh>
 8003896:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3a      	ldr	r2, [pc, #232]	; (8003988 <HAL_ADC_ConfigChannel+0x7ac>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d127      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d121      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a35      	ldr	r2, [pc, #212]	; (800398c <HAL_ADC_ConfigChannel+0x7b0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d157      	bne.n	800396a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038c2:	4619      	mov	r1, r3
 80038c4:	482f      	ldr	r0, [pc, #188]	; (8003984 <HAL_ADC_ConfigChannel+0x7a8>)
 80038c6:	f7fe fe7a 	bl	80025be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_ADC_ConfigChannel+0x7b4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	4a30      	ldr	r2, [pc, #192]	; (8003994 <HAL_ADC_ConfigChannel+0x7b8>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	099b      	lsrs	r3, r3, #6
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038e4:	e002      	b.n	80038ec <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f9      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038f2:	e03a      	b.n	800396a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a27      	ldr	r2, [pc, #156]	; (8003998 <HAL_ADC_ConfigChannel+0x7bc>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d113      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10d      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1f      	ldr	r2, [pc, #124]	; (800398c <HAL_ADC_ConfigChannel+0x7b0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d12a      	bne.n	800396a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391c:	4619      	mov	r1, r3
 800391e:	4819      	ldr	r0, [pc, #100]	; (8003984 <HAL_ADC_ConfigChannel+0x7a8>)
 8003920:	f7fe fe4d 	bl	80025be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003924:	e021      	b.n	800396a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1c      	ldr	r2, [pc, #112]	; (800399c <HAL_ADC_ConfigChannel+0x7c0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d11c      	bne.n	800396a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d116      	bne.n	800396a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a12      	ldr	r2, [pc, #72]	; (800398c <HAL_ADC_ConfigChannel+0x7b0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d111      	bne.n	800396a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800394a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800394e:	4619      	mov	r1, r3
 8003950:	480c      	ldr	r0, [pc, #48]	; (8003984 <HAL_ADC_ConfigChannel+0x7a8>)
 8003952:	f7fe fe34 	bl	80025be <LL_ADC_SetCommonPathInternalCh>
 8003956:	e008      	b.n	800396a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003972:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003976:	4618      	mov	r0, r3
 8003978:	37d8      	adds	r7, #216	; 0xd8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	80080000 	.word	0x80080000
 8003984:	50040300 	.word	0x50040300
 8003988:	c7520000 	.word	0xc7520000
 800398c:	50040000 	.word	0x50040000
 8003990:	20000000 	.word	0x20000000
 8003994:	053e2d63 	.word	0x053e2d63
 8003998:	cb840000 	.word	0xcb840000
 800399c:	80000001 	.word	0x80000001

080039a0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe ffdc 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 80039bc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fffd 	bl	80029c2 <LL_ADC_INJ_IsConversionOngoing>
 80039c8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 8098 	beq.w	8003b08 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d02a      	beq.n	8003a3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	7e5b      	ldrb	r3, [r3, #25]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d126      	bne.n	8003a3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7e1b      	ldrb	r3, [r3, #24]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d122      	bne.n	8003a3c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80039f6:	2301      	movs	r3, #1
 80039f8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039fa:	e014      	b.n	8003a26 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4a45      	ldr	r2, [pc, #276]	; (8003b14 <ADC_ConversionStop+0x174>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d90d      	bls.n	8003a20 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a08:	f043 0210 	orr.w	r2, r3, #16
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	f043 0201 	orr.w	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e074      	b.n	8003b0a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	3301      	adds	r3, #1
 8003a24:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b40      	cmp	r3, #64	; 0x40
 8003a32:	d1e3      	bne.n	80039fc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2240      	movs	r2, #64	; 0x40
 8003a3a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d014      	beq.n	8003a6c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe ff94 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe ff51 	bl	80028fe <LL_ADC_IsDisableOngoing>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe ff70 	bl	800294c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d014      	beq.n	8003a9c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe ffa3 	bl	80029c2 <LL_ADC_INJ_IsConversionOngoing>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00c      	beq.n	8003a9c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe ff39 	bl	80028fe <LL_ADC_IsDisableOngoing>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe ff7f 	bl	800299a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d005      	beq.n	8003aae <ADC_ConversionStop+0x10e>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d105      	bne.n	8003ab4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	617b      	str	r3, [r7, #20]
        break;
 8003aac:	e005      	b.n	8003aba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003aae:	2308      	movs	r3, #8
 8003ab0:	617b      	str	r3, [r7, #20]
        break;
 8003ab2:	e002      	b.n	8003aba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	617b      	str	r3, [r7, #20]
        break;
 8003ab8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003aba:	f7fe fd3d 	bl	8002538 <HAL_GetTick>
 8003abe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ac0:	e01b      	b.n	8003afa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ac2:	f7fe fd39 	bl	8002538 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d914      	bls.n	8003afa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	f043 0210 	orr.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e007      	b.n	8003b0a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1dc      	bne.n	8003ac2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	a33fffff 	.word	0xa33fffff

08003b18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe fed5 	bl	80028d8 <LL_ADC_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d169      	bne.n	8003c08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <ADC_Enable+0xfc>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	f043 0210 	orr.w	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e055      	b.n	8003c0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fe90 	bl	8002888 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b68:	482b      	ldr	r0, [pc, #172]	; (8003c18 <ADC_Enable+0x100>)
 8003b6a:	f7fe fd3b 	bl	80025e4 <LL_ADC_GetCommonPathInternalCh>
 8003b6e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b78:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <ADC_Enable+0x104>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	099b      	lsrs	r3, r3, #6
 8003b7e:	4a28      	ldr	r2, [pc, #160]	; (8003c20 <ADC_Enable+0x108>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b92:	e002      	b.n	8003b9a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f9      	bne.n	8003b94 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ba0:	f7fe fcca 	bl	8002538 <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ba6:	e028      	b.n	8003bfa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe fe93 	bl	80028d8 <LL_ADC_IsEnabled>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe fe63 	bl	8002888 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bc2:	f7fe fcb9 	bl	8002538 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d914      	bls.n	8003bfa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d00d      	beq.n	8003bfa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	f043 0210 	orr.w	r2, r3, #16
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e007      	b.n	8003c0a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d1cf      	bne.n	8003ba8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	8000003f 	.word	0x8000003f
 8003c18:	50040300 	.word	0x50040300
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	053e2d63 	.word	0x053e2d63

08003c24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fe64 	bl	80028fe <LL_ADC_IsDisableOngoing>
 8003c36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fe4b 	bl	80028d8 <LL_ADC_IsEnabled>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d047      	beq.n	8003cd8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d144      	bne.n	8003cd8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030d 	and.w	r3, r3, #13
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d10c      	bne.n	8003c76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe fe25 	bl	80028b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c6e:	f7fe fc63 	bl	8002538 <HAL_GetTick>
 8003c72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c74:	e029      	b.n	8003cca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	f043 0210 	orr.w	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e023      	b.n	8003cda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c92:	f7fe fc51 	bl	8002538 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d914      	bls.n	8003cca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f043 0210 	orr.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	f043 0201 	orr.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e007      	b.n	8003cda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1dc      	bne.n	8003c92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d14b      	bne.n	8003d94 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d021      	beq.n	8003d5a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe fcc5 	bl	80026aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d032      	beq.n	8003d8c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d12b      	bne.n	8003d8c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d11f      	bne.n	8003d8c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d50:	f043 0201 	orr.w	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	655a      	str	r2, [r3, #84]	; 0x54
 8003d58:	e018      	b.n	8003d8c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d111      	bne.n	8003d8c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	f043 0201 	orr.w	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f7fd fc59 	bl	8001644 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d92:	e00e      	b.n	8003db2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff fa10 	bl	80031c6 <HAL_ADC_ErrorCallback>
}
 8003da6:	e004      	b.n	8003db2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff f9e8 	bl	800319e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff f9e2 	bl	80031c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ea2:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	60d3      	str	r3, [r2, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	0a1b      	lsrs	r3, r3, #8
 8003ec2:	f003 0307 	and.w	r3, r3, #7
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	db0b      	blt.n	8003efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	f003 021f 	and.w	r2, r3, #31
 8003eec:	4907      	ldr	r1, [pc, #28]	; (8003f0c <__NVIC_EnableIRQ+0x38>)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8003efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	e000e100 	.word	0xe000e100

08003f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	6039      	str	r1, [r7, #0]
 8003f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	db0a      	blt.n	8003f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	490c      	ldr	r1, [pc, #48]	; (8003f5c <__NVIC_SetPriority+0x4c>)
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	0112      	lsls	r2, r2, #4
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	440b      	add	r3, r1
 8003f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f38:	e00a      	b.n	8003f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4908      	ldr	r1, [pc, #32]	; (8003f60 <__NVIC_SetPriority+0x50>)
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	3b04      	subs	r3, #4
 8003f48:	0112      	lsls	r2, r2, #4
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	761a      	strb	r2, [r3, #24]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000e100 	.word	0xe000e100
 8003f60:	e000ed00 	.word	0xe000ed00

08003f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	; 0x24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f1c3 0307 	rsb	r3, r3, #7
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	bf28      	it	cs
 8003f82:	2304      	movcs	r3, #4
 8003f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d902      	bls.n	8003f94 <NVIC_EncodePriority+0x30>
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3b03      	subs	r3, #3
 8003f92:	e000      	b.n	8003f96 <NVIC_EncodePriority+0x32>
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f98:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fac:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb6:	43d9      	mvns	r1, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fbc:	4313      	orrs	r3, r2
         );
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3724      	adds	r7, #36	; 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fdc:	d301      	bcc.n	8003fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e00f      	b.n	8004002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fe2:	4a0a      	ldr	r2, [pc, #40]	; (800400c <SysTick_Config+0x40>)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fea:	210f      	movs	r1, #15
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	f7ff ff8e 	bl	8003f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <SysTick_Config+0x40>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ffa:	4b04      	ldr	r3, [pc, #16]	; (800400c <SysTick_Config+0x40>)
 8003ffc:	2207      	movs	r2, #7
 8003ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	e000e010 	.word	0xe000e010

08004010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ff29 	bl	8003e70 <__NVIC_SetPriorityGrouping>
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b086      	sub	sp, #24
 800402a:	af00      	add	r7, sp, #0
 800402c:	4603      	mov	r3, r0
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004038:	f7ff ff3e 	bl	8003eb8 <__NVIC_GetPriorityGrouping>
 800403c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	6978      	ldr	r0, [r7, #20]
 8004044:	f7ff ff8e 	bl	8003f64 <NVIC_EncodePriority>
 8004048:	4602      	mov	r2, r0
 800404a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800404e:	4611      	mov	r1, r2
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff ff5d 	bl	8003f10 <__NVIC_SetPriority>
}
 8004056:	bf00      	nop
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	4603      	mov	r3, r0
 8004066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff ff31 	bl	8003ed4 <__NVIC_EnableIRQ>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff ffa2 	bl	8003fcc <SysTick_Config>
 8004088:	4603      	mov	r3, r0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e098      	b.n	80041d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	4b4d      	ldr	r3, [pc, #308]	; (80041e4 <HAL_DMA_Init+0x150>)
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d80f      	bhi.n	80040d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	4b4b      	ldr	r3, [pc, #300]	; (80041e8 <HAL_DMA_Init+0x154>)
 80040ba:	4413      	add	r3, r2
 80040bc:	4a4b      	ldr	r2, [pc, #300]	; (80041ec <HAL_DMA_Init+0x158>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	009a      	lsls	r2, r3, #2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a48      	ldr	r2, [pc, #288]	; (80041f0 <HAL_DMA_Init+0x15c>)
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
 80040d0:	e00e      	b.n	80040f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b46      	ldr	r3, [pc, #280]	; (80041f4 <HAL_DMA_Init+0x160>)
 80040da:	4413      	add	r3, r2
 80040dc:	4a43      	ldr	r2, [pc, #268]	; (80041ec <HAL_DMA_Init+0x158>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	009a      	lsls	r2, r3, #2
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a42      	ldr	r2, [pc, #264]	; (80041f8 <HAL_DMA_Init+0x164>)
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800414a:	d039      	beq.n	80041c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	4a27      	ldr	r2, [pc, #156]	; (80041f0 <HAL_DMA_Init+0x15c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d11a      	bne.n	800418c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004156:	4b29      	ldr	r3, [pc, #164]	; (80041fc <HAL_DMA_Init+0x168>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f003 031c 	and.w	r3, r3, #28
 8004162:	210f      	movs	r1, #15
 8004164:	fa01 f303 	lsl.w	r3, r1, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	4924      	ldr	r1, [pc, #144]	; (80041fc <HAL_DMA_Init+0x168>)
 800416c:	4013      	ands	r3, r2
 800416e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004170:	4b22      	ldr	r3, [pc, #136]	; (80041fc <HAL_DMA_Init+0x168>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	f003 031c 	and.w	r3, r3, #28
 8004180:	fa01 f303 	lsl.w	r3, r1, r3
 8004184:	491d      	ldr	r1, [pc, #116]	; (80041fc <HAL_DMA_Init+0x168>)
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]
 800418a:	e019      	b.n	80041c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800418c:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <HAL_DMA_Init+0x16c>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004194:	f003 031c 	and.w	r3, r3, #28
 8004198:	210f      	movs	r1, #15
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	4917      	ldr	r1, [pc, #92]	; (8004200 <HAL_DMA_Init+0x16c>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041a6:	4b16      	ldr	r3, [pc, #88]	; (8004200 <HAL_DMA_Init+0x16c>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	f003 031c 	and.w	r3, r3, #28
 80041b6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ba:	4911      	ldr	r1, [pc, #68]	; (8004200 <HAL_DMA_Init+0x16c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40020407 	.word	0x40020407
 80041e8:	bffdfff8 	.word	0xbffdfff8
 80041ec:	cccccccd 	.word	0xcccccccd
 80041f0:	40020000 	.word	0x40020000
 80041f4:	bffdfbf8 	.word	0xbffdfbf8
 80041f8:	40020400 	.word	0x40020400
 80041fc:	400200a8 	.word	0x400200a8
 8004200:	400204a8 	.word	0x400204a8

08004204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_DMA_Start_IT+0x20>
 8004220:	2302      	movs	r3, #2
 8004222:	e04b      	b.n	80042bc <HAL_DMA_Start_IT+0xb8>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	d13a      	bne.n	80042ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f91e 	bl	800449e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 020e 	orr.w	r2, r2, #14
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	e00f      	b.n	800429c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0204 	bic.w	r2, r2, #4
 800428a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 020a 	orr.w	r2, r2, #10
 800429a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e005      	b.n	80042ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
 80042b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d008      	beq.n	80042ee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2204      	movs	r2, #4
 80042e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e022      	b.n	8004334 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 020e 	bic.w	r2, r2, #14
 80042fc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f003 021c 	and.w	r2, r3, #28
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2101      	movs	r1, #1
 800431c:	fa01 f202 	lsl.w	r2, r1, r2
 8004320:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004332:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435c:	f003 031c 	and.w	r3, r3, #28
 8004360:	2204      	movs	r2, #4
 8004362:	409a      	lsls	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d026      	beq.n	80043ba <HAL_DMA_IRQHandler+0x7a>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d021      	beq.n	80043ba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d107      	bne.n	8004394 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0204 	bic.w	r2, r2, #4
 8004392:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	f003 021c 	and.w	r2, r3, #28
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	2104      	movs	r1, #4
 80043a2:	fa01 f202 	lsl.w	r2, r1, r2
 80043a6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d071      	beq.n	8004494 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043b8:	e06c      	b.n	8004494 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f003 031c 	and.w	r3, r3, #28
 80043c2:	2202      	movs	r2, #2
 80043c4:	409a      	lsls	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02e      	beq.n	800442c <HAL_DMA_IRQHandler+0xec>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d029      	beq.n	800442c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 020a 	bic.w	r2, r2, #10
 80043f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	f003 021c 	and.w	r2, r3, #28
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2102      	movs	r1, #2
 800440c:	fa01 f202 	lsl.w	r2, r1, r2
 8004410:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d038      	beq.n	8004494 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800442a:	e033      	b.n	8004494 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	f003 031c 	and.w	r3, r3, #28
 8004434:	2208      	movs	r2, #8
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d02a      	beq.n	8004496 <HAL_DMA_IRQHandler+0x156>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d025      	beq.n	8004496 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 020e 	bic.w	r2, r2, #14
 8004458:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f003 021c 	and.w	r2, r3, #28
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2101      	movs	r1, #1
 8004468:	fa01 f202 	lsl.w	r2, r1, r2
 800446c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004494:	bf00      	nop
 8004496:	bf00      	nop
}
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b0:	f003 021c 	and.w	r2, r3, #28
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	2101      	movs	r1, #1
 80044ba:	fa01 f202 	lsl.w	r2, r1, r2
 80044be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d108      	bne.n	80044e2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044e0:	e007      	b.n	80044f2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	60da      	str	r2, [r3, #12]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800450e:	e148      	b.n	80047a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 813a 	beq.w	800479c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d005      	beq.n	8004540 <HAL_GPIO_Init+0x40>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d130      	bne.n	80045a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	2203      	movs	r2, #3
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4013      	ands	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004576:	2201      	movs	r2, #1
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 0201 	and.w	r2, r3, #1
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d017      	beq.n	80045de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	2203      	movs	r2, #3
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4013      	ands	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d123      	bne.n	8004632 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	08da      	lsrs	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3208      	adds	r2, #8
 80045f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	220f      	movs	r2, #15
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	08da      	lsrs	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3208      	adds	r2, #8
 800462c:	6939      	ldr	r1, [r7, #16]
 800462e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0203 	and.w	r2, r3, #3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8094 	beq.w	800479c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004674:	4b52      	ldr	r3, [pc, #328]	; (80047c0 <HAL_GPIO_Init+0x2c0>)
 8004676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004678:	4a51      	ldr	r2, [pc, #324]	; (80047c0 <HAL_GPIO_Init+0x2c0>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6613      	str	r3, [r2, #96]	; 0x60
 8004680:	4b4f      	ldr	r3, [pc, #316]	; (80047c0 <HAL_GPIO_Init+0x2c0>)
 8004682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800468c:	4a4d      	ldr	r2, [pc, #308]	; (80047c4 <HAL_GPIO_Init+0x2c4>)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	3302      	adds	r3, #2
 8004694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004698:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	220f      	movs	r2, #15
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046b6:	d00d      	beq.n	80046d4 <HAL_GPIO_Init+0x1d4>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a43      	ldr	r2, [pc, #268]	; (80047c8 <HAL_GPIO_Init+0x2c8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d007      	beq.n	80046d0 <HAL_GPIO_Init+0x1d0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a42      	ldr	r2, [pc, #264]	; (80047cc <HAL_GPIO_Init+0x2cc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_GPIO_Init+0x1cc>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e004      	b.n	80046d6 <HAL_GPIO_Init+0x1d6>
 80046cc:	2307      	movs	r3, #7
 80046ce:	e002      	b.n	80046d6 <HAL_GPIO_Init+0x1d6>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <HAL_GPIO_Init+0x1d6>
 80046d4:	2300      	movs	r3, #0
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	f002 0203 	and.w	r2, r2, #3
 80046dc:	0092      	lsls	r2, r2, #2
 80046de:	4093      	lsls	r3, r2
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046e6:	4937      	ldr	r1, [pc, #220]	; (80047c4 <HAL_GPIO_Init+0x2c4>)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	089b      	lsrs	r3, r3, #2
 80046ec:	3302      	adds	r3, #2
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <HAL_GPIO_Init+0x2d0>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004718:	4a2d      	ldr	r2, [pc, #180]	; (80047d0 <HAL_GPIO_Init+0x2d0>)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800471e:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <HAL_GPIO_Init+0x2d0>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43db      	mvns	r3, r3
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004742:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <HAL_GPIO_Init+0x2d0>)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004748:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <HAL_GPIO_Init+0x2d0>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	43db      	mvns	r3, r3
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4013      	ands	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800476c:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_GPIO_Init+0x2d0>)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <HAL_GPIO_Init+0x2d0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	43db      	mvns	r3, r3
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4013      	ands	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004796:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <HAL_GPIO_Init+0x2d0>)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	3301      	adds	r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f47f aeaf 	bne.w	8004510 <HAL_GPIO_Init+0x10>
  }
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40010000 	.word	0x40010000
 80047c8:	48000400 	.word	0x48000400
 80047cc:	48000800 	.word	0x48000800
 80047d0:	40010400 	.word	0x40010400

080047d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	887b      	ldrh	r3, [r7, #2]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	e001      	b.n	80047f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	807b      	strh	r3, [r7, #2]
 8004810:	4613      	mov	r3, r2
 8004812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004814:	787b      	ldrb	r3, [r7, #1]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004820:	e002      	b.n	8004828 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e08d      	b.n	8004962 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fc ffde 	bl	800181c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004884:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004894:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d107      	bne.n	80048ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e006      	b.n	80048bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d108      	bne.n	80048d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	e007      	b.n	80048e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004908:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	461a      	mov	r2, r3
 8004978:	460b      	mov	r3, r1
 800497a:	817b      	strh	r3, [r7, #10]
 800497c:	4613      	mov	r3, r2
 800497e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b20      	cmp	r3, #32
 800498a:	f040 80fd 	bne.w	8004b88 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_I2C_Master_Transmit+0x30>
 8004998:	2302      	movs	r3, #2
 800499a:	e0f6      	b.n	8004b8a <HAL_I2C_Master_Transmit+0x21e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049a4:	f7fd fdc8 	bl	8002538 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2319      	movs	r3, #25
 80049b0:	2201      	movs	r2, #1
 80049b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f920 	bl	8004bfc <I2C_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0e1      	b.n	8004b8a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2221      	movs	r2, #33	; 0x21
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2210      	movs	r2, #16
 80049d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	893a      	ldrh	r2, [r7, #8]
 80049e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2bff      	cmp	r3, #255	; 0xff
 80049f6:	d906      	bls.n	8004a06 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	22ff      	movs	r2, #255	; 0xff
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80049fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	e007      	b.n	8004a16 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a14:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d024      	beq.n	8004a68 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	3301      	adds	r3, #1
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	8979      	ldrh	r1, [r7, #10]
 8004a5a:	4b4e      	ldr	r3, [pc, #312]	; (8004b94 <HAL_I2C_Master_Transmit+0x228>)
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fa8f 	bl	8004f84 <I2C_TransferConfig>
 8004a66:	e066      	b.n	8004b36 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	8979      	ldrh	r1, [r7, #10]
 8004a70:	4b48      	ldr	r3, [pc, #288]	; (8004b94 <HAL_I2C_Master_Transmit+0x228>)
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fa84 	bl	8004f84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a7c:	e05b      	b.n	8004b36 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	6a39      	ldr	r1, [r7, #32]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f913 	bl	8004cae <I2C_WaitOnTXISFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e07b      	b.n	8004b8a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	781a      	ldrb	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d034      	beq.n	8004b36 <HAL_I2C_Master_Transmit+0x1ca>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d130      	bne.n	8004b36 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	2200      	movs	r2, #0
 8004adc:	2180      	movs	r1, #128	; 0x80
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f88c 	bl	8004bfc <I2C_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e04d      	b.n	8004b8a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2bff      	cmp	r3, #255	; 0xff
 8004af6:	d90e      	bls.n	8004b16 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	22ff      	movs	r2, #255	; 0xff
 8004afc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	8979      	ldrh	r1, [r7, #10]
 8004b06:	2300      	movs	r3, #0
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fa38 	bl	8004f84 <I2C_TransferConfig>
 8004b14:	e00f      	b.n	8004b36 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	8979      	ldrh	r1, [r7, #10]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fa27 	bl	8004f84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d19e      	bne.n	8004a7e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	6a39      	ldr	r1, [r7, #32]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f8f9 	bl	8004d3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e01a      	b.n	8004b8a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6859      	ldr	r1, [r3, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <HAL_I2C_Master_Transmit+0x22c>)
 8004b68:	400b      	ands	r3, r1
 8004b6a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	80002000 	.word	0x80002000
 8004b98:	fe00e800 	.word	0xfe00e800

08004b9c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d103      	bne.n	8004bd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d007      	beq.n	8004bf0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	619a      	str	r2, [r3, #24]
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0c:	e03b      	b.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f8d6 	bl	8004dc4 <I2C_IsErrorOccurred>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e041      	b.n	8004ca6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d02d      	beq.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2a:	f7fd fc85 	bl	8002538 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d122      	bne.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d113      	bne.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e00f      	b.n	8004ca6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699a      	ldr	r2, [r3, #24]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	bf0c      	ite	eq
 8004c96:	2301      	moveq	r3, #1
 8004c98:	2300      	movne	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d0b4      	beq.n	8004c0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cba:	e033      	b.n	8004d24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f87f 	bl	8004dc4 <I2C_IsErrorOccurred>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e031      	b.n	8004d34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d025      	beq.n	8004d24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd8:	f7fd fc2e 	bl	8002538 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d302      	bcc.n	8004cee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d11a      	bne.n	8004d24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d013      	beq.n	8004d24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e007      	b.n	8004d34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d1c4      	bne.n	8004cbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d48:	e02f      	b.n	8004daa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f838 	bl	8004dc4 <I2C_IsErrorOccurred>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e02d      	b.n	8004dba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5e:	f7fd fbeb 	bl	8002538 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d302      	bcc.n	8004d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d11a      	bne.n	8004daa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d013      	beq.n	8004daa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e007      	b.n	8004dba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	d1c8      	bne.n	8004d4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d068      	beq.n	8004ec2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2210      	movs	r2, #16
 8004df6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004df8:	e049      	b.n	8004e8e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d045      	beq.n	8004e8e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7fd fb99 	bl	8002538 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <I2C_IsErrorOccurred+0x54>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d13a      	bne.n	8004e8e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3a:	d121      	bne.n	8004e80 <I2C_IsErrorOccurred+0xbc>
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e42:	d01d      	beq.n	8004e80 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d01a      	beq.n	8004e80 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e5a:	f7fd fb6d 	bl	8002538 <HAL_GetTick>
 8004e5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e60:	e00e      	b.n	8004e80 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e62:	f7fd fb69 	bl	8002538 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b19      	cmp	r3, #25
 8004e6e:	d907      	bls.n	8004e80 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	f043 0320 	orr.w	r3, r3, #32
 8004e76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004e7e:	e006      	b.n	8004e8e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d1e9      	bne.n	8004e62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d003      	beq.n	8004ea4 <I2C_IsErrorOccurred+0xe0>
 8004e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0aa      	beq.n	8004dfa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d103      	bne.n	8004eb4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	f043 0304 	orr.w	r3, r3, #4
 8004eba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ee4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f043 0308 	orr.w	r3, r3, #8
 8004efc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	f043 0302 	orr.w	r3, r3, #2
 8004f1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01c      	beq.n	8004f72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7ff fe3b 	bl	8004bb4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6859      	ldr	r1, [r3, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <I2C_IsErrorOccurred+0x1bc>)
 8004f4a:	400b      	ands	r3, r1
 8004f4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3728      	adds	r7, #40	; 0x28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	fe00e800 	.word	0xfe00e800

08004f84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	817b      	strh	r3, [r7, #10]
 8004f92:	4613      	mov	r3, r2
 8004f94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f96:	897b      	ldrh	r3, [r7, #10]
 8004f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f9c:	7a7b      	ldrb	r3, [r7, #9]
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fa4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fb2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	0d5b      	lsrs	r3, r3, #21
 8004fbe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fc2:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <I2C_TransferConfig+0x60>)
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	ea02 0103 	and.w	r1, r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	03ff63ff 	.word	0x03ff63ff

08004fe8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d138      	bne.n	8005070 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005008:	2302      	movs	r3, #2
 800500a:	e032      	b.n	8005072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2224      	movs	r2, #36	; 0x24
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800503a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b20      	cmp	r3, #32
 8005092:	d139      	bne.n	8005108 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800509e:	2302      	movs	r3, #2
 80050a0:	e033      	b.n	800510a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2224      	movs	r2, #36	; 0x24
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e000      	b.n	800510a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005108:	2302      	movs	r3, #2
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <HAL_PWREx_GetVoltageRange+0x18>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40007000 	.word	0x40007000

08005134 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005142:	d130      	bne.n	80051a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005144:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800514c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005150:	d038      	beq.n	80051c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005152:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800515a:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800515c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005160:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005162:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2232      	movs	r2, #50	; 0x32
 8005168:	fb02 f303 	mul.w	r3, r2, r3
 800516c:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	0c9b      	lsrs	r3, r3, #18
 8005174:	3301      	adds	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005178:	e002      	b.n	8005180 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3b01      	subs	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005180:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518c:	d102      	bne.n	8005194 <HAL_PWREx_ControlVoltageScaling+0x60>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f2      	bne.n	800517a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005194:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a0:	d110      	bne.n	80051c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e00f      	b.n	80051c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b2:	d007      	beq.n	80051c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051bc:	4a05      	ldr	r2, [pc, #20]	; (80051d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40007000 	.word	0x40007000
 80051d8:	20000000 	.word	0x20000000
 80051dc:	431bde83 	.word	0x431bde83

080051e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f000 bc02 	b.w	80059f8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f4:	4b96      	ldr	r3, [pc, #600]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 030c 	and.w	r3, r3, #12
 80051fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051fe:	4b94      	ldr	r3, [pc, #592]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80e4 	beq.w	80053de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <HAL_RCC_OscConfig+0x4c>
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2b0c      	cmp	r3, #12
 8005220:	f040 808b 	bne.w	800533a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b01      	cmp	r3, #1
 8005228:	f040 8087 	bne.w	800533a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800522c:	4b88      	ldr	r3, [pc, #544]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_RCC_OscConfig+0x64>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e3d9      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1a      	ldr	r2, [r3, #32]
 8005248:	4b81      	ldr	r3, [pc, #516]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d004      	beq.n	800525e <HAL_RCC_OscConfig+0x7e>
 8005254:	4b7e      	ldr	r3, [pc, #504]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800525c:	e005      	b.n	800526a <HAL_RCC_OscConfig+0x8a>
 800525e:	4b7c      	ldr	r3, [pc, #496]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800526a:	4293      	cmp	r3, r2
 800526c:	d223      	bcs.n	80052b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fd8c 	bl	8005d90 <RCC_SetFlashLatencyFromMSIRange>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e3ba      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005282:	4b73      	ldr	r3, [pc, #460]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a72      	ldr	r2, [pc, #456]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005288:	f043 0308 	orr.w	r3, r3, #8
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4b70      	ldr	r3, [pc, #448]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	496d      	ldr	r1, [pc, #436]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 800529c:	4313      	orrs	r3, r2
 800529e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052a0:	4b6b      	ldr	r3, [pc, #428]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	4968      	ldr	r1, [pc, #416]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]
 80052b4:	e025      	b.n	8005302 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052b6:	4b66      	ldr	r3, [pc, #408]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a65      	ldr	r2, [pc, #404]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80052bc:	f043 0308 	orr.w	r3, r3, #8
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4b63      	ldr	r3, [pc, #396]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	4960      	ldr	r1, [pc, #384]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052d4:	4b5e      	ldr	r3, [pc, #376]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	495b      	ldr	r1, [pc, #364]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fd4c 	bl	8005d90 <RCC_SetFlashLatencyFromMSIRange>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e37a      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005302:	f000 fc81 	bl	8005c08 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b51      	ldr	r3, [pc, #324]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	4950      	ldr	r1, [pc, #320]	; (8005454 <HAL_RCC_OscConfig+0x274>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	f003 031f 	and.w	r3, r3, #31
 800531a:	fa22 f303 	lsr.w	r3, r2, r3
 800531e:	4a4e      	ldr	r2, [pc, #312]	; (8005458 <HAL_RCC_OscConfig+0x278>)
 8005320:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005322:	4b4e      	ldr	r3, [pc, #312]	; (800545c <HAL_RCC_OscConfig+0x27c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd f8b6 	bl	8002498 <HAL_InitTick>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d052      	beq.n	80053dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	e35e      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d032      	beq.n	80053a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005342:	4b43      	ldr	r3, [pc, #268]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a42      	ldr	r2, [pc, #264]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800534e:	f7fd f8f3 	bl	8002538 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005356:	f7fd f8ef 	bl	8002538 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e347      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005368:	4b39      	ldr	r3, [pc, #228]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005374:	4b36      	ldr	r3, [pc, #216]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a35      	ldr	r2, [pc, #212]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 800537a:	f043 0308 	orr.w	r3, r3, #8
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	4b33      	ldr	r3, [pc, #204]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	4930      	ldr	r1, [pc, #192]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005392:	4b2f      	ldr	r3, [pc, #188]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	492b      	ldr	r1, [pc, #172]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	604b      	str	r3, [r1, #4]
 80053a6:	e01a      	b.n	80053de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053a8:	4b29      	ldr	r3, [pc, #164]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a28      	ldr	r2, [pc, #160]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053b4:	f7fd f8c0 	bl	8002538 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053bc:	f7fd f8bc 	bl	8002538 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e314      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053ce:	4b20      	ldr	r3, [pc, #128]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x1dc>
 80053da:	e000      	b.n	80053de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d073      	beq.n	80054d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_OscConfig+0x21c>
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	d10e      	bne.n	8005414 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d10b      	bne.n	8005414 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fc:	4b14      	ldr	r3, [pc, #80]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d063      	beq.n	80054d0 <HAL_RCC_OscConfig+0x2f0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d15f      	bne.n	80054d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e2f1      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541c:	d106      	bne.n	800542c <HAL_RCC_OscConfig+0x24c>
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e025      	b.n	8005478 <HAL_RCC_OscConfig+0x298>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005434:	d114      	bne.n	8005460 <HAL_RCC_OscConfig+0x280>
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a05      	ldr	r2, [pc, #20]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 800543c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	4b03      	ldr	r3, [pc, #12]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a02      	ldr	r2, [pc, #8]	; (8005450 <HAL_RCC_OscConfig+0x270>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e013      	b.n	8005478 <HAL_RCC_OscConfig+0x298>
 8005450:	40021000 	.word	0x40021000
 8005454:	0800c80c 	.word	0x0800c80c
 8005458:	20000000 	.word	0x20000000
 800545c:	20000004 	.word	0x20000004
 8005460:	4ba0      	ldr	r3, [pc, #640]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a9f      	ldr	r2, [pc, #636]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	4b9d      	ldr	r3, [pc, #628]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a9c      	ldr	r2, [pc, #624]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fd f85a 	bl	8002538 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005488:	f7fd f856 	bl	8002538 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e2ae      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800549a:	4b92      	ldr	r3, [pc, #584]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x2a8>
 80054a6:	e014      	b.n	80054d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd f846 	bl	8002538 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fd f842 	bl	8002538 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e29a      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054c2:	4b88      	ldr	r3, [pc, #544]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x2d0>
 80054ce:	e000      	b.n	80054d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d060      	beq.n	80055a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d005      	beq.n	80054f0 <HAL_RCC_OscConfig+0x310>
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	2b0c      	cmp	r3, #12
 80054e8:	d119      	bne.n	800551e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d116      	bne.n	800551e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054f0:	4b7c      	ldr	r3, [pc, #496]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_RCC_OscConfig+0x328>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e277      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005508:	4b76      	ldr	r3, [pc, #472]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	061b      	lsls	r3, r3, #24
 8005516:	4973      	ldr	r1, [pc, #460]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005518:	4313      	orrs	r3, r2
 800551a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800551c:	e040      	b.n	80055a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d023      	beq.n	800556e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005526:	4b6f      	ldr	r3, [pc, #444]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a6e      	ldr	r2, [pc, #440]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 800552c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fd f801 	bl	8002538 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800553a:	f7fc fffd 	bl	8002538 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e255      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800554c:	4b65      	ldr	r3, [pc, #404]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005558:	4b62      	ldr	r3, [pc, #392]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	061b      	lsls	r3, r3, #24
 8005566:	495f      	ldr	r1, [pc, #380]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005568:	4313      	orrs	r3, r2
 800556a:	604b      	str	r3, [r1, #4]
 800556c:	e018      	b.n	80055a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556e:	4b5d      	ldr	r3, [pc, #372]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a5c      	ldr	r2, [pc, #368]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557a:	f7fc ffdd 	bl	8002538 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005582:	f7fc ffd9 	bl	8002538 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e231      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005594:	4b53      	ldr	r3, [pc, #332]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f0      	bne.n	8005582 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d03c      	beq.n	8005626 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01c      	beq.n	80055ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b4:	4b4b      	ldr	r3, [pc, #300]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80055b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ba:	4a4a      	ldr	r2, [pc, #296]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fc ffb8 	bl	8002538 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055cc:	f7fc ffb4 	bl	8002538 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e20c      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055de:	4b41      	ldr	r3, [pc, #260]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80055e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0ef      	beq.n	80055cc <HAL_RCC_OscConfig+0x3ec>
 80055ec:	e01b      	b.n	8005626 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ee:	4b3d      	ldr	r3, [pc, #244]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80055f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f4:	4a3b      	ldr	r2, [pc, #236]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fe:	f7fc ff9b 	bl	8002538 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005606:	f7fc ff97 	bl	8002538 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e1ef      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005618:	4b32      	ldr	r3, [pc, #200]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 800561a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1ef      	bne.n	8005606 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80a6 	beq.w	8005780 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005634:	2300      	movs	r3, #0
 8005636:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005638:	4b2a      	ldr	r3, [pc, #168]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 800563a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10d      	bne.n	8005660 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005644:	4b27      	ldr	r3, [pc, #156]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005648:	4a26      	ldr	r2, [pc, #152]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 800564a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564e:	6593      	str	r3, [r2, #88]	; 0x58
 8005650:	4b24      	ldr	r3, [pc, #144]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800565c:	2301      	movs	r3, #1
 800565e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005660:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <HAL_RCC_OscConfig+0x508>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d118      	bne.n	800569e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800566c:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <HAL_RCC_OscConfig+0x508>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1d      	ldr	r2, [pc, #116]	; (80056e8 <HAL_RCC_OscConfig+0x508>)
 8005672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005676:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005678:	f7fc ff5e 	bl	8002538 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005680:	f7fc ff5a 	bl	8002538 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e1b2      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <HAL_RCC_OscConfig+0x508>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f0      	beq.n	8005680 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d108      	bne.n	80056b8 <HAL_RCC_OscConfig+0x4d8>
 80056a6:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ac:	4a0d      	ldr	r2, [pc, #52]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056b6:	e029      	b.n	800570c <HAL_RCC_OscConfig+0x52c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b05      	cmp	r3, #5
 80056be:	d115      	bne.n	80056ec <HAL_RCC_OscConfig+0x50c>
 80056c0:	4b08      	ldr	r3, [pc, #32]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	4a07      	ldr	r2, [pc, #28]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80056c8:	f043 0304 	orr.w	r3, r3, #4
 80056cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	4a03      	ldr	r2, [pc, #12]	; (80056e4 <HAL_RCC_OscConfig+0x504>)
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056e0:	e014      	b.n	800570c <HAL_RCC_OscConfig+0x52c>
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40007000 	.word	0x40007000
 80056ec:	4b9a      	ldr	r3, [pc, #616]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	4a99      	ldr	r2, [pc, #612]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056fc:	4b96      	ldr	r3, [pc, #600]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005702:	4a95      	ldr	r2, [pc, #596]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005704:	f023 0304 	bic.w	r3, r3, #4
 8005708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d016      	beq.n	8005742 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005714:	f7fc ff10 	bl	8002538 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800571a:	e00a      	b.n	8005732 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571c:	f7fc ff0c 	bl	8002538 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f241 3288 	movw	r2, #5000	; 0x1388
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e162      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005732:	4b89      	ldr	r3, [pc, #548]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0ed      	beq.n	800571c <HAL_RCC_OscConfig+0x53c>
 8005740:	e015      	b.n	800576e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005742:	f7fc fef9 	bl	8002538 <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005748:	e00a      	b.n	8005760 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574a:	f7fc fef5 	bl	8002538 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	4293      	cmp	r3, r2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e14b      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005760:	4b7d      	ldr	r3, [pc, #500]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1ed      	bne.n	800574a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800576e:	7ffb      	ldrb	r3, [r7, #31]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d105      	bne.n	8005780 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005774:	4b78      	ldr	r3, [pc, #480]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005778:	4a77      	ldr	r2, [pc, #476]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 800577a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d03c      	beq.n	8005806 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01c      	beq.n	80057ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005794:	4b70      	ldr	r3, [pc, #448]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800579a:	4a6f      	ldr	r2, [pc, #444]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a4:	f7fc fec8 	bl	8002538 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ac:	f7fc fec4 	bl	8002538 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e11c      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057be:	4b66      	ldr	r3, [pc, #408]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80057c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0ef      	beq.n	80057ac <HAL_RCC_OscConfig+0x5cc>
 80057cc:	e01b      	b.n	8005806 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057ce:	4b62      	ldr	r3, [pc, #392]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80057d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d4:	4a60      	ldr	r2, [pc, #384]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057de:	f7fc feab 	bl	8002538 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e6:	f7fc fea7 	bl	8002538 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e0ff      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057f8:	4b57      	ldr	r3, [pc, #348]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80057fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1ef      	bne.n	80057e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80f3 	beq.w	80059f6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	2b02      	cmp	r3, #2
 8005816:	f040 80c9 	bne.w	80059ac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800581a:	4b4f      	ldr	r3, [pc, #316]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f003 0203 	and.w	r2, r3, #3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	429a      	cmp	r2, r3
 800582c:	d12c      	bne.n	8005888 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	3b01      	subs	r3, #1
 800583a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d123      	bne.n	8005888 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800584c:	429a      	cmp	r2, r3
 800584e:	d11b      	bne.n	8005888 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800585c:	429a      	cmp	r2, r3
 800585e:	d113      	bne.n	8005888 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	3b01      	subs	r3, #1
 800586e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d109      	bne.n	8005888 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	3b01      	subs	r3, #1
 8005882:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d06b      	beq.n	8005960 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	2b0c      	cmp	r3, #12
 800588c:	d062      	beq.n	8005954 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800588e:	4b32      	ldr	r3, [pc, #200]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e0ac      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800589e:	4b2e      	ldr	r3, [pc, #184]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2d      	ldr	r2, [pc, #180]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80058a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058aa:	f7fc fe45 	bl	8002538 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b2:	f7fc fe41 	bl	8002538 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e099      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058c4:	4b24      	ldr	r3, [pc, #144]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058d0:	4b21      	ldr	r3, [pc, #132]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	4b21      	ldr	r3, [pc, #132]	; (800595c <HAL_RCC_OscConfig+0x77c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058e0:	3a01      	subs	r2, #1
 80058e2:	0112      	lsls	r2, r2, #4
 80058e4:	4311      	orrs	r1, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058ea:	0212      	lsls	r2, r2, #8
 80058ec:	4311      	orrs	r1, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058f2:	0852      	lsrs	r2, r2, #1
 80058f4:	3a01      	subs	r2, #1
 80058f6:	0552      	lsls	r2, r2, #21
 80058f8:	4311      	orrs	r1, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058fe:	0852      	lsrs	r2, r2, #1
 8005900:	3a01      	subs	r2, #1
 8005902:	0652      	lsls	r2, r2, #25
 8005904:	4311      	orrs	r1, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800590a:	06d2      	lsls	r2, r2, #27
 800590c:	430a      	orrs	r2, r1
 800590e:	4912      	ldr	r1, [pc, #72]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005910:	4313      	orrs	r3, r2
 8005912:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005914:	4b10      	ldr	r3, [pc, #64]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a0f      	ldr	r2, [pc, #60]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 800591a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800591e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005920:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4a0c      	ldr	r2, [pc, #48]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800592a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800592c:	f7fc fe04 	bl	8002538 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005934:	f7fc fe00 	bl	8002538 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e058      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005946:	4b04      	ldr	r3, [pc, #16]	; (8005958 <HAL_RCC_OscConfig+0x778>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005952:	e050      	b.n	80059f6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e04f      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
 8005958:	40021000 	.word	0x40021000
 800595c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005960:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d144      	bne.n	80059f6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800596c:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a23      	ldr	r2, [pc, #140]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 8005972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005976:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005978:	4b21      	ldr	r3, [pc, #132]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4a20      	ldr	r2, [pc, #128]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 800597e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005982:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005984:	f7fc fdd8 	bl	8002538 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800598c:	f7fc fdd4 	bl	8002538 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e02c      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0x7ac>
 80059aa:	e024      	b.n	80059f6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b0c      	cmp	r3, #12
 80059b0:	d01f      	beq.n	80059f2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b2:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a12      	ldr	r2, [pc, #72]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 80059b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059be:	f7fc fdbb 	bl	8002538 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c6:	f7fc fdb7 	bl	8002538 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e00f      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059d8:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1f0      	bne.n	80059c6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80059e4:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	4905      	ldr	r1, [pc, #20]	; (8005a00 <HAL_RCC_OscConfig+0x820>)
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <HAL_RCC_OscConfig+0x824>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	60cb      	str	r3, [r1, #12]
 80059f0:	e001      	b.n	80059f6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40021000 	.word	0x40021000
 8005a04:	feeefffc 	.word	0xfeeefffc

08005a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0e7      	b.n	8005bec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a1c:	4b75      	ldr	r3, [pc, #468]	; (8005bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d910      	bls.n	8005a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2a:	4b72      	ldr	r3, [pc, #456]	; (8005bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f023 0207 	bic.w	r2, r3, #7
 8005a32:	4970      	ldr	r1, [pc, #448]	; (8005bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b6e      	ldr	r3, [pc, #440]	; (8005bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0cf      	b.n	8005bec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d010      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	4b66      	ldr	r3, [pc, #408]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d908      	bls.n	8005a7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a68:	4b63      	ldr	r3, [pc, #396]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4960      	ldr	r1, [pc, #384]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d04c      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d107      	bne.n	8005a9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8e:	4b5a      	ldr	r3, [pc, #360]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d121      	bne.n	8005ade <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e0a6      	b.n	8005bec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d107      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa6:	4b54      	ldr	r3, [pc, #336]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d115      	bne.n	8005ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e09a      	b.n	8005bec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d107      	bne.n	8005ace <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005abe:	4b4e      	ldr	r3, [pc, #312]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e08e      	b.n	8005bec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ace:	4b4a      	ldr	r3, [pc, #296]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e086      	b.n	8005bec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ade:	4b46      	ldr	r3, [pc, #280]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f023 0203 	bic.w	r2, r3, #3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	4943      	ldr	r1, [pc, #268]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af0:	f7fc fd22 	bl	8002538 <HAL_GetTick>
 8005af4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af6:	e00a      	b.n	8005b0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af8:	f7fc fd1e 	bl	8002538 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e06e      	b.n	8005bec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0e:	4b3a      	ldr	r3, [pc, #232]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 020c 	and.w	r2, r3, #12
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d1eb      	bne.n	8005af8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	4b31      	ldr	r3, [pc, #196]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d208      	bcs.n	8005b4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b3c:	4b2e      	ldr	r3, [pc, #184]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	492b      	ldr	r1, [pc, #172]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b4e:	4b29      	ldr	r3, [pc, #164]	; (8005bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d210      	bcs.n	8005b7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5c:	4b25      	ldr	r3, [pc, #148]	; (8005bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f023 0207 	bic.w	r2, r3, #7
 8005b64:	4923      	ldr	r1, [pc, #140]	; (8005bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6c:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d001      	beq.n	8005b7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e036      	b.n	8005bec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d008      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	4918      	ldr	r1, [pc, #96]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ba8:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	4910      	ldr	r1, [pc, #64]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bbc:	f000 f824 	bl	8005c08 <HAL_RCC_GetSysClockFreq>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	091b      	lsrs	r3, r3, #4
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	490b      	ldr	r1, [pc, #44]	; (8005bfc <HAL_RCC_ClockConfig+0x1f4>)
 8005bce:	5ccb      	ldrb	r3, [r1, r3]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd8:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <HAL_RCC_ClockConfig+0x1f8>)
 8005bda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bdc:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <HAL_RCC_ClockConfig+0x1fc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fc fc59 	bl	8002498 <HAL_InitTick>
 8005be6:	4603      	mov	r3, r0
 8005be8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005bea:	7afb      	ldrb	r3, [r7, #11]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40022000 	.word	0x40022000
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	0800c80c 	.word	0x0800c80c
 8005c00:	20000000 	.word	0x20000000
 8005c04:	20000004 	.word	0x20000004

08005c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b089      	sub	sp, #36	; 0x24
 8005c0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	2300      	movs	r3, #0
 8005c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c16:	4b3e      	ldr	r3, [pc, #248]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c20:	4b3b      	ldr	r3, [pc, #236]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x34>
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b0c      	cmp	r3, #12
 8005c34:	d121      	bne.n	8005c7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d11e      	bne.n	8005c7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c3c:	4b34      	ldr	r3, [pc, #208]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d107      	bne.n	8005c58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c48:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	61fb      	str	r3, [r7, #28]
 8005c56:	e005      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c58:	4b2d      	ldr	r3, [pc, #180]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c64:	4a2b      	ldr	r2, [pc, #172]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10d      	bne.n	8005c90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c78:	e00a      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d102      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c80:	4b25      	ldr	r3, [pc, #148]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c82:	61bb      	str	r3, [r7, #24]
 8005c84:	e004      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d101      	bne.n	8005c90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c8c:	4b23      	ldr	r3, [pc, #140]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8005c8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d134      	bne.n	8005d00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c96:	4b1e      	ldr	r3, [pc, #120]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d003      	beq.n	8005cae <HAL_RCC_GetSysClockFreq+0xa6>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d003      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0xac>
 8005cac:	e005      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005cae:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cb0:	617b      	str	r3, [r7, #20]
      break;
 8005cb2:	e005      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8005cb6:	617b      	str	r3, [r7, #20]
      break;
 8005cb8:	e002      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	617b      	str	r3, [r7, #20]
      break;
 8005cbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cc0:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	3301      	adds	r3, #1
 8005ccc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cce:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	0a1b      	lsrs	r3, r3, #8
 8005cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	fb03 f202 	mul.w	r2, r3, r2
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	0e5b      	lsrs	r3, r3, #25
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d00:	69bb      	ldr	r3, [r7, #24]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3724      	adds	r7, #36	; 0x24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40021000 	.word	0x40021000
 8005d14:	0800c824 	.word	0x0800c824
 8005d18:	00f42400 	.word	0x00f42400
 8005d1c:	00b71b00 	.word	0x00b71b00

08005d20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20000000 	.word	0x20000000

08005d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d3c:	f7ff fff0 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8005d40:	4602      	mov	r2, r0
 8005d42:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	4904      	ldr	r1, [pc, #16]	; (8005d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d4e:	5ccb      	ldrb	r3, [r1, r3]
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	0800c81c 	.word	0x0800c81c

08005d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d68:	f7ff ffda 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	0adb      	lsrs	r3, r3, #11
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	4904      	ldr	r1, [pc, #16]	; (8005d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d7a:	5ccb      	ldrb	r3, [r1, r3]
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	0800c81c 	.word	0x0800c81c

08005d90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d9c:	4b2a      	ldr	r3, [pc, #168]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005da8:	f7ff f9b6 	bl	8005118 <HAL_PWREx_GetVoltageRange>
 8005dac:	6178      	str	r0, [r7, #20]
 8005dae:	e014      	b.n	8005dda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005db0:	4b25      	ldr	r3, [pc, #148]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db4:	4a24      	ldr	r2, [pc, #144]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dba:	6593      	str	r3, [r2, #88]	; 0x58
 8005dbc:	4b22      	ldr	r3, [pc, #136]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005dc8:	f7ff f9a6 	bl	8005118 <HAL_PWREx_GetVoltageRange>
 8005dcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005dce:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd2:	4a1d      	ldr	r2, [pc, #116]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de0:	d10b      	bne.n	8005dfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b80      	cmp	r3, #128	; 0x80
 8005de6:	d919      	bls.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2ba0      	cmp	r3, #160	; 0xa0
 8005dec:	d902      	bls.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dee:	2302      	movs	r3, #2
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	e013      	b.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005df4:	2301      	movs	r3, #1
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	e010      	b.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b80      	cmp	r3, #128	; 0x80
 8005dfe:	d902      	bls.n	8005e06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e00:	2303      	movs	r3, #3
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	e00a      	b.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b80      	cmp	r3, #128	; 0x80
 8005e0a:	d102      	bne.n	8005e12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e004      	b.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b70      	cmp	r3, #112	; 0x70
 8005e16:	d101      	bne.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e18:	2301      	movs	r3, #1
 8005e1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f023 0207 	bic.w	r2, r3, #7
 8005e24:	4909      	ldr	r1, [pc, #36]	; (8005e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e2c:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d001      	beq.n	8005e3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	40022000 	.word	0x40022000

08005e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e58:	2300      	movs	r3, #0
 8005e5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d031      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e74:	d01a      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005e76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e7a:	d814      	bhi.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e84:	d10f      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005e86:	4b5d      	ldr	r3, [pc, #372]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	4a5c      	ldr	r2, [pc, #368]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e92:	e00c      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3304      	adds	r3, #4
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 f9ce 	bl	800623c <RCCEx_PLLSAI1_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ea4:	e003      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eae:	7cfb      	ldrb	r3, [r7, #19]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10b      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eb4:	4b51      	ldr	r3, [pc, #324]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	494e      	ldr	r1, [pc, #312]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005eca:	e001      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ecc:	7cfb      	ldrb	r3, [r7, #19]
 8005ece:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 809e 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ee2:	4b46      	ldr	r3, [pc, #280]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00d      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef8:	4b40      	ldr	r3, [pc, #256]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efc:	4a3f      	ldr	r2, [pc, #252]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f02:	6593      	str	r3, [r2, #88]	; 0x58
 8005f04:	4b3d      	ldr	r3, [pc, #244]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f10:	2301      	movs	r3, #1
 8005f12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f14:	4b3a      	ldr	r3, [pc, #232]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a39      	ldr	r2, [pc, #228]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f20:	f7fc fb0a 	bl	8002538 <HAL_GetTick>
 8005f24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f26:	e009      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f28:	f7fc fb06 	bl	8002538 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d902      	bls.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	74fb      	strb	r3, [r7, #19]
        break;
 8005f3a:	e005      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f3c:	4b30      	ldr	r3, [pc, #192]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0ef      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005f48:	7cfb      	ldrb	r3, [r7, #19]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d15a      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f4e:	4b2b      	ldr	r3, [pc, #172]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01e      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d019      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f6a:	4b24      	ldr	r3, [pc, #144]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f76:	4b21      	ldr	r3, [pc, #132]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8c:	4a1b      	ldr	r2, [pc, #108]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f96:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d016      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa8:	f7fc fac6 	bl	8002538 <HAL_GetTick>
 8005fac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fae:	e00b      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb0:	f7fc fac2 	bl	8002538 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d902      	bls.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	74fb      	strb	r3, [r7, #19]
            break;
 8005fc6:	e006      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0ec      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005fd6:	7cfb      	ldrb	r3, [r7, #19]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10b      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fdc:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fea:	4904      	ldr	r1, [pc, #16]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ff2:	e009      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	74bb      	strb	r3, [r7, #18]
 8005ff8:	e006      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005ffa:	bf00      	nop
 8005ffc:	40021000 	.word	0x40021000
 8006000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006004:	7cfb      	ldrb	r3, [r7, #19]
 8006006:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006008:	7c7b      	ldrb	r3, [r7, #17]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d105      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800600e:	4b8a      	ldr	r3, [pc, #552]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006012:	4a89      	ldr	r2, [pc, #548]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006018:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006026:	4b84      	ldr	r3, [pc, #528]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602c:	f023 0203 	bic.w	r2, r3, #3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	4980      	ldr	r1, [pc, #512]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006048:	4b7b      	ldr	r3, [pc, #492]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604e:	f023 020c 	bic.w	r2, r3, #12
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	4978      	ldr	r1, [pc, #480]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800606a:	4b73      	ldr	r3, [pc, #460]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800606c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006070:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	496f      	ldr	r1, [pc, #444]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800607a:	4313      	orrs	r3, r2
 800607c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800608c:	4b6a      	ldr	r3, [pc, #424]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006092:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609a:	4967      	ldr	r1, [pc, #412]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060ae:	4b62      	ldr	r3, [pc, #392]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	495e      	ldr	r1, [pc, #376]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060d0:	4b59      	ldr	r3, [pc, #356]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	4956      	ldr	r1, [pc, #344]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060f2:	4b51      	ldr	r3, [pc, #324]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	494d      	ldr	r1, [pc, #308]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d028      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006114:	4b48      	ldr	r3, [pc, #288]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	4945      	ldr	r1, [pc, #276]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006124:	4313      	orrs	r3, r2
 8006126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006132:	d106      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006134:	4b40      	ldr	r3, [pc, #256]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	4a3f      	ldr	r2, [pc, #252]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800613a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800613e:	60d3      	str	r3, [r2, #12]
 8006140:	e011      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800614a:	d10c      	bne.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3304      	adds	r3, #4
 8006150:	2101      	movs	r1, #1
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f872 	bl	800623c <RCCEx_PLLSAI1_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800615c:	7cfb      	ldrb	r3, [r7, #19]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006162:	7cfb      	ldrb	r3, [r7, #19]
 8006164:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d028      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006172:	4b31      	ldr	r3, [pc, #196]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006178:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006180:	492d      	ldr	r1, [pc, #180]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006190:	d106      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006192:	4b29      	ldr	r3, [pc, #164]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	4a28      	ldr	r2, [pc, #160]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800619c:	60d3      	str	r3, [r2, #12]
 800619e:	e011      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061a8:	d10c      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	2101      	movs	r1, #1
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 f843 	bl	800623c <RCCEx_PLLSAI1_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ba:	7cfb      	ldrb	r3, [r7, #19]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80061c0:	7cfb      	ldrb	r3, [r7, #19]
 80061c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01c      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061d0:	4b19      	ldr	r3, [pc, #100]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061de:	4916      	ldr	r1, [pc, #88]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ee:	d10c      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	2102      	movs	r1, #2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 f820 	bl	800623c <RCCEx_PLLSAI1_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006200:	7cfb      	ldrb	r3, [r7, #19]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006206:	7cfb      	ldrb	r3, [r7, #19]
 8006208:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006216:	4b08      	ldr	r3, [pc, #32]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006224:	4904      	ldr	r1, [pc, #16]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800622c:	7cbb      	ldrb	r3, [r7, #18]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000

0800623c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800624a:	4b74      	ldr	r3, [pc, #464]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d018      	beq.n	8006288 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006256:	4b71      	ldr	r3, [pc, #452]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0203 	and.w	r2, r3, #3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d10d      	bne.n	8006282 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
       ||
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800626e:	4b6b      	ldr	r3, [pc, #428]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
       ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d047      	beq.n	8006312 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
 8006286:	e044      	b.n	8006312 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b03      	cmp	r3, #3
 800628e:	d018      	beq.n	80062c2 <RCCEx_PLLSAI1_Config+0x86>
 8006290:	2b03      	cmp	r3, #3
 8006292:	d825      	bhi.n	80062e0 <RCCEx_PLLSAI1_Config+0xa4>
 8006294:	2b01      	cmp	r3, #1
 8006296:	d002      	beq.n	800629e <RCCEx_PLLSAI1_Config+0x62>
 8006298:	2b02      	cmp	r3, #2
 800629a:	d009      	beq.n	80062b0 <RCCEx_PLLSAI1_Config+0x74>
 800629c:	e020      	b.n	80062e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800629e:	4b5f      	ldr	r3, [pc, #380]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d11d      	bne.n	80062e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ae:	e01a      	b.n	80062e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062b0:	4b5a      	ldr	r3, [pc, #360]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d116      	bne.n	80062ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062c0:	e013      	b.n	80062ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062c2:	4b56      	ldr	r3, [pc, #344]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10f      	bne.n	80062ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062ce:	4b53      	ldr	r3, [pc, #332]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062de:	e006      	b.n	80062ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
      break;
 80062e4:	e004      	b.n	80062f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062e6:	bf00      	nop
 80062e8:	e002      	b.n	80062f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10d      	bne.n	8006312 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062f6:	4b49      	ldr	r3, [pc, #292]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6819      	ldr	r1, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	3b01      	subs	r3, #1
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	430b      	orrs	r3, r1
 800630c:	4943      	ldr	r1, [pc, #268]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 800630e:	4313      	orrs	r3, r2
 8006310:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d17c      	bne.n	8006412 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006318:	4b40      	ldr	r3, [pc, #256]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a3f      	ldr	r2, [pc, #252]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 800631e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006324:	f7fc f908 	bl	8002538 <HAL_GetTick>
 8006328:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800632a:	e009      	b.n	8006340 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800632c:	f7fc f904 	bl	8002538 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d902      	bls.n	8006340 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	73fb      	strb	r3, [r7, #15]
        break;
 800633e:	e005      	b.n	800634c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006340:	4b36      	ldr	r3, [pc, #216]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1ef      	bne.n	800632c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d15f      	bne.n	8006412 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d110      	bne.n	800637a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006358:	4b30      	ldr	r3, [pc, #192]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006360:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6892      	ldr	r2, [r2, #8]
 8006368:	0211      	lsls	r1, r2, #8
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	68d2      	ldr	r2, [r2, #12]
 800636e:	06d2      	lsls	r2, r2, #27
 8006370:	430a      	orrs	r2, r1
 8006372:	492a      	ldr	r1, [pc, #168]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006374:	4313      	orrs	r3, r2
 8006376:	610b      	str	r3, [r1, #16]
 8006378:	e027      	b.n	80063ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d112      	bne.n	80063a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006380:	4b26      	ldr	r3, [pc, #152]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006388:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6892      	ldr	r2, [r2, #8]
 8006390:	0211      	lsls	r1, r2, #8
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6912      	ldr	r2, [r2, #16]
 8006396:	0852      	lsrs	r2, r2, #1
 8006398:	3a01      	subs	r2, #1
 800639a:	0552      	lsls	r2, r2, #21
 800639c:	430a      	orrs	r2, r1
 800639e:	491f      	ldr	r1, [pc, #124]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	610b      	str	r3, [r1, #16]
 80063a4:	e011      	b.n	80063ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063a6:	4b1d      	ldr	r3, [pc, #116]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6892      	ldr	r2, [r2, #8]
 80063b6:	0211      	lsls	r1, r2, #8
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6952      	ldr	r2, [r2, #20]
 80063bc:	0852      	lsrs	r2, r2, #1
 80063be:	3a01      	subs	r2, #1
 80063c0:	0652      	lsls	r2, r2, #25
 80063c2:	430a      	orrs	r2, r1
 80063c4:	4915      	ldr	r1, [pc, #84]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a13      	ldr	r2, [pc, #76]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d6:	f7fc f8af 	bl	8002538 <HAL_GetTick>
 80063da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063dc:	e009      	b.n	80063f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063de:	f7fc f8ab 	bl	8002538 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d902      	bls.n	80063f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	73fb      	strb	r3, [r7, #15]
          break;
 80063f0:	e005      	b.n	80063fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063f2:	4b0a      	ldr	r3, [pc, #40]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0ef      	beq.n	80063de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	4903      	ldr	r1, [pc, #12]	; (800641c <RCCEx_PLLSAI1_Config+0x1e0>)
 800640e:	4313      	orrs	r3, r2
 8006410:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40021000 	.word	0x40021000

08006420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e049      	b.n	80064c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fb fea4 	bl	8002194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3304      	adds	r3, #4
 800645c:	4619      	mov	r1, r3
 800645e:	4610      	mov	r0, r2
 8006460:	f000 fc96 	bl	8006d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d001      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e03b      	b.n	8006560 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
 80064fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a19      	ldr	r2, [pc, #100]	; (800656c <HAL_TIM_Base_Start_IT+0x9c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_TIM_Base_Start_IT+0x4e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006512:	d004      	beq.n	800651e <HAL_TIM_Base_Start_IT+0x4e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a15      	ldr	r2, [pc, #84]	; (8006570 <HAL_TIM_Base_Start_IT+0xa0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d115      	bne.n	800654a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	4b13      	ldr	r3, [pc, #76]	; (8006574 <HAL_TIM_Base_Start_IT+0xa4>)
 8006526:	4013      	ands	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b06      	cmp	r3, #6
 800652e:	d015      	beq.n	800655c <HAL_TIM_Base_Start_IT+0x8c>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006536:	d011      	beq.n	800655c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0201 	orr.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006548:	e008      	b.n	800655c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0201 	orr.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	e000      	b.n	800655e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40014000 	.word	0x40014000
 8006574:	00010007 	.word	0x00010007

08006578 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e049      	b.n	800661e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fb fdb2 	bl	8002108 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	f000 fbea 	bl	8006d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <HAL_TIM_PWM_Start+0x24>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b01      	cmp	r3, #1
 8006642:	bf14      	ite	ne
 8006644:	2301      	movne	r3, #1
 8006646:	2300      	moveq	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	e03c      	b.n	80066c6 <HAL_TIM_PWM_Start+0x9e>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b04      	cmp	r3, #4
 8006650:	d109      	bne.n	8006666 <HAL_TIM_PWM_Start+0x3e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	bf14      	ite	ne
 800665e:	2301      	movne	r3, #1
 8006660:	2300      	moveq	r3, #0
 8006662:	b2db      	uxtb	r3, r3
 8006664:	e02f      	b.n	80066c6 <HAL_TIM_PWM_Start+0x9e>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d109      	bne.n	8006680 <HAL_TIM_PWM_Start+0x58>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b01      	cmp	r3, #1
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	e022      	b.n	80066c6 <HAL_TIM_PWM_Start+0x9e>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b0c      	cmp	r3, #12
 8006684:	d109      	bne.n	800669a <HAL_TIM_PWM_Start+0x72>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b01      	cmp	r3, #1
 8006690:	bf14      	ite	ne
 8006692:	2301      	movne	r3, #1
 8006694:	2300      	moveq	r3, #0
 8006696:	b2db      	uxtb	r3, r3
 8006698:	e015      	b.n	80066c6 <HAL_TIM_PWM_Start+0x9e>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b10      	cmp	r3, #16
 800669e:	d109      	bne.n	80066b4 <HAL_TIM_PWM_Start+0x8c>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	bf14      	ite	ne
 80066ac:	2301      	movne	r3, #1
 80066ae:	2300      	moveq	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	e008      	b.n	80066c6 <HAL_TIM_PWM_Start+0x9e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	bf14      	ite	ne
 80066c0:	2301      	movne	r3, #1
 80066c2:	2300      	moveq	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e07e      	b.n	80067cc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <HAL_TIM_PWM_Start+0xb6>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066dc:	e023      	b.n	8006726 <HAL_TIM_PWM_Start+0xfe>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d104      	bne.n	80066ee <HAL_TIM_PWM_Start+0xc6>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ec:	e01b      	b.n	8006726 <HAL_TIM_PWM_Start+0xfe>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d104      	bne.n	80066fe <HAL_TIM_PWM_Start+0xd6>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066fc:	e013      	b.n	8006726 <HAL_TIM_PWM_Start+0xfe>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b0c      	cmp	r3, #12
 8006702:	d104      	bne.n	800670e <HAL_TIM_PWM_Start+0xe6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800670c:	e00b      	b.n	8006726 <HAL_TIM_PWM_Start+0xfe>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b10      	cmp	r3, #16
 8006712:	d104      	bne.n	800671e <HAL_TIM_PWM_Start+0xf6>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800671c:	e003      	b.n	8006726 <HAL_TIM_PWM_Start+0xfe>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2201      	movs	r2, #1
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fe1c 	bl	800736c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a26      	ldr	r2, [pc, #152]	; (80067d4 <HAL_TIM_PWM_Start+0x1ac>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d009      	beq.n	8006752 <HAL_TIM_PWM_Start+0x12a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a25      	ldr	r2, [pc, #148]	; (80067d8 <HAL_TIM_PWM_Start+0x1b0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d004      	beq.n	8006752 <HAL_TIM_PWM_Start+0x12a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a23      	ldr	r2, [pc, #140]	; (80067dc <HAL_TIM_PWM_Start+0x1b4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d101      	bne.n	8006756 <HAL_TIM_PWM_Start+0x12e>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <HAL_TIM_PWM_Start+0x130>
 8006756:	2300      	movs	r3, #0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800676a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a18      	ldr	r2, [pc, #96]	; (80067d4 <HAL_TIM_PWM_Start+0x1ac>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d009      	beq.n	800678a <HAL_TIM_PWM_Start+0x162>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677e:	d004      	beq.n	800678a <HAL_TIM_PWM_Start+0x162>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <HAL_TIM_PWM_Start+0x1b0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d115      	bne.n	80067b6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <HAL_TIM_PWM_Start+0x1b8>)
 8006792:	4013      	ands	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b06      	cmp	r3, #6
 800679a:	d015      	beq.n	80067c8 <HAL_TIM_PWM_Start+0x1a0>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a2:	d011      	beq.n	80067c8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b4:	e008      	b.n	80067c8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0201 	orr.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	e000      	b.n	80067ca <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40012c00 	.word	0x40012c00
 80067d8:	40014000 	.word	0x40014000
 80067dc:	40014400 	.word	0x40014400
 80067e0:	00010007 	.word	0x00010007

080067e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2200      	movs	r2, #0
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fdb8 	bl	800736c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a39      	ldr	r2, [pc, #228]	; (80068e8 <HAL_TIM_PWM_Stop+0x104>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <HAL_TIM_PWM_Stop+0x36>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a38      	ldr	r2, [pc, #224]	; (80068ec <HAL_TIM_PWM_Stop+0x108>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIM_PWM_Stop+0x36>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a36      	ldr	r2, [pc, #216]	; (80068f0 <HAL_TIM_PWM_Stop+0x10c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d101      	bne.n	800681e <HAL_TIM_PWM_Stop+0x3a>
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <HAL_TIM_PWM_Stop+0x3c>
 800681e:	2300      	movs	r3, #0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d017      	beq.n	8006854 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6a1a      	ldr	r2, [r3, #32]
 800682a:	f241 1311 	movw	r3, #4369	; 0x1111
 800682e:	4013      	ands	r3, r2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10f      	bne.n	8006854 <HAL_TIM_PWM_Stop+0x70>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a1a      	ldr	r2, [r3, #32]
 800683a:	f240 4344 	movw	r3, #1092	; 0x444
 800683e:	4013      	ands	r3, r2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d107      	bne.n	8006854 <HAL_TIM_PWM_Stop+0x70>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006852:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6a1a      	ldr	r2, [r3, #32]
 800685a:	f241 1311 	movw	r3, #4369	; 0x1111
 800685e:	4013      	ands	r3, r2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10f      	bne.n	8006884 <HAL_TIM_PWM_Stop+0xa0>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6a1a      	ldr	r2, [r3, #32]
 800686a:	f240 4344 	movw	r3, #1092	; 0x444
 800686e:	4013      	ands	r3, r2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d107      	bne.n	8006884 <HAL_TIM_PWM_Stop+0xa0>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0201 	bic.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d104      	bne.n	8006894 <HAL_TIM_PWM_Stop+0xb0>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006892:	e023      	b.n	80068dc <HAL_TIM_PWM_Stop+0xf8>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b04      	cmp	r3, #4
 8006898:	d104      	bne.n	80068a4 <HAL_TIM_PWM_Stop+0xc0>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a2:	e01b      	b.n	80068dc <HAL_TIM_PWM_Stop+0xf8>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d104      	bne.n	80068b4 <HAL_TIM_PWM_Stop+0xd0>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b2:	e013      	b.n	80068dc <HAL_TIM_PWM_Stop+0xf8>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b0c      	cmp	r3, #12
 80068b8:	d104      	bne.n	80068c4 <HAL_TIM_PWM_Stop+0xe0>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068c2:	e00b      	b.n	80068dc <HAL_TIM_PWM_Stop+0xf8>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d104      	bne.n	80068d4 <HAL_TIM_PWM_Stop+0xf0>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d2:	e003      	b.n	80068dc <HAL_TIM_PWM_Stop+0xf8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40014400 	.word	0x40014400

080068f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d020      	beq.n	8006958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01b      	beq.n	8006958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0202 	mvn.w	r2, #2
 8006928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa08 	bl	8006d54 <HAL_TIM_IC_CaptureCallback>
 8006944:	e005      	b.n	8006952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f9fa 	bl	8006d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fa0b 	bl	8006d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d020      	beq.n	80069a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01b      	beq.n	80069a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0204 	mvn.w	r2, #4
 8006974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f9e2 	bl	8006d54 <HAL_TIM_IC_CaptureCallback>
 8006990:	e005      	b.n	800699e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f9d4 	bl	8006d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f9e5 	bl	8006d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d020      	beq.n	80069f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01b      	beq.n	80069f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0208 	mvn.w	r2, #8
 80069c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2204      	movs	r2, #4
 80069c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f9bc 	bl	8006d54 <HAL_TIM_IC_CaptureCallback>
 80069dc:	e005      	b.n	80069ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9ae 	bl	8006d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f9bf 	bl	8006d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0310 	and.w	r3, r3, #16
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d020      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01b      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0210 	mvn.w	r2, #16
 8006a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2208      	movs	r2, #8
 8006a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f996 	bl	8006d54 <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f988 	bl	8006d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f999 	bl	8006d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00c      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0201 	mvn.w	r2, #1
 8006a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f966 	bl	8006d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00c      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fd7d 	bl	8007588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00c      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fd75 	bl	800759c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00c      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f953 	bl	8006d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00c      	beq.n	8006afa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f003 0320 	and.w	r3, r3, #32
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f06f 0220 	mvn.w	r2, #32
 8006af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fd3d 	bl	8007574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e0ff      	b.n	8006d22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b14      	cmp	r3, #20
 8006b2e:	f200 80f0 	bhi.w	8006d12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b8d 	.word	0x08006b8d
 8006b3c:	08006d13 	.word	0x08006d13
 8006b40:	08006d13 	.word	0x08006d13
 8006b44:	08006d13 	.word	0x08006d13
 8006b48:	08006bcd 	.word	0x08006bcd
 8006b4c:	08006d13 	.word	0x08006d13
 8006b50:	08006d13 	.word	0x08006d13
 8006b54:	08006d13 	.word	0x08006d13
 8006b58:	08006c0f 	.word	0x08006c0f
 8006b5c:	08006d13 	.word	0x08006d13
 8006b60:	08006d13 	.word	0x08006d13
 8006b64:	08006d13 	.word	0x08006d13
 8006b68:	08006c4f 	.word	0x08006c4f
 8006b6c:	08006d13 	.word	0x08006d13
 8006b70:	08006d13 	.word	0x08006d13
 8006b74:	08006d13 	.word	0x08006d13
 8006b78:	08006c91 	.word	0x08006c91
 8006b7c:	08006d13 	.word	0x08006d13
 8006b80:	08006d13 	.word	0x08006d13
 8006b84:	08006d13 	.word	0x08006d13
 8006b88:	08006cd1 	.word	0x08006cd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68b9      	ldr	r1, [r7, #8]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f96c 	bl	8006e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0208 	orr.w	r2, r2, #8
 8006ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0204 	bic.w	r2, r2, #4
 8006bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6999      	ldr	r1, [r3, #24]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	619a      	str	r2, [r3, #24]
      break;
 8006bca:	e0a5      	b.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 f9c8 	bl	8006f68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699a      	ldr	r2, [r3, #24]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6999      	ldr	r1, [r3, #24]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	021a      	lsls	r2, r3, #8
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	619a      	str	r2, [r3, #24]
      break;
 8006c0c:	e084      	b.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fa21 	bl	800705c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0208 	orr.w	r2, r2, #8
 8006c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0204 	bic.w	r2, r2, #4
 8006c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69d9      	ldr	r1, [r3, #28]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	61da      	str	r2, [r3, #28]
      break;
 8006c4c:	e064      	b.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fa79 	bl	800714c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69d9      	ldr	r1, [r3, #28]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	021a      	lsls	r2, r3, #8
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	61da      	str	r2, [r3, #28]
      break;
 8006c8e:	e043      	b.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fab6 	bl	8007208 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0208 	orr.w	r2, r2, #8
 8006caa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0204 	bic.w	r2, r2, #4
 8006cba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	691a      	ldr	r2, [r3, #16]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cce:	e023      	b.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 faee 	bl	80072b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	021a      	lsls	r2, r3, #8
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d10:	e002      	b.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]
      break;
 8006d16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop

08006d2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a30      	ldr	r2, [pc, #192]	; (8006e64 <TIM_Base_SetConfig+0xd4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_Base_SetConfig+0x20>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dae:	d108      	bne.n	8006dc2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <TIM_Base_SetConfig+0xd4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00b      	beq.n	8006de2 <TIM_Base_SetConfig+0x52>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd0:	d007      	beq.n	8006de2 <TIM_Base_SetConfig+0x52>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a24      	ldr	r2, [pc, #144]	; (8006e68 <TIM_Base_SetConfig+0xd8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d003      	beq.n	8006de2 <TIM_Base_SetConfig+0x52>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a23      	ldr	r2, [pc, #140]	; (8006e6c <TIM_Base_SetConfig+0xdc>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d108      	bne.n	8006df4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a12      	ldr	r2, [pc, #72]	; (8006e64 <TIM_Base_SetConfig+0xd4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d007      	beq.n	8006e30 <TIM_Base_SetConfig+0xa0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a11      	ldr	r2, [pc, #68]	; (8006e68 <TIM_Base_SetConfig+0xd8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_Base_SetConfig+0xa0>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a10      	ldr	r2, [pc, #64]	; (8006e6c <TIM_Base_SetConfig+0xdc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d103      	bne.n	8006e38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d105      	bne.n	8006e56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f023 0201 	bic.w	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	611a      	str	r2, [r3, #16]
  }
}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40012c00 	.word	0x40012c00
 8006e68:	40014000 	.word	0x40014000
 8006e6c:	40014400 	.word	0x40014400

08006e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	f023 0201 	bic.w	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0303 	bic.w	r3, r3, #3
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f023 0302 	bic.w	r3, r3, #2
 8006ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a24      	ldr	r2, [pc, #144]	; (8006f5c <TIM_OC1_SetConfig+0xec>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_OC1_SetConfig+0x70>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a23      	ldr	r2, [pc, #140]	; (8006f60 <TIM_OC1_SetConfig+0xf0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_OC1_SetConfig+0x70>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a22      	ldr	r2, [pc, #136]	; (8006f64 <TIM_OC1_SetConfig+0xf4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d10c      	bne.n	8006efa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f023 0308 	bic.w	r3, r3, #8
 8006ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f023 0304 	bic.w	r3, r3, #4
 8006ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a17      	ldr	r2, [pc, #92]	; (8006f5c <TIM_OC1_SetConfig+0xec>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d007      	beq.n	8006f12 <TIM_OC1_SetConfig+0xa2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a16      	ldr	r2, [pc, #88]	; (8006f60 <TIM_OC1_SetConfig+0xf0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_OC1_SetConfig+0xa2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <TIM_OC1_SetConfig+0xf4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d111      	bne.n	8006f36 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	621a      	str	r2, [r3, #32]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	40012c00 	.word	0x40012c00
 8006f60:	40014000 	.word	0x40014000
 8006f64:	40014400 	.word	0x40014400

08006f68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	f023 0210 	bic.w	r2, r3, #16
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	021b      	lsls	r3, r3, #8
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f023 0320 	bic.w	r3, r3, #32
 8006fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a22      	ldr	r2, [pc, #136]	; (8007050 <TIM_OC2_SetConfig+0xe8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d10d      	bne.n	8006fe8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fe6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a19      	ldr	r2, [pc, #100]	; (8007050 <TIM_OC2_SetConfig+0xe8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d007      	beq.n	8007000 <TIM_OC2_SetConfig+0x98>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a18      	ldr	r2, [pc, #96]	; (8007054 <TIM_OC2_SetConfig+0xec>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <TIM_OC2_SetConfig+0x98>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a17      	ldr	r2, [pc, #92]	; (8007058 <TIM_OC2_SetConfig+0xf0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d113      	bne.n	8007028 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800700e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40012c00 	.word	0x40012c00
 8007054:	40014000 	.word	0x40014000
 8007058:	40014400 	.word	0x40014400

0800705c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a21      	ldr	r2, [pc, #132]	; (8007140 <TIM_OC3_SetConfig+0xe4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d10d      	bne.n	80070da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a18      	ldr	r2, [pc, #96]	; (8007140 <TIM_OC3_SetConfig+0xe4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d007      	beq.n	80070f2 <TIM_OC3_SetConfig+0x96>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a17      	ldr	r2, [pc, #92]	; (8007144 <TIM_OC3_SetConfig+0xe8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_OC3_SetConfig+0x96>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a16      	ldr	r2, [pc, #88]	; (8007148 <TIM_OC3_SetConfig+0xec>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d113      	bne.n	800711a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	621a      	str	r2, [r3, #32]
}
 8007134:	bf00      	nop
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40014000 	.word	0x40014000
 8007148:	40014400 	.word	0x40014400

0800714c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800719a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	031b      	lsls	r3, r3, #12
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a14      	ldr	r2, [pc, #80]	; (80071fc <TIM_OC4_SetConfig+0xb0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d007      	beq.n	80071c0 <TIM_OC4_SetConfig+0x74>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a13      	ldr	r2, [pc, #76]	; (8007200 <TIM_OC4_SetConfig+0xb4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_OC4_SetConfig+0x74>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a12      	ldr	r2, [pc, #72]	; (8007204 <TIM_OC4_SetConfig+0xb8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d109      	bne.n	80071d4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	019b      	lsls	r3, r3, #6
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	40012c00 	.word	0x40012c00
 8007200:	40014000 	.word	0x40014000
 8007204:	40014400 	.word	0x40014400

08007208 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800724c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a13      	ldr	r2, [pc, #76]	; (80072ac <TIM_OC5_SetConfig+0xa4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d007      	beq.n	8007272 <TIM_OC5_SetConfig+0x6a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a12      	ldr	r2, [pc, #72]	; (80072b0 <TIM_OC5_SetConfig+0xa8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_OC5_SetConfig+0x6a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a11      	ldr	r2, [pc, #68]	; (80072b4 <TIM_OC5_SetConfig+0xac>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d109      	bne.n	8007286 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007278:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	621a      	str	r2, [r3, #32]
}
 80072a0:	bf00      	nop
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40014000 	.word	0x40014000
 80072b4:	40014400 	.word	0x40014400

080072b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	051b      	lsls	r3, r3, #20
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	4313      	orrs	r3, r2
 800730a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a14      	ldr	r2, [pc, #80]	; (8007360 <TIM_OC6_SetConfig+0xa8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d007      	beq.n	8007324 <TIM_OC6_SetConfig+0x6c>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a13      	ldr	r2, [pc, #76]	; (8007364 <TIM_OC6_SetConfig+0xac>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_OC6_SetConfig+0x6c>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a12      	ldr	r2, [pc, #72]	; (8007368 <TIM_OC6_SetConfig+0xb0>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d109      	bne.n	8007338 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800732a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	029b      	lsls	r3, r3, #10
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	621a      	str	r2, [r3, #32]
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40012c00 	.word	0x40012c00
 8007364:	40014000 	.word	0x40014000
 8007368:	40014400 	.word	0x40014400

0800736c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	2201      	movs	r2, #1
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a1a      	ldr	r2, [r3, #32]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1a      	ldr	r2, [r3, #32]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	fa01 f303 	lsl.w	r3, r1, r3
 80073a4:	431a      	orrs	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
	...

080073b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d101      	bne.n	80073d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073cc:	2302      	movs	r3, #2
 80073ce:	e04f      	b.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a21      	ldr	r2, [pc, #132]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d108      	bne.n	800740c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007400:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a14      	ldr	r2, [pc, #80]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007438:	d004      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a10      	ldr	r2, [pc, #64]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d10c      	bne.n	800745e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800744a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	4313      	orrs	r3, r2
 8007454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40014000 	.word	0x40014000

08007484 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800749c:	2302      	movs	r3, #2
 800749e:	e060      	b.n	8007562 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a14      	ldr	r2, [pc, #80]	; (8007570 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d115      	bne.n	8007550 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	051b      	lsls	r3, r3, #20
 8007530:	4313      	orrs	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	40012c00 	.word	0x40012c00

08007574 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e040      	b.n	8007644 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d106      	bne.n	80075d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7fa feb4 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2224      	movs	r2, #36	; 0x24
 80075dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fade 	bl	8007bb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8af 	bl	8007760 <UART_SetConfig>
 8007602:	4603      	mov	r3, r0
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e01b      	b.n	8007644 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800761a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800762a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fb5d 	bl	8007cfc <UART_CheckIdleState>
 8007642:	4603      	mov	r3, r0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	; 0x28
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007660:	2b20      	cmp	r3, #32
 8007662:	d178      	bne.n	8007756 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_UART_Transmit+0x24>
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e071      	b.n	8007758 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2221      	movs	r2, #33	; 0x21
 8007680:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007682:	f7fa ff59 	bl	8002538 <HAL_GetTick>
 8007686:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	88fa      	ldrh	r2, [r7, #6]
 800768c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	88fa      	ldrh	r2, [r7, #6]
 8007694:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a0:	d108      	bne.n	80076b4 <HAL_UART_Transmit+0x68>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d104      	bne.n	80076b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	61bb      	str	r3, [r7, #24]
 80076b2:	e003      	b.n	80076bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076bc:	e030      	b.n	8007720 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2200      	movs	r2, #0
 80076c6:	2180      	movs	r1, #128	; 0x80
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 fbbf 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e03c      	b.n	8007758 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10b      	bne.n	80076fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	881a      	ldrh	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076f0:	b292      	uxth	r2, r2
 80076f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	3302      	adds	r3, #2
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	e008      	b.n	800770e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	b292      	uxth	r2, r2
 8007706:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	3301      	adds	r3, #1
 800770c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007726:	b29b      	uxth	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1c8      	bne.n	80076be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2200      	movs	r2, #0
 8007734:	2140      	movs	r1, #64	; 0x40
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fb88 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d004      	beq.n	800774c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2220      	movs	r2, #32
 8007746:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e005      	b.n	8007758 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	e000      	b.n	8007758 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007756:	2302      	movs	r3, #2
  }
}
 8007758:	4618      	mov	r0, r3
 800775a:	3720      	adds	r7, #32
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007764:	b08a      	sub	sp, #40	; 0x28
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	431a      	orrs	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	431a      	orrs	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	4313      	orrs	r3, r2
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4bb4      	ldr	r3, [pc, #720]	; (8007a60 <UART_SetConfig+0x300>)
 8007790:	4013      	ands	r3, r2
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	6812      	ldr	r2, [r2, #0]
 8007796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007798:	430b      	orrs	r3, r1
 800779a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4aa9      	ldr	r2, [pc, #676]	; (8007a64 <UART_SetConfig+0x304>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d004      	beq.n	80077cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c8:	4313      	orrs	r3, r2
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077dc:	430a      	orrs	r2, r1
 80077de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4aa0      	ldr	r2, [pc, #640]	; (8007a68 <UART_SetConfig+0x308>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d126      	bne.n	8007838 <UART_SetConfig+0xd8>
 80077ea:	4ba0      	ldr	r3, [pc, #640]	; (8007a6c <UART_SetConfig+0x30c>)
 80077ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f0:	f003 0303 	and.w	r3, r3, #3
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d81b      	bhi.n	8007830 <UART_SetConfig+0xd0>
 80077f8:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <UART_SetConfig+0xa0>)
 80077fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fe:	bf00      	nop
 8007800:	08007811 	.word	0x08007811
 8007804:	08007821 	.word	0x08007821
 8007808:	08007819 	.word	0x08007819
 800780c:	08007829 	.word	0x08007829
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007816:	e080      	b.n	800791a <UART_SetConfig+0x1ba>
 8007818:	2302      	movs	r3, #2
 800781a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781e:	e07c      	b.n	800791a <UART_SetConfig+0x1ba>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007826:	e078      	b.n	800791a <UART_SetConfig+0x1ba>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782e:	e074      	b.n	800791a <UART_SetConfig+0x1ba>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007836:	e070      	b.n	800791a <UART_SetConfig+0x1ba>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a8c      	ldr	r2, [pc, #560]	; (8007a70 <UART_SetConfig+0x310>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d138      	bne.n	80078b4 <UART_SetConfig+0x154>
 8007842:	4b8a      	ldr	r3, [pc, #552]	; (8007a6c <UART_SetConfig+0x30c>)
 8007844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007848:	f003 030c 	and.w	r3, r3, #12
 800784c:	2b0c      	cmp	r3, #12
 800784e:	d82d      	bhi.n	80078ac <UART_SetConfig+0x14c>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <UART_SetConfig+0xf8>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	0800788d 	.word	0x0800788d
 800785c:	080078ad 	.word	0x080078ad
 8007860:	080078ad 	.word	0x080078ad
 8007864:	080078ad 	.word	0x080078ad
 8007868:	0800789d 	.word	0x0800789d
 800786c:	080078ad 	.word	0x080078ad
 8007870:	080078ad 	.word	0x080078ad
 8007874:	080078ad 	.word	0x080078ad
 8007878:	08007895 	.word	0x08007895
 800787c:	080078ad 	.word	0x080078ad
 8007880:	080078ad 	.word	0x080078ad
 8007884:	080078ad 	.word	0x080078ad
 8007888:	080078a5 	.word	0x080078a5
 800788c:	2300      	movs	r3, #0
 800788e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007892:	e042      	b.n	800791a <UART_SetConfig+0x1ba>
 8007894:	2302      	movs	r3, #2
 8007896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800789a:	e03e      	b.n	800791a <UART_SetConfig+0x1ba>
 800789c:	2304      	movs	r3, #4
 800789e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a2:	e03a      	b.n	800791a <UART_SetConfig+0x1ba>
 80078a4:	2308      	movs	r3, #8
 80078a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078aa:	e036      	b.n	800791a <UART_SetConfig+0x1ba>
 80078ac:	2310      	movs	r3, #16
 80078ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b2:	e032      	b.n	800791a <UART_SetConfig+0x1ba>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a6a      	ldr	r2, [pc, #424]	; (8007a64 <UART_SetConfig+0x304>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d12a      	bne.n	8007914 <UART_SetConfig+0x1b4>
 80078be:	4b6b      	ldr	r3, [pc, #428]	; (8007a6c <UART_SetConfig+0x30c>)
 80078c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078cc:	d01a      	beq.n	8007904 <UART_SetConfig+0x1a4>
 80078ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078d2:	d81b      	bhi.n	800790c <UART_SetConfig+0x1ac>
 80078d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078d8:	d00c      	beq.n	80078f4 <UART_SetConfig+0x194>
 80078da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078de:	d815      	bhi.n	800790c <UART_SetConfig+0x1ac>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <UART_SetConfig+0x18c>
 80078e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e8:	d008      	beq.n	80078fc <UART_SetConfig+0x19c>
 80078ea:	e00f      	b.n	800790c <UART_SetConfig+0x1ac>
 80078ec:	2300      	movs	r3, #0
 80078ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078f2:	e012      	b.n	800791a <UART_SetConfig+0x1ba>
 80078f4:	2302      	movs	r3, #2
 80078f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078fa:	e00e      	b.n	800791a <UART_SetConfig+0x1ba>
 80078fc:	2304      	movs	r3, #4
 80078fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007902:	e00a      	b.n	800791a <UART_SetConfig+0x1ba>
 8007904:	2308      	movs	r3, #8
 8007906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800790a:	e006      	b.n	800791a <UART_SetConfig+0x1ba>
 800790c:	2310      	movs	r3, #16
 800790e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007912:	e002      	b.n	800791a <UART_SetConfig+0x1ba>
 8007914:	2310      	movs	r3, #16
 8007916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a51      	ldr	r2, [pc, #324]	; (8007a64 <UART_SetConfig+0x304>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d17a      	bne.n	8007a1a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007928:	2b08      	cmp	r3, #8
 800792a:	d824      	bhi.n	8007976 <UART_SetConfig+0x216>
 800792c:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <UART_SetConfig+0x1d4>)
 800792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007959 	.word	0x08007959
 8007938:	08007977 	.word	0x08007977
 800793c:	08007961 	.word	0x08007961
 8007940:	08007977 	.word	0x08007977
 8007944:	08007967 	.word	0x08007967
 8007948:	08007977 	.word	0x08007977
 800794c:	08007977 	.word	0x08007977
 8007950:	08007977 	.word	0x08007977
 8007954:	0800796f 	.word	0x0800796f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007958:	f7fe f9ee 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 800795c:	61f8      	str	r0, [r7, #28]
        break;
 800795e:	e010      	b.n	8007982 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007960:	4b44      	ldr	r3, [pc, #272]	; (8007a74 <UART_SetConfig+0x314>)
 8007962:	61fb      	str	r3, [r7, #28]
        break;
 8007964:	e00d      	b.n	8007982 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007966:	f7fe f94f 	bl	8005c08 <HAL_RCC_GetSysClockFreq>
 800796a:	61f8      	str	r0, [r7, #28]
        break;
 800796c:	e009      	b.n	8007982 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800796e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007972:	61fb      	str	r3, [r7, #28]
        break;
 8007974:	e005      	b.n	8007982 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007980:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 8107 	beq.w	8007b98 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	4613      	mov	r3, r2
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	4413      	add	r3, r2
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	429a      	cmp	r2, r3
 8007998:	d305      	bcc.n	80079a6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d903      	bls.n	80079ae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079ac:	e0f4      	b.n	8007b98 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	2200      	movs	r2, #0
 80079b2:	461c      	mov	r4, r3
 80079b4:	4615      	mov	r5, r2
 80079b6:	f04f 0200 	mov.w	r2, #0
 80079ba:	f04f 0300 	mov.w	r3, #0
 80079be:	022b      	lsls	r3, r5, #8
 80079c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80079c4:	0222      	lsls	r2, r4, #8
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	6849      	ldr	r1, [r1, #4]
 80079ca:	0849      	lsrs	r1, r1, #1
 80079cc:	2000      	movs	r0, #0
 80079ce:	4688      	mov	r8, r1
 80079d0:	4681      	mov	r9, r0
 80079d2:	eb12 0a08 	adds.w	sl, r2, r8
 80079d6:	eb43 0b09 	adc.w	fp, r3, r9
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	603b      	str	r3, [r7, #0]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e8:	4650      	mov	r0, sl
 80079ea:	4659      	mov	r1, fp
 80079ec:	f7f9 f94c 	bl	8000c88 <__aeabi_uldivmod>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4613      	mov	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079fe:	d308      	bcc.n	8007a12 <UART_SetConfig+0x2b2>
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a06:	d204      	bcs.n	8007a12 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	60da      	str	r2, [r3, #12]
 8007a10:	e0c2      	b.n	8007b98 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a18:	e0be      	b.n	8007b98 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a22:	d16a      	bne.n	8007afa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d834      	bhi.n	8007a96 <UART_SetConfig+0x336>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <UART_SetConfig+0x2d4>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a59 	.word	0x08007a59
 8007a38:	08007a79 	.word	0x08007a79
 8007a3c:	08007a81 	.word	0x08007a81
 8007a40:	08007a97 	.word	0x08007a97
 8007a44:	08007a87 	.word	0x08007a87
 8007a48:	08007a97 	.word	0x08007a97
 8007a4c:	08007a97 	.word	0x08007a97
 8007a50:	08007a97 	.word	0x08007a97
 8007a54:	08007a8f 	.word	0x08007a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a58:	f7fe f96e 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8007a5c:	61f8      	str	r0, [r7, #28]
        break;
 8007a5e:	e020      	b.n	8007aa2 <UART_SetConfig+0x342>
 8007a60:	efff69f3 	.word	0xefff69f3
 8007a64:	40008000 	.word	0x40008000
 8007a68:	40013800 	.word	0x40013800
 8007a6c:	40021000 	.word	0x40021000
 8007a70:	40004400 	.word	0x40004400
 8007a74:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a78:	f7fe f974 	bl	8005d64 <HAL_RCC_GetPCLK2Freq>
 8007a7c:	61f8      	str	r0, [r7, #28]
        break;
 8007a7e:	e010      	b.n	8007aa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a80:	4b4c      	ldr	r3, [pc, #304]	; (8007bb4 <UART_SetConfig+0x454>)
 8007a82:	61fb      	str	r3, [r7, #28]
        break;
 8007a84:	e00d      	b.n	8007aa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a86:	f7fe f8bf 	bl	8005c08 <HAL_RCC_GetSysClockFreq>
 8007a8a:	61f8      	str	r0, [r7, #28]
        break;
 8007a8c:	e009      	b.n	8007aa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a92:	61fb      	str	r3, [r7, #28]
        break;
 8007a94:	e005      	b.n	8007aa2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007aa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d077      	beq.n	8007b98 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	005a      	lsls	r2, r3, #1
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	441a      	add	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b0f      	cmp	r3, #15
 8007ac2:	d916      	bls.n	8007af2 <UART_SetConfig+0x392>
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aca:	d212      	bcs.n	8007af2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	f023 030f 	bic.w	r3, r3, #15
 8007ad4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	085b      	lsrs	r3, r3, #1
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	8afb      	ldrh	r3, [r7, #22]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	8afa      	ldrh	r2, [r7, #22]
 8007aee:	60da      	str	r2, [r3, #12]
 8007af0:	e052      	b.n	8007b98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007af8:	e04e      	b.n	8007b98 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d827      	bhi.n	8007b52 <UART_SetConfig+0x3f2>
 8007b02:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <UART_SetConfig+0x3a8>)
 8007b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007b35 	.word	0x08007b35
 8007b10:	08007b3d 	.word	0x08007b3d
 8007b14:	08007b53 	.word	0x08007b53
 8007b18:	08007b43 	.word	0x08007b43
 8007b1c:	08007b53 	.word	0x08007b53
 8007b20:	08007b53 	.word	0x08007b53
 8007b24:	08007b53 	.word	0x08007b53
 8007b28:	08007b4b 	.word	0x08007b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b2c:	f7fe f904 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8007b30:	61f8      	str	r0, [r7, #28]
        break;
 8007b32:	e014      	b.n	8007b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b34:	f7fe f916 	bl	8005d64 <HAL_RCC_GetPCLK2Freq>
 8007b38:	61f8      	str	r0, [r7, #28]
        break;
 8007b3a:	e010      	b.n	8007b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b3c:	4b1d      	ldr	r3, [pc, #116]	; (8007bb4 <UART_SetConfig+0x454>)
 8007b3e:	61fb      	str	r3, [r7, #28]
        break;
 8007b40:	e00d      	b.n	8007b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b42:	f7fe f861 	bl	8005c08 <HAL_RCC_GetSysClockFreq>
 8007b46:	61f8      	str	r0, [r7, #28]
        break;
 8007b48:	e009      	b.n	8007b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4e:	61fb      	str	r3, [r7, #28]
        break;
 8007b50:	e005      	b.n	8007b5e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d019      	beq.n	8007b98 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	085a      	lsrs	r2, r3, #1
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	441a      	add	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b0f      	cmp	r3, #15
 8007b7c:	d909      	bls.n	8007b92 <UART_SetConfig+0x432>
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b84:	d205      	bcs.n	8007b92 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60da      	str	r2, [r3, #12]
 8007b90:	e002      	b.n	8007b98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007ba4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3728      	adds	r7, #40	; 0x28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bb2:	bf00      	nop
 8007bb4:	00f42400 	.word	0x00f42400

08007bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01a      	beq.n	8007cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb6:	d10a      	bne.n	8007cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	605a      	str	r2, [r3, #4]
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b098      	sub	sp, #96	; 0x60
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d0c:	f7fa fc14 	bl	8002538 <HAL_GetTick>
 8007d10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d12e      	bne.n	8007d7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f88c 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d021      	beq.n	8007d7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d58:	647b      	str	r3, [r7, #68]	; 0x44
 8007d5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e6      	bne.n	8007d3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e062      	b.n	8007e44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d149      	bne.n	8007e20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d94:	2200      	movs	r2, #0
 8007d96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f856 	bl	8007e4c <UART_WaitOnFlagUntilTimeout>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d03c      	beq.n	8007e20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	623b      	str	r3, [r7, #32]
   return(result);
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8007dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e6      	bne.n	8007da6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3308      	adds	r3, #8
 8007dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0301 	bic.w	r3, r3, #1
 8007dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007df8:	61fa      	str	r2, [r7, #28]
 8007dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfc:	69b9      	ldr	r1, [r7, #24]
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	e841 2300 	strex	r3, r2, [r1]
 8007e04:	617b      	str	r3, [r7, #20]
   return(result);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e5      	bne.n	8007dd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e011      	b.n	8007e44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3758      	adds	r7, #88	; 0x58
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e5c:	e04f      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d04b      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e66:	f7fa fb67 	bl	8002538 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d302      	bcc.n	8007e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e04e      	b.n	8007f1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d037      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b80      	cmp	r3, #128	; 0x80
 8007e92:	d034      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b40      	cmp	r3, #64	; 0x40
 8007e98:	d031      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	f003 0308 	and.w	r3, r3, #8
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d110      	bne.n	8007eca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2208      	movs	r2, #8
 8007eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f838 	bl	8007f26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2208      	movs	r2, #8
 8007eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e029      	b.n	8007f1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ed8:	d111      	bne.n	8007efe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 f81e 	bl	8007f26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e00f      	b.n	8007f1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69da      	ldr	r2, [r3, #28]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4013      	ands	r3, r2
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	bf0c      	ite	eq
 8007f0e:	2301      	moveq	r3, #1
 8007f10:	2300      	movne	r3, #0
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d0a0      	beq.n	8007e5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b095      	sub	sp, #84	; 0x54
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e6      	bne.n	8007f2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3308      	adds	r3, #8
 8007f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f023 0301 	bic.w	r3, r3, #1
 8007f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e5      	bne.n	8007f60 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d118      	bne.n	8007fce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f023 0310 	bic.w	r3, r3, #16
 8007fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fba:	61bb      	str	r3, [r7, #24]
 8007fbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6979      	ldr	r1, [r7, #20]
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e6      	bne.n	8007f9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007fe2:	bf00      	nop
 8007fe4:	3754      	adds	r7, #84	; 0x54
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <__cvt>:
 8007fee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff2:	ec55 4b10 	vmov	r4, r5, d0
 8007ff6:	2d00      	cmp	r5, #0
 8007ff8:	460e      	mov	r6, r1
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	bfbb      	ittet	lt
 8008000:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008004:	461d      	movlt	r5, r3
 8008006:	2300      	movge	r3, #0
 8008008:	232d      	movlt	r3, #45	; 0x2d
 800800a:	700b      	strb	r3, [r1, #0]
 800800c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800800e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008012:	4691      	mov	r9, r2
 8008014:	f023 0820 	bic.w	r8, r3, #32
 8008018:	bfbc      	itt	lt
 800801a:	4622      	movlt	r2, r4
 800801c:	4614      	movlt	r4, r2
 800801e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008022:	d005      	beq.n	8008030 <__cvt+0x42>
 8008024:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008028:	d100      	bne.n	800802c <__cvt+0x3e>
 800802a:	3601      	adds	r6, #1
 800802c:	2102      	movs	r1, #2
 800802e:	e000      	b.n	8008032 <__cvt+0x44>
 8008030:	2103      	movs	r1, #3
 8008032:	ab03      	add	r3, sp, #12
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	ab02      	add	r3, sp, #8
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	ec45 4b10 	vmov	d0, r4, r5
 800803e:	4653      	mov	r3, sl
 8008040:	4632      	mov	r2, r6
 8008042:	f001 f891 	bl	8009168 <_dtoa_r>
 8008046:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800804a:	4607      	mov	r7, r0
 800804c:	d102      	bne.n	8008054 <__cvt+0x66>
 800804e:	f019 0f01 	tst.w	r9, #1
 8008052:	d022      	beq.n	800809a <__cvt+0xac>
 8008054:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008058:	eb07 0906 	add.w	r9, r7, r6
 800805c:	d110      	bne.n	8008080 <__cvt+0x92>
 800805e:	783b      	ldrb	r3, [r7, #0]
 8008060:	2b30      	cmp	r3, #48	; 0x30
 8008062:	d10a      	bne.n	800807a <__cvt+0x8c>
 8008064:	2200      	movs	r2, #0
 8008066:	2300      	movs	r3, #0
 8008068:	4620      	mov	r0, r4
 800806a:	4629      	mov	r1, r5
 800806c:	f7f8 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008070:	b918      	cbnz	r0, 800807a <__cvt+0x8c>
 8008072:	f1c6 0601 	rsb	r6, r6, #1
 8008076:	f8ca 6000 	str.w	r6, [sl]
 800807a:	f8da 3000 	ldr.w	r3, [sl]
 800807e:	4499      	add	r9, r3
 8008080:	2200      	movs	r2, #0
 8008082:	2300      	movs	r3, #0
 8008084:	4620      	mov	r0, r4
 8008086:	4629      	mov	r1, r5
 8008088:	f7f8 fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800808c:	b108      	cbz	r0, 8008092 <__cvt+0xa4>
 800808e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008092:	2230      	movs	r2, #48	; 0x30
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	454b      	cmp	r3, r9
 8008098:	d307      	bcc.n	80080aa <__cvt+0xbc>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800809e:	1bdb      	subs	r3, r3, r7
 80080a0:	4638      	mov	r0, r7
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	b004      	add	sp, #16
 80080a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080aa:	1c59      	adds	r1, r3, #1
 80080ac:	9103      	str	r1, [sp, #12]
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	e7f0      	b.n	8008094 <__cvt+0xa6>

080080b2 <__exponent>:
 80080b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080b4:	4603      	mov	r3, r0
 80080b6:	2900      	cmp	r1, #0
 80080b8:	bfb8      	it	lt
 80080ba:	4249      	neglt	r1, r1
 80080bc:	f803 2b02 	strb.w	r2, [r3], #2
 80080c0:	bfb4      	ite	lt
 80080c2:	222d      	movlt	r2, #45	; 0x2d
 80080c4:	222b      	movge	r2, #43	; 0x2b
 80080c6:	2909      	cmp	r1, #9
 80080c8:	7042      	strb	r2, [r0, #1]
 80080ca:	dd2a      	ble.n	8008122 <__exponent+0x70>
 80080cc:	f10d 0207 	add.w	r2, sp, #7
 80080d0:	4617      	mov	r7, r2
 80080d2:	260a      	movs	r6, #10
 80080d4:	4694      	mov	ip, r2
 80080d6:	fb91 f5f6 	sdiv	r5, r1, r6
 80080da:	fb06 1415 	mls	r4, r6, r5, r1
 80080de:	3430      	adds	r4, #48	; 0x30
 80080e0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80080e4:	460c      	mov	r4, r1
 80080e6:	2c63      	cmp	r4, #99	; 0x63
 80080e8:	f102 32ff 	add.w	r2, r2, #4294967295
 80080ec:	4629      	mov	r1, r5
 80080ee:	dcf1      	bgt.n	80080d4 <__exponent+0x22>
 80080f0:	3130      	adds	r1, #48	; 0x30
 80080f2:	f1ac 0402 	sub.w	r4, ip, #2
 80080f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80080fa:	1c41      	adds	r1, r0, #1
 80080fc:	4622      	mov	r2, r4
 80080fe:	42ba      	cmp	r2, r7
 8008100:	d30a      	bcc.n	8008118 <__exponent+0x66>
 8008102:	f10d 0209 	add.w	r2, sp, #9
 8008106:	eba2 020c 	sub.w	r2, r2, ip
 800810a:	42bc      	cmp	r4, r7
 800810c:	bf88      	it	hi
 800810e:	2200      	movhi	r2, #0
 8008110:	4413      	add	r3, r2
 8008112:	1a18      	subs	r0, r3, r0
 8008114:	b003      	add	sp, #12
 8008116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008118:	f812 5b01 	ldrb.w	r5, [r2], #1
 800811c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008120:	e7ed      	b.n	80080fe <__exponent+0x4c>
 8008122:	2330      	movs	r3, #48	; 0x30
 8008124:	3130      	adds	r1, #48	; 0x30
 8008126:	7083      	strb	r3, [r0, #2]
 8008128:	70c1      	strb	r1, [r0, #3]
 800812a:	1d03      	adds	r3, r0, #4
 800812c:	e7f1      	b.n	8008112 <__exponent+0x60>
	...

08008130 <_printf_float>:
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	ed2d 8b02 	vpush	{d8}
 8008138:	b08d      	sub	sp, #52	; 0x34
 800813a:	460c      	mov	r4, r1
 800813c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008140:	4616      	mov	r6, r2
 8008142:	461f      	mov	r7, r3
 8008144:	4605      	mov	r5, r0
 8008146:	f000 ff09 	bl	8008f5c <_localeconv_r>
 800814a:	f8d0 a000 	ldr.w	sl, [r0]
 800814e:	4650      	mov	r0, sl
 8008150:	f7f8 f88e 	bl	8000270 <strlen>
 8008154:	2300      	movs	r3, #0
 8008156:	930a      	str	r3, [sp, #40]	; 0x28
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	9305      	str	r3, [sp, #20]
 800815c:	f8d8 3000 	ldr.w	r3, [r8]
 8008160:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008164:	3307      	adds	r3, #7
 8008166:	f023 0307 	bic.w	r3, r3, #7
 800816a:	f103 0208 	add.w	r2, r3, #8
 800816e:	f8c8 2000 	str.w	r2, [r8]
 8008172:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008176:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800817a:	9307      	str	r3, [sp, #28]
 800817c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008180:	ee08 0a10 	vmov	s16, r0
 8008184:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800818c:	4b9e      	ldr	r3, [pc, #632]	; (8008408 <_printf_float+0x2d8>)
 800818e:	f04f 32ff 	mov.w	r2, #4294967295
 8008192:	f7f8 fccb 	bl	8000b2c <__aeabi_dcmpun>
 8008196:	bb88      	cbnz	r0, 80081fc <_printf_float+0xcc>
 8008198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800819c:	4b9a      	ldr	r3, [pc, #616]	; (8008408 <_printf_float+0x2d8>)
 800819e:	f04f 32ff 	mov.w	r2, #4294967295
 80081a2:	f7f8 fca5 	bl	8000af0 <__aeabi_dcmple>
 80081a6:	bb48      	cbnz	r0, 80081fc <_printf_float+0xcc>
 80081a8:	2200      	movs	r2, #0
 80081aa:	2300      	movs	r3, #0
 80081ac:	4640      	mov	r0, r8
 80081ae:	4649      	mov	r1, r9
 80081b0:	f7f8 fc94 	bl	8000adc <__aeabi_dcmplt>
 80081b4:	b110      	cbz	r0, 80081bc <_printf_float+0x8c>
 80081b6:	232d      	movs	r3, #45	; 0x2d
 80081b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081bc:	4a93      	ldr	r2, [pc, #588]	; (800840c <_printf_float+0x2dc>)
 80081be:	4b94      	ldr	r3, [pc, #592]	; (8008410 <_printf_float+0x2e0>)
 80081c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081c4:	bf94      	ite	ls
 80081c6:	4690      	movls	r8, r2
 80081c8:	4698      	movhi	r8, r3
 80081ca:	2303      	movs	r3, #3
 80081cc:	6123      	str	r3, [r4, #16]
 80081ce:	9b05      	ldr	r3, [sp, #20]
 80081d0:	f023 0304 	bic.w	r3, r3, #4
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	f04f 0900 	mov.w	r9, #0
 80081da:	9700      	str	r7, [sp, #0]
 80081dc:	4633      	mov	r3, r6
 80081de:	aa0b      	add	r2, sp, #44	; 0x2c
 80081e0:	4621      	mov	r1, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 f9da 	bl	800859c <_printf_common>
 80081e8:	3001      	adds	r0, #1
 80081ea:	f040 8090 	bne.w	800830e <_printf_float+0x1de>
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	b00d      	add	sp, #52	; 0x34
 80081f4:	ecbd 8b02 	vpop	{d8}
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	4642      	mov	r2, r8
 80081fe:	464b      	mov	r3, r9
 8008200:	4640      	mov	r0, r8
 8008202:	4649      	mov	r1, r9
 8008204:	f7f8 fc92 	bl	8000b2c <__aeabi_dcmpun>
 8008208:	b140      	cbz	r0, 800821c <_printf_float+0xec>
 800820a:	464b      	mov	r3, r9
 800820c:	2b00      	cmp	r3, #0
 800820e:	bfbc      	itt	lt
 8008210:	232d      	movlt	r3, #45	; 0x2d
 8008212:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008216:	4a7f      	ldr	r2, [pc, #508]	; (8008414 <_printf_float+0x2e4>)
 8008218:	4b7f      	ldr	r3, [pc, #508]	; (8008418 <_printf_float+0x2e8>)
 800821a:	e7d1      	b.n	80081c0 <_printf_float+0x90>
 800821c:	6863      	ldr	r3, [r4, #4]
 800821e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008222:	9206      	str	r2, [sp, #24]
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	d13f      	bne.n	80082a8 <_printf_float+0x178>
 8008228:	2306      	movs	r3, #6
 800822a:	6063      	str	r3, [r4, #4]
 800822c:	9b05      	ldr	r3, [sp, #20]
 800822e:	6861      	ldr	r1, [r4, #4]
 8008230:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008234:	2300      	movs	r3, #0
 8008236:	9303      	str	r3, [sp, #12]
 8008238:	ab0a      	add	r3, sp, #40	; 0x28
 800823a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800823e:	ab09      	add	r3, sp, #36	; 0x24
 8008240:	ec49 8b10 	vmov	d0, r8, r9
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	6022      	str	r2, [r4, #0]
 8008248:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800824c:	4628      	mov	r0, r5
 800824e:	f7ff fece 	bl	8007fee <__cvt>
 8008252:	9b06      	ldr	r3, [sp, #24]
 8008254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008256:	2b47      	cmp	r3, #71	; 0x47
 8008258:	4680      	mov	r8, r0
 800825a:	d108      	bne.n	800826e <_printf_float+0x13e>
 800825c:	1cc8      	adds	r0, r1, #3
 800825e:	db02      	blt.n	8008266 <_printf_float+0x136>
 8008260:	6863      	ldr	r3, [r4, #4]
 8008262:	4299      	cmp	r1, r3
 8008264:	dd41      	ble.n	80082ea <_printf_float+0x1ba>
 8008266:	f1ab 0302 	sub.w	r3, fp, #2
 800826a:	fa5f fb83 	uxtb.w	fp, r3
 800826e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008272:	d820      	bhi.n	80082b6 <_printf_float+0x186>
 8008274:	3901      	subs	r1, #1
 8008276:	465a      	mov	r2, fp
 8008278:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800827c:	9109      	str	r1, [sp, #36]	; 0x24
 800827e:	f7ff ff18 	bl	80080b2 <__exponent>
 8008282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008284:	1813      	adds	r3, r2, r0
 8008286:	2a01      	cmp	r2, #1
 8008288:	4681      	mov	r9, r0
 800828a:	6123      	str	r3, [r4, #16]
 800828c:	dc02      	bgt.n	8008294 <_printf_float+0x164>
 800828e:	6822      	ldr	r2, [r4, #0]
 8008290:	07d2      	lsls	r2, r2, #31
 8008292:	d501      	bpl.n	8008298 <_printf_float+0x168>
 8008294:	3301      	adds	r3, #1
 8008296:	6123      	str	r3, [r4, #16]
 8008298:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800829c:	2b00      	cmp	r3, #0
 800829e:	d09c      	beq.n	80081da <_printf_float+0xaa>
 80082a0:	232d      	movs	r3, #45	; 0x2d
 80082a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a6:	e798      	b.n	80081da <_printf_float+0xaa>
 80082a8:	9a06      	ldr	r2, [sp, #24]
 80082aa:	2a47      	cmp	r2, #71	; 0x47
 80082ac:	d1be      	bne.n	800822c <_printf_float+0xfc>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1bc      	bne.n	800822c <_printf_float+0xfc>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e7b9      	b.n	800822a <_printf_float+0xfa>
 80082b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082ba:	d118      	bne.n	80082ee <_printf_float+0x1be>
 80082bc:	2900      	cmp	r1, #0
 80082be:	6863      	ldr	r3, [r4, #4]
 80082c0:	dd0b      	ble.n	80082da <_printf_float+0x1aa>
 80082c2:	6121      	str	r1, [r4, #16]
 80082c4:	b913      	cbnz	r3, 80082cc <_printf_float+0x19c>
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	07d0      	lsls	r0, r2, #31
 80082ca:	d502      	bpl.n	80082d2 <_printf_float+0x1a2>
 80082cc:	3301      	adds	r3, #1
 80082ce:	440b      	add	r3, r1
 80082d0:	6123      	str	r3, [r4, #16]
 80082d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80082d4:	f04f 0900 	mov.w	r9, #0
 80082d8:	e7de      	b.n	8008298 <_printf_float+0x168>
 80082da:	b913      	cbnz	r3, 80082e2 <_printf_float+0x1b2>
 80082dc:	6822      	ldr	r2, [r4, #0]
 80082de:	07d2      	lsls	r2, r2, #31
 80082e0:	d501      	bpl.n	80082e6 <_printf_float+0x1b6>
 80082e2:	3302      	adds	r3, #2
 80082e4:	e7f4      	b.n	80082d0 <_printf_float+0x1a0>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e7f2      	b.n	80082d0 <_printf_float+0x1a0>
 80082ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f0:	4299      	cmp	r1, r3
 80082f2:	db05      	blt.n	8008300 <_printf_float+0x1d0>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	6121      	str	r1, [r4, #16]
 80082f8:	07d8      	lsls	r0, r3, #31
 80082fa:	d5ea      	bpl.n	80082d2 <_printf_float+0x1a2>
 80082fc:	1c4b      	adds	r3, r1, #1
 80082fe:	e7e7      	b.n	80082d0 <_printf_float+0x1a0>
 8008300:	2900      	cmp	r1, #0
 8008302:	bfd4      	ite	le
 8008304:	f1c1 0202 	rsble	r2, r1, #2
 8008308:	2201      	movgt	r2, #1
 800830a:	4413      	add	r3, r2
 800830c:	e7e0      	b.n	80082d0 <_printf_float+0x1a0>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	055a      	lsls	r2, r3, #21
 8008312:	d407      	bmi.n	8008324 <_printf_float+0x1f4>
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	4642      	mov	r2, r8
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	d12c      	bne.n	800837c <_printf_float+0x24c>
 8008322:	e764      	b.n	80081ee <_printf_float+0xbe>
 8008324:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008328:	f240 80e0 	bls.w	80084ec <_printf_float+0x3bc>
 800832c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008330:	2200      	movs	r2, #0
 8008332:	2300      	movs	r3, #0
 8008334:	f7f8 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008338:	2800      	cmp	r0, #0
 800833a:	d034      	beq.n	80083a6 <_printf_float+0x276>
 800833c:	4a37      	ldr	r2, [pc, #220]	; (800841c <_printf_float+0x2ec>)
 800833e:	2301      	movs	r3, #1
 8008340:	4631      	mov	r1, r6
 8008342:	4628      	mov	r0, r5
 8008344:	47b8      	blx	r7
 8008346:	3001      	adds	r0, #1
 8008348:	f43f af51 	beq.w	80081ee <_printf_float+0xbe>
 800834c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008350:	429a      	cmp	r2, r3
 8008352:	db02      	blt.n	800835a <_printf_float+0x22a>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	07d8      	lsls	r0, r3, #31
 8008358:	d510      	bpl.n	800837c <_printf_float+0x24c>
 800835a:	ee18 3a10 	vmov	r3, s16
 800835e:	4652      	mov	r2, sl
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	47b8      	blx	r7
 8008366:	3001      	adds	r0, #1
 8008368:	f43f af41 	beq.w	80081ee <_printf_float+0xbe>
 800836c:	f04f 0800 	mov.w	r8, #0
 8008370:	f104 091a 	add.w	r9, r4, #26
 8008374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008376:	3b01      	subs	r3, #1
 8008378:	4543      	cmp	r3, r8
 800837a:	dc09      	bgt.n	8008390 <_printf_float+0x260>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	079b      	lsls	r3, r3, #30
 8008380:	f100 8107 	bmi.w	8008592 <_printf_float+0x462>
 8008384:	68e0      	ldr	r0, [r4, #12]
 8008386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008388:	4298      	cmp	r0, r3
 800838a:	bfb8      	it	lt
 800838c:	4618      	movlt	r0, r3
 800838e:	e730      	b.n	80081f2 <_printf_float+0xc2>
 8008390:	2301      	movs	r3, #1
 8008392:	464a      	mov	r2, r9
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f43f af27 	beq.w	80081ee <_printf_float+0xbe>
 80083a0:	f108 0801 	add.w	r8, r8, #1
 80083a4:	e7e6      	b.n	8008374 <_printf_float+0x244>
 80083a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dc39      	bgt.n	8008420 <_printf_float+0x2f0>
 80083ac:	4a1b      	ldr	r2, [pc, #108]	; (800841c <_printf_float+0x2ec>)
 80083ae:	2301      	movs	r3, #1
 80083b0:	4631      	mov	r1, r6
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	f43f af19 	beq.w	80081ee <_printf_float+0xbe>
 80083bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80083c0:	4313      	orrs	r3, r2
 80083c2:	d102      	bne.n	80083ca <_printf_float+0x29a>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	07d9      	lsls	r1, r3, #31
 80083c8:	d5d8      	bpl.n	800837c <_printf_float+0x24c>
 80083ca:	ee18 3a10 	vmov	r3, s16
 80083ce:	4652      	mov	r2, sl
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	f43f af09 	beq.w	80081ee <_printf_float+0xbe>
 80083dc:	f04f 0900 	mov.w	r9, #0
 80083e0:	f104 0a1a 	add.w	sl, r4, #26
 80083e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e6:	425b      	negs	r3, r3
 80083e8:	454b      	cmp	r3, r9
 80083ea:	dc01      	bgt.n	80083f0 <_printf_float+0x2c0>
 80083ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ee:	e792      	b.n	8008316 <_printf_float+0x1e6>
 80083f0:	2301      	movs	r3, #1
 80083f2:	4652      	mov	r2, sl
 80083f4:	4631      	mov	r1, r6
 80083f6:	4628      	mov	r0, r5
 80083f8:	47b8      	blx	r7
 80083fa:	3001      	adds	r0, #1
 80083fc:	f43f aef7 	beq.w	80081ee <_printf_float+0xbe>
 8008400:	f109 0901 	add.w	r9, r9, #1
 8008404:	e7ee      	b.n	80083e4 <_printf_float+0x2b4>
 8008406:	bf00      	nop
 8008408:	7fefffff 	.word	0x7fefffff
 800840c:	0800c854 	.word	0x0800c854
 8008410:	0800c858 	.word	0x0800c858
 8008414:	0800c85c 	.word	0x0800c85c
 8008418:	0800c860 	.word	0x0800c860
 800841c:	0800c864 	.word	0x0800c864
 8008420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008424:	429a      	cmp	r2, r3
 8008426:	bfa8      	it	ge
 8008428:	461a      	movge	r2, r3
 800842a:	2a00      	cmp	r2, #0
 800842c:	4691      	mov	r9, r2
 800842e:	dc37      	bgt.n	80084a0 <_printf_float+0x370>
 8008430:	f04f 0b00 	mov.w	fp, #0
 8008434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008438:	f104 021a 	add.w	r2, r4, #26
 800843c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800843e:	9305      	str	r3, [sp, #20]
 8008440:	eba3 0309 	sub.w	r3, r3, r9
 8008444:	455b      	cmp	r3, fp
 8008446:	dc33      	bgt.n	80084b0 <_printf_float+0x380>
 8008448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800844c:	429a      	cmp	r2, r3
 800844e:	db3b      	blt.n	80084c8 <_printf_float+0x398>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	07da      	lsls	r2, r3, #31
 8008454:	d438      	bmi.n	80084c8 <_printf_float+0x398>
 8008456:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800845a:	eba2 0903 	sub.w	r9, r2, r3
 800845e:	9b05      	ldr	r3, [sp, #20]
 8008460:	1ad2      	subs	r2, r2, r3
 8008462:	4591      	cmp	r9, r2
 8008464:	bfa8      	it	ge
 8008466:	4691      	movge	r9, r2
 8008468:	f1b9 0f00 	cmp.w	r9, #0
 800846c:	dc35      	bgt.n	80084da <_printf_float+0x3aa>
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008476:	f104 0a1a 	add.w	sl, r4, #26
 800847a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800847e:	1a9b      	subs	r3, r3, r2
 8008480:	eba3 0309 	sub.w	r3, r3, r9
 8008484:	4543      	cmp	r3, r8
 8008486:	f77f af79 	ble.w	800837c <_printf_float+0x24c>
 800848a:	2301      	movs	r3, #1
 800848c:	4652      	mov	r2, sl
 800848e:	4631      	mov	r1, r6
 8008490:	4628      	mov	r0, r5
 8008492:	47b8      	blx	r7
 8008494:	3001      	adds	r0, #1
 8008496:	f43f aeaa 	beq.w	80081ee <_printf_float+0xbe>
 800849a:	f108 0801 	add.w	r8, r8, #1
 800849e:	e7ec      	b.n	800847a <_printf_float+0x34a>
 80084a0:	4613      	mov	r3, r2
 80084a2:	4631      	mov	r1, r6
 80084a4:	4642      	mov	r2, r8
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	d1c0      	bne.n	8008430 <_printf_float+0x300>
 80084ae:	e69e      	b.n	80081ee <_printf_float+0xbe>
 80084b0:	2301      	movs	r3, #1
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	9205      	str	r2, [sp, #20]
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f ae97 	beq.w	80081ee <_printf_float+0xbe>
 80084c0:	9a05      	ldr	r2, [sp, #20]
 80084c2:	f10b 0b01 	add.w	fp, fp, #1
 80084c6:	e7b9      	b.n	800843c <_printf_float+0x30c>
 80084c8:	ee18 3a10 	vmov	r3, s16
 80084cc:	4652      	mov	r2, sl
 80084ce:	4631      	mov	r1, r6
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	d1be      	bne.n	8008456 <_printf_float+0x326>
 80084d8:	e689      	b.n	80081ee <_printf_float+0xbe>
 80084da:	9a05      	ldr	r2, [sp, #20]
 80084dc:	464b      	mov	r3, r9
 80084de:	4442      	add	r2, r8
 80084e0:	4631      	mov	r1, r6
 80084e2:	4628      	mov	r0, r5
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	d1c1      	bne.n	800846e <_printf_float+0x33e>
 80084ea:	e680      	b.n	80081ee <_printf_float+0xbe>
 80084ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ee:	2a01      	cmp	r2, #1
 80084f0:	dc01      	bgt.n	80084f6 <_printf_float+0x3c6>
 80084f2:	07db      	lsls	r3, r3, #31
 80084f4:	d53a      	bpl.n	800856c <_printf_float+0x43c>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4642      	mov	r2, r8
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	f43f ae74 	beq.w	80081ee <_printf_float+0xbe>
 8008506:	ee18 3a10 	vmov	r3, s16
 800850a:	4652      	mov	r2, sl
 800850c:	4631      	mov	r1, r6
 800850e:	4628      	mov	r0, r5
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	f43f ae6b 	beq.w	80081ee <_printf_float+0xbe>
 8008518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800851c:	2200      	movs	r2, #0
 800851e:	2300      	movs	r3, #0
 8008520:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008524:	f7f8 fad0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008528:	b9d8      	cbnz	r0, 8008562 <_printf_float+0x432>
 800852a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800852e:	f108 0201 	add.w	r2, r8, #1
 8008532:	4631      	mov	r1, r6
 8008534:	4628      	mov	r0, r5
 8008536:	47b8      	blx	r7
 8008538:	3001      	adds	r0, #1
 800853a:	d10e      	bne.n	800855a <_printf_float+0x42a>
 800853c:	e657      	b.n	80081ee <_printf_float+0xbe>
 800853e:	2301      	movs	r3, #1
 8008540:	4652      	mov	r2, sl
 8008542:	4631      	mov	r1, r6
 8008544:	4628      	mov	r0, r5
 8008546:	47b8      	blx	r7
 8008548:	3001      	adds	r0, #1
 800854a:	f43f ae50 	beq.w	80081ee <_printf_float+0xbe>
 800854e:	f108 0801 	add.w	r8, r8, #1
 8008552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008554:	3b01      	subs	r3, #1
 8008556:	4543      	cmp	r3, r8
 8008558:	dcf1      	bgt.n	800853e <_printf_float+0x40e>
 800855a:	464b      	mov	r3, r9
 800855c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008560:	e6da      	b.n	8008318 <_printf_float+0x1e8>
 8008562:	f04f 0800 	mov.w	r8, #0
 8008566:	f104 0a1a 	add.w	sl, r4, #26
 800856a:	e7f2      	b.n	8008552 <_printf_float+0x422>
 800856c:	2301      	movs	r3, #1
 800856e:	4642      	mov	r2, r8
 8008570:	e7df      	b.n	8008532 <_printf_float+0x402>
 8008572:	2301      	movs	r3, #1
 8008574:	464a      	mov	r2, r9
 8008576:	4631      	mov	r1, r6
 8008578:	4628      	mov	r0, r5
 800857a:	47b8      	blx	r7
 800857c:	3001      	adds	r0, #1
 800857e:	f43f ae36 	beq.w	80081ee <_printf_float+0xbe>
 8008582:	f108 0801 	add.w	r8, r8, #1
 8008586:	68e3      	ldr	r3, [r4, #12]
 8008588:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800858a:	1a5b      	subs	r3, r3, r1
 800858c:	4543      	cmp	r3, r8
 800858e:	dcf0      	bgt.n	8008572 <_printf_float+0x442>
 8008590:	e6f8      	b.n	8008384 <_printf_float+0x254>
 8008592:	f04f 0800 	mov.w	r8, #0
 8008596:	f104 0919 	add.w	r9, r4, #25
 800859a:	e7f4      	b.n	8008586 <_printf_float+0x456>

0800859c <_printf_common>:
 800859c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	4616      	mov	r6, r2
 80085a2:	4699      	mov	r9, r3
 80085a4:	688a      	ldr	r2, [r1, #8]
 80085a6:	690b      	ldr	r3, [r1, #16]
 80085a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085ac:	4293      	cmp	r3, r2
 80085ae:	bfb8      	it	lt
 80085b0:	4613      	movlt	r3, r2
 80085b2:	6033      	str	r3, [r6, #0]
 80085b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085b8:	4607      	mov	r7, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	b10a      	cbz	r2, 80085c2 <_printf_common+0x26>
 80085be:	3301      	adds	r3, #1
 80085c0:	6033      	str	r3, [r6, #0]
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	0699      	lsls	r1, r3, #26
 80085c6:	bf42      	ittt	mi
 80085c8:	6833      	ldrmi	r3, [r6, #0]
 80085ca:	3302      	addmi	r3, #2
 80085cc:	6033      	strmi	r3, [r6, #0]
 80085ce:	6825      	ldr	r5, [r4, #0]
 80085d0:	f015 0506 	ands.w	r5, r5, #6
 80085d4:	d106      	bne.n	80085e4 <_printf_common+0x48>
 80085d6:	f104 0a19 	add.w	sl, r4, #25
 80085da:	68e3      	ldr	r3, [r4, #12]
 80085dc:	6832      	ldr	r2, [r6, #0]
 80085de:	1a9b      	subs	r3, r3, r2
 80085e0:	42ab      	cmp	r3, r5
 80085e2:	dc26      	bgt.n	8008632 <_printf_common+0x96>
 80085e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085e8:	1e13      	subs	r3, r2, #0
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	bf18      	it	ne
 80085ee:	2301      	movne	r3, #1
 80085f0:	0692      	lsls	r2, r2, #26
 80085f2:	d42b      	bmi.n	800864c <_printf_common+0xb0>
 80085f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085f8:	4649      	mov	r1, r9
 80085fa:	4638      	mov	r0, r7
 80085fc:	47c0      	blx	r8
 80085fe:	3001      	adds	r0, #1
 8008600:	d01e      	beq.n	8008640 <_printf_common+0xa4>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	6922      	ldr	r2, [r4, #16]
 8008606:	f003 0306 	and.w	r3, r3, #6
 800860a:	2b04      	cmp	r3, #4
 800860c:	bf02      	ittt	eq
 800860e:	68e5      	ldreq	r5, [r4, #12]
 8008610:	6833      	ldreq	r3, [r6, #0]
 8008612:	1aed      	subeq	r5, r5, r3
 8008614:	68a3      	ldr	r3, [r4, #8]
 8008616:	bf0c      	ite	eq
 8008618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800861c:	2500      	movne	r5, #0
 800861e:	4293      	cmp	r3, r2
 8008620:	bfc4      	itt	gt
 8008622:	1a9b      	subgt	r3, r3, r2
 8008624:	18ed      	addgt	r5, r5, r3
 8008626:	2600      	movs	r6, #0
 8008628:	341a      	adds	r4, #26
 800862a:	42b5      	cmp	r5, r6
 800862c:	d11a      	bne.n	8008664 <_printf_common+0xc8>
 800862e:	2000      	movs	r0, #0
 8008630:	e008      	b.n	8008644 <_printf_common+0xa8>
 8008632:	2301      	movs	r3, #1
 8008634:	4652      	mov	r2, sl
 8008636:	4649      	mov	r1, r9
 8008638:	4638      	mov	r0, r7
 800863a:	47c0      	blx	r8
 800863c:	3001      	adds	r0, #1
 800863e:	d103      	bne.n	8008648 <_printf_common+0xac>
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008648:	3501      	adds	r5, #1
 800864a:	e7c6      	b.n	80085da <_printf_common+0x3e>
 800864c:	18e1      	adds	r1, r4, r3
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	2030      	movs	r0, #48	; 0x30
 8008652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008656:	4422      	add	r2, r4
 8008658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800865c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008660:	3302      	adds	r3, #2
 8008662:	e7c7      	b.n	80085f4 <_printf_common+0x58>
 8008664:	2301      	movs	r3, #1
 8008666:	4622      	mov	r2, r4
 8008668:	4649      	mov	r1, r9
 800866a:	4638      	mov	r0, r7
 800866c:	47c0      	blx	r8
 800866e:	3001      	adds	r0, #1
 8008670:	d0e6      	beq.n	8008640 <_printf_common+0xa4>
 8008672:	3601      	adds	r6, #1
 8008674:	e7d9      	b.n	800862a <_printf_common+0x8e>
	...

08008678 <_printf_i>:
 8008678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800867c:	7e0f      	ldrb	r7, [r1, #24]
 800867e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008680:	2f78      	cmp	r7, #120	; 0x78
 8008682:	4691      	mov	r9, r2
 8008684:	4680      	mov	r8, r0
 8008686:	460c      	mov	r4, r1
 8008688:	469a      	mov	sl, r3
 800868a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800868e:	d807      	bhi.n	80086a0 <_printf_i+0x28>
 8008690:	2f62      	cmp	r7, #98	; 0x62
 8008692:	d80a      	bhi.n	80086aa <_printf_i+0x32>
 8008694:	2f00      	cmp	r7, #0
 8008696:	f000 80d4 	beq.w	8008842 <_printf_i+0x1ca>
 800869a:	2f58      	cmp	r7, #88	; 0x58
 800869c:	f000 80c0 	beq.w	8008820 <_printf_i+0x1a8>
 80086a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086a8:	e03a      	b.n	8008720 <_printf_i+0xa8>
 80086aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086ae:	2b15      	cmp	r3, #21
 80086b0:	d8f6      	bhi.n	80086a0 <_printf_i+0x28>
 80086b2:	a101      	add	r1, pc, #4	; (adr r1, 80086b8 <_printf_i+0x40>)
 80086b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086b8:	08008711 	.word	0x08008711
 80086bc:	08008725 	.word	0x08008725
 80086c0:	080086a1 	.word	0x080086a1
 80086c4:	080086a1 	.word	0x080086a1
 80086c8:	080086a1 	.word	0x080086a1
 80086cc:	080086a1 	.word	0x080086a1
 80086d0:	08008725 	.word	0x08008725
 80086d4:	080086a1 	.word	0x080086a1
 80086d8:	080086a1 	.word	0x080086a1
 80086dc:	080086a1 	.word	0x080086a1
 80086e0:	080086a1 	.word	0x080086a1
 80086e4:	08008829 	.word	0x08008829
 80086e8:	08008751 	.word	0x08008751
 80086ec:	080087e3 	.word	0x080087e3
 80086f0:	080086a1 	.word	0x080086a1
 80086f4:	080086a1 	.word	0x080086a1
 80086f8:	0800884b 	.word	0x0800884b
 80086fc:	080086a1 	.word	0x080086a1
 8008700:	08008751 	.word	0x08008751
 8008704:	080086a1 	.word	0x080086a1
 8008708:	080086a1 	.word	0x080086a1
 800870c:	080087eb 	.word	0x080087eb
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	1d1a      	adds	r2, r3, #4
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	602a      	str	r2, [r5, #0]
 8008718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800871c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008720:	2301      	movs	r3, #1
 8008722:	e09f      	b.n	8008864 <_printf_i+0x1ec>
 8008724:	6820      	ldr	r0, [r4, #0]
 8008726:	682b      	ldr	r3, [r5, #0]
 8008728:	0607      	lsls	r7, r0, #24
 800872a:	f103 0104 	add.w	r1, r3, #4
 800872e:	6029      	str	r1, [r5, #0]
 8008730:	d501      	bpl.n	8008736 <_printf_i+0xbe>
 8008732:	681e      	ldr	r6, [r3, #0]
 8008734:	e003      	b.n	800873e <_printf_i+0xc6>
 8008736:	0646      	lsls	r6, r0, #25
 8008738:	d5fb      	bpl.n	8008732 <_printf_i+0xba>
 800873a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800873e:	2e00      	cmp	r6, #0
 8008740:	da03      	bge.n	800874a <_printf_i+0xd2>
 8008742:	232d      	movs	r3, #45	; 0x2d
 8008744:	4276      	negs	r6, r6
 8008746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800874a:	485a      	ldr	r0, [pc, #360]	; (80088b4 <_printf_i+0x23c>)
 800874c:	230a      	movs	r3, #10
 800874e:	e012      	b.n	8008776 <_printf_i+0xfe>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	6820      	ldr	r0, [r4, #0]
 8008754:	1d19      	adds	r1, r3, #4
 8008756:	6029      	str	r1, [r5, #0]
 8008758:	0605      	lsls	r5, r0, #24
 800875a:	d501      	bpl.n	8008760 <_printf_i+0xe8>
 800875c:	681e      	ldr	r6, [r3, #0]
 800875e:	e002      	b.n	8008766 <_printf_i+0xee>
 8008760:	0641      	lsls	r1, r0, #25
 8008762:	d5fb      	bpl.n	800875c <_printf_i+0xe4>
 8008764:	881e      	ldrh	r6, [r3, #0]
 8008766:	4853      	ldr	r0, [pc, #332]	; (80088b4 <_printf_i+0x23c>)
 8008768:	2f6f      	cmp	r7, #111	; 0x6f
 800876a:	bf0c      	ite	eq
 800876c:	2308      	moveq	r3, #8
 800876e:	230a      	movne	r3, #10
 8008770:	2100      	movs	r1, #0
 8008772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008776:	6865      	ldr	r5, [r4, #4]
 8008778:	60a5      	str	r5, [r4, #8]
 800877a:	2d00      	cmp	r5, #0
 800877c:	bfa2      	ittt	ge
 800877e:	6821      	ldrge	r1, [r4, #0]
 8008780:	f021 0104 	bicge.w	r1, r1, #4
 8008784:	6021      	strge	r1, [r4, #0]
 8008786:	b90e      	cbnz	r6, 800878c <_printf_i+0x114>
 8008788:	2d00      	cmp	r5, #0
 800878a:	d04b      	beq.n	8008824 <_printf_i+0x1ac>
 800878c:	4615      	mov	r5, r2
 800878e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008792:	fb03 6711 	mls	r7, r3, r1, r6
 8008796:	5dc7      	ldrb	r7, [r0, r7]
 8008798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800879c:	4637      	mov	r7, r6
 800879e:	42bb      	cmp	r3, r7
 80087a0:	460e      	mov	r6, r1
 80087a2:	d9f4      	bls.n	800878e <_printf_i+0x116>
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d10b      	bne.n	80087c0 <_printf_i+0x148>
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	07de      	lsls	r6, r3, #31
 80087ac:	d508      	bpl.n	80087c0 <_printf_i+0x148>
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	6861      	ldr	r1, [r4, #4]
 80087b2:	4299      	cmp	r1, r3
 80087b4:	bfde      	ittt	le
 80087b6:	2330      	movle	r3, #48	; 0x30
 80087b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087c0:	1b52      	subs	r2, r2, r5
 80087c2:	6122      	str	r2, [r4, #16]
 80087c4:	f8cd a000 	str.w	sl, [sp]
 80087c8:	464b      	mov	r3, r9
 80087ca:	aa03      	add	r2, sp, #12
 80087cc:	4621      	mov	r1, r4
 80087ce:	4640      	mov	r0, r8
 80087d0:	f7ff fee4 	bl	800859c <_printf_common>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d14a      	bne.n	800886e <_printf_i+0x1f6>
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	b004      	add	sp, #16
 80087de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	f043 0320 	orr.w	r3, r3, #32
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	4833      	ldr	r0, [pc, #204]	; (80088b8 <_printf_i+0x240>)
 80087ec:	2778      	movs	r7, #120	; 0x78
 80087ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	6829      	ldr	r1, [r5, #0]
 80087f6:	061f      	lsls	r7, r3, #24
 80087f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80087fc:	d402      	bmi.n	8008804 <_printf_i+0x18c>
 80087fe:	065f      	lsls	r7, r3, #25
 8008800:	bf48      	it	mi
 8008802:	b2b6      	uxthmi	r6, r6
 8008804:	07df      	lsls	r7, r3, #31
 8008806:	bf48      	it	mi
 8008808:	f043 0320 	orrmi.w	r3, r3, #32
 800880c:	6029      	str	r1, [r5, #0]
 800880e:	bf48      	it	mi
 8008810:	6023      	strmi	r3, [r4, #0]
 8008812:	b91e      	cbnz	r6, 800881c <_printf_i+0x1a4>
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	f023 0320 	bic.w	r3, r3, #32
 800881a:	6023      	str	r3, [r4, #0]
 800881c:	2310      	movs	r3, #16
 800881e:	e7a7      	b.n	8008770 <_printf_i+0xf8>
 8008820:	4824      	ldr	r0, [pc, #144]	; (80088b4 <_printf_i+0x23c>)
 8008822:	e7e4      	b.n	80087ee <_printf_i+0x176>
 8008824:	4615      	mov	r5, r2
 8008826:	e7bd      	b.n	80087a4 <_printf_i+0x12c>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	6826      	ldr	r6, [r4, #0]
 800882c:	6961      	ldr	r1, [r4, #20]
 800882e:	1d18      	adds	r0, r3, #4
 8008830:	6028      	str	r0, [r5, #0]
 8008832:	0635      	lsls	r5, r6, #24
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	d501      	bpl.n	800883c <_printf_i+0x1c4>
 8008838:	6019      	str	r1, [r3, #0]
 800883a:	e002      	b.n	8008842 <_printf_i+0x1ca>
 800883c:	0670      	lsls	r0, r6, #25
 800883e:	d5fb      	bpl.n	8008838 <_printf_i+0x1c0>
 8008840:	8019      	strh	r1, [r3, #0]
 8008842:	2300      	movs	r3, #0
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	4615      	mov	r5, r2
 8008848:	e7bc      	b.n	80087c4 <_printf_i+0x14c>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	1d1a      	adds	r2, r3, #4
 800884e:	602a      	str	r2, [r5, #0]
 8008850:	681d      	ldr	r5, [r3, #0]
 8008852:	6862      	ldr	r2, [r4, #4]
 8008854:	2100      	movs	r1, #0
 8008856:	4628      	mov	r0, r5
 8008858:	f7f7 fcba 	bl	80001d0 <memchr>
 800885c:	b108      	cbz	r0, 8008862 <_printf_i+0x1ea>
 800885e:	1b40      	subs	r0, r0, r5
 8008860:	6060      	str	r0, [r4, #4]
 8008862:	6863      	ldr	r3, [r4, #4]
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	2300      	movs	r3, #0
 8008868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886c:	e7aa      	b.n	80087c4 <_printf_i+0x14c>
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	462a      	mov	r2, r5
 8008872:	4649      	mov	r1, r9
 8008874:	4640      	mov	r0, r8
 8008876:	47d0      	blx	sl
 8008878:	3001      	adds	r0, #1
 800887a:	d0ad      	beq.n	80087d8 <_printf_i+0x160>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	079b      	lsls	r3, r3, #30
 8008880:	d413      	bmi.n	80088aa <_printf_i+0x232>
 8008882:	68e0      	ldr	r0, [r4, #12]
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	4298      	cmp	r0, r3
 8008888:	bfb8      	it	lt
 800888a:	4618      	movlt	r0, r3
 800888c:	e7a6      	b.n	80087dc <_printf_i+0x164>
 800888e:	2301      	movs	r3, #1
 8008890:	4632      	mov	r2, r6
 8008892:	4649      	mov	r1, r9
 8008894:	4640      	mov	r0, r8
 8008896:	47d0      	blx	sl
 8008898:	3001      	adds	r0, #1
 800889a:	d09d      	beq.n	80087d8 <_printf_i+0x160>
 800889c:	3501      	adds	r5, #1
 800889e:	68e3      	ldr	r3, [r4, #12]
 80088a0:	9903      	ldr	r1, [sp, #12]
 80088a2:	1a5b      	subs	r3, r3, r1
 80088a4:	42ab      	cmp	r3, r5
 80088a6:	dcf2      	bgt.n	800888e <_printf_i+0x216>
 80088a8:	e7eb      	b.n	8008882 <_printf_i+0x20a>
 80088aa:	2500      	movs	r5, #0
 80088ac:	f104 0619 	add.w	r6, r4, #25
 80088b0:	e7f5      	b.n	800889e <_printf_i+0x226>
 80088b2:	bf00      	nop
 80088b4:	0800c866 	.word	0x0800c866
 80088b8:	0800c877 	.word	0x0800c877

080088bc <_scanf_float>:
 80088bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	b087      	sub	sp, #28
 80088c2:	4617      	mov	r7, r2
 80088c4:	9303      	str	r3, [sp, #12]
 80088c6:	688b      	ldr	r3, [r1, #8]
 80088c8:	1e5a      	subs	r2, r3, #1
 80088ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80088ce:	bf83      	ittte	hi
 80088d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80088d4:	195b      	addhi	r3, r3, r5
 80088d6:	9302      	strhi	r3, [sp, #8]
 80088d8:	2300      	movls	r3, #0
 80088da:	bf86      	itte	hi
 80088dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80088e0:	608b      	strhi	r3, [r1, #8]
 80088e2:	9302      	strls	r3, [sp, #8]
 80088e4:	680b      	ldr	r3, [r1, #0]
 80088e6:	468b      	mov	fp, r1
 80088e8:	2500      	movs	r5, #0
 80088ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80088ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80088f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80088f6:	4680      	mov	r8, r0
 80088f8:	460c      	mov	r4, r1
 80088fa:	465e      	mov	r6, fp
 80088fc:	46aa      	mov	sl, r5
 80088fe:	46a9      	mov	r9, r5
 8008900:	9501      	str	r5, [sp, #4]
 8008902:	68a2      	ldr	r2, [r4, #8]
 8008904:	b152      	cbz	r2, 800891c <_scanf_float+0x60>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b4e      	cmp	r3, #78	; 0x4e
 800890c:	d864      	bhi.n	80089d8 <_scanf_float+0x11c>
 800890e:	2b40      	cmp	r3, #64	; 0x40
 8008910:	d83c      	bhi.n	800898c <_scanf_float+0xd0>
 8008912:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008916:	b2c8      	uxtb	r0, r1
 8008918:	280e      	cmp	r0, #14
 800891a:	d93a      	bls.n	8008992 <_scanf_float+0xd6>
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	d003      	beq.n	800892a <_scanf_float+0x6e>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800892e:	f1ba 0f01 	cmp.w	sl, #1
 8008932:	f200 8113 	bhi.w	8008b5c <_scanf_float+0x2a0>
 8008936:	455e      	cmp	r6, fp
 8008938:	f200 8105 	bhi.w	8008b46 <_scanf_float+0x28a>
 800893c:	2501      	movs	r5, #1
 800893e:	4628      	mov	r0, r5
 8008940:	b007      	add	sp, #28
 8008942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008946:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800894a:	2a0d      	cmp	r2, #13
 800894c:	d8e6      	bhi.n	800891c <_scanf_float+0x60>
 800894e:	a101      	add	r1, pc, #4	; (adr r1, 8008954 <_scanf_float+0x98>)
 8008950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008954:	08008a93 	.word	0x08008a93
 8008958:	0800891d 	.word	0x0800891d
 800895c:	0800891d 	.word	0x0800891d
 8008960:	0800891d 	.word	0x0800891d
 8008964:	08008af3 	.word	0x08008af3
 8008968:	08008acb 	.word	0x08008acb
 800896c:	0800891d 	.word	0x0800891d
 8008970:	0800891d 	.word	0x0800891d
 8008974:	08008aa1 	.word	0x08008aa1
 8008978:	0800891d 	.word	0x0800891d
 800897c:	0800891d 	.word	0x0800891d
 8008980:	0800891d 	.word	0x0800891d
 8008984:	0800891d 	.word	0x0800891d
 8008988:	08008a59 	.word	0x08008a59
 800898c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008990:	e7db      	b.n	800894a <_scanf_float+0x8e>
 8008992:	290e      	cmp	r1, #14
 8008994:	d8c2      	bhi.n	800891c <_scanf_float+0x60>
 8008996:	a001      	add	r0, pc, #4	; (adr r0, 800899c <_scanf_float+0xe0>)
 8008998:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800899c:	08008a4b 	.word	0x08008a4b
 80089a0:	0800891d 	.word	0x0800891d
 80089a4:	08008a4b 	.word	0x08008a4b
 80089a8:	08008adf 	.word	0x08008adf
 80089ac:	0800891d 	.word	0x0800891d
 80089b0:	080089f9 	.word	0x080089f9
 80089b4:	08008a35 	.word	0x08008a35
 80089b8:	08008a35 	.word	0x08008a35
 80089bc:	08008a35 	.word	0x08008a35
 80089c0:	08008a35 	.word	0x08008a35
 80089c4:	08008a35 	.word	0x08008a35
 80089c8:	08008a35 	.word	0x08008a35
 80089cc:	08008a35 	.word	0x08008a35
 80089d0:	08008a35 	.word	0x08008a35
 80089d4:	08008a35 	.word	0x08008a35
 80089d8:	2b6e      	cmp	r3, #110	; 0x6e
 80089da:	d809      	bhi.n	80089f0 <_scanf_float+0x134>
 80089dc:	2b60      	cmp	r3, #96	; 0x60
 80089de:	d8b2      	bhi.n	8008946 <_scanf_float+0x8a>
 80089e0:	2b54      	cmp	r3, #84	; 0x54
 80089e2:	d077      	beq.n	8008ad4 <_scanf_float+0x218>
 80089e4:	2b59      	cmp	r3, #89	; 0x59
 80089e6:	d199      	bne.n	800891c <_scanf_float+0x60>
 80089e8:	2d07      	cmp	r5, #7
 80089ea:	d197      	bne.n	800891c <_scanf_float+0x60>
 80089ec:	2508      	movs	r5, #8
 80089ee:	e029      	b.n	8008a44 <_scanf_float+0x188>
 80089f0:	2b74      	cmp	r3, #116	; 0x74
 80089f2:	d06f      	beq.n	8008ad4 <_scanf_float+0x218>
 80089f4:	2b79      	cmp	r3, #121	; 0x79
 80089f6:	e7f6      	b.n	80089e6 <_scanf_float+0x12a>
 80089f8:	6821      	ldr	r1, [r4, #0]
 80089fa:	05c8      	lsls	r0, r1, #23
 80089fc:	d51a      	bpl.n	8008a34 <_scanf_float+0x178>
 80089fe:	9b02      	ldr	r3, [sp, #8]
 8008a00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008a04:	6021      	str	r1, [r4, #0]
 8008a06:	f109 0901 	add.w	r9, r9, #1
 8008a0a:	b11b      	cbz	r3, 8008a14 <_scanf_float+0x158>
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	3201      	adds	r2, #1
 8008a10:	9302      	str	r3, [sp, #8]
 8008a12:	60a2      	str	r2, [r4, #8]
 8008a14:	68a3      	ldr	r3, [r4, #8]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	60a3      	str	r3, [r4, #8]
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	6123      	str	r3, [r4, #16]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	607b      	str	r3, [r7, #4]
 8008a28:	f340 8084 	ble.w	8008b34 <_scanf_float+0x278>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	e766      	b.n	8008902 <_scanf_float+0x46>
 8008a34:	eb1a 0f05 	cmn.w	sl, r5
 8008a38:	f47f af70 	bne.w	800891c <_scanf_float+0x60>
 8008a3c:	6822      	ldr	r2, [r4, #0]
 8008a3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008a42:	6022      	str	r2, [r4, #0]
 8008a44:	f806 3b01 	strb.w	r3, [r6], #1
 8008a48:	e7e4      	b.n	8008a14 <_scanf_float+0x158>
 8008a4a:	6822      	ldr	r2, [r4, #0]
 8008a4c:	0610      	lsls	r0, r2, #24
 8008a4e:	f57f af65 	bpl.w	800891c <_scanf_float+0x60>
 8008a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a56:	e7f4      	b.n	8008a42 <_scanf_float+0x186>
 8008a58:	f1ba 0f00 	cmp.w	sl, #0
 8008a5c:	d10e      	bne.n	8008a7c <_scanf_float+0x1c0>
 8008a5e:	f1b9 0f00 	cmp.w	r9, #0
 8008a62:	d10e      	bne.n	8008a82 <_scanf_float+0x1c6>
 8008a64:	6822      	ldr	r2, [r4, #0]
 8008a66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a6e:	d108      	bne.n	8008a82 <_scanf_float+0x1c6>
 8008a70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a74:	6022      	str	r2, [r4, #0]
 8008a76:	f04f 0a01 	mov.w	sl, #1
 8008a7a:	e7e3      	b.n	8008a44 <_scanf_float+0x188>
 8008a7c:	f1ba 0f02 	cmp.w	sl, #2
 8008a80:	d055      	beq.n	8008b2e <_scanf_float+0x272>
 8008a82:	2d01      	cmp	r5, #1
 8008a84:	d002      	beq.n	8008a8c <_scanf_float+0x1d0>
 8008a86:	2d04      	cmp	r5, #4
 8008a88:	f47f af48 	bne.w	800891c <_scanf_float+0x60>
 8008a8c:	3501      	adds	r5, #1
 8008a8e:	b2ed      	uxtb	r5, r5
 8008a90:	e7d8      	b.n	8008a44 <_scanf_float+0x188>
 8008a92:	f1ba 0f01 	cmp.w	sl, #1
 8008a96:	f47f af41 	bne.w	800891c <_scanf_float+0x60>
 8008a9a:	f04f 0a02 	mov.w	sl, #2
 8008a9e:	e7d1      	b.n	8008a44 <_scanf_float+0x188>
 8008aa0:	b97d      	cbnz	r5, 8008ac2 <_scanf_float+0x206>
 8008aa2:	f1b9 0f00 	cmp.w	r9, #0
 8008aa6:	f47f af3c 	bne.w	8008922 <_scanf_float+0x66>
 8008aaa:	6822      	ldr	r2, [r4, #0]
 8008aac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ab0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ab4:	f47f af39 	bne.w	800892a <_scanf_float+0x6e>
 8008ab8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008abc:	6022      	str	r2, [r4, #0]
 8008abe:	2501      	movs	r5, #1
 8008ac0:	e7c0      	b.n	8008a44 <_scanf_float+0x188>
 8008ac2:	2d03      	cmp	r5, #3
 8008ac4:	d0e2      	beq.n	8008a8c <_scanf_float+0x1d0>
 8008ac6:	2d05      	cmp	r5, #5
 8008ac8:	e7de      	b.n	8008a88 <_scanf_float+0x1cc>
 8008aca:	2d02      	cmp	r5, #2
 8008acc:	f47f af26 	bne.w	800891c <_scanf_float+0x60>
 8008ad0:	2503      	movs	r5, #3
 8008ad2:	e7b7      	b.n	8008a44 <_scanf_float+0x188>
 8008ad4:	2d06      	cmp	r5, #6
 8008ad6:	f47f af21 	bne.w	800891c <_scanf_float+0x60>
 8008ada:	2507      	movs	r5, #7
 8008adc:	e7b2      	b.n	8008a44 <_scanf_float+0x188>
 8008ade:	6822      	ldr	r2, [r4, #0]
 8008ae0:	0591      	lsls	r1, r2, #22
 8008ae2:	f57f af1b 	bpl.w	800891c <_scanf_float+0x60>
 8008ae6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008aea:	6022      	str	r2, [r4, #0]
 8008aec:	f8cd 9004 	str.w	r9, [sp, #4]
 8008af0:	e7a8      	b.n	8008a44 <_scanf_float+0x188>
 8008af2:	6822      	ldr	r2, [r4, #0]
 8008af4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008af8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008afc:	d006      	beq.n	8008b0c <_scanf_float+0x250>
 8008afe:	0550      	lsls	r0, r2, #21
 8008b00:	f57f af0c 	bpl.w	800891c <_scanf_float+0x60>
 8008b04:	f1b9 0f00 	cmp.w	r9, #0
 8008b08:	f43f af0f 	beq.w	800892a <_scanf_float+0x6e>
 8008b0c:	0591      	lsls	r1, r2, #22
 8008b0e:	bf58      	it	pl
 8008b10:	9901      	ldrpl	r1, [sp, #4]
 8008b12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b16:	bf58      	it	pl
 8008b18:	eba9 0101 	subpl.w	r1, r9, r1
 8008b1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008b20:	bf58      	it	pl
 8008b22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008b26:	6022      	str	r2, [r4, #0]
 8008b28:	f04f 0900 	mov.w	r9, #0
 8008b2c:	e78a      	b.n	8008a44 <_scanf_float+0x188>
 8008b2e:	f04f 0a03 	mov.w	sl, #3
 8008b32:	e787      	b.n	8008a44 <_scanf_float+0x188>
 8008b34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b38:	4639      	mov	r1, r7
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4798      	blx	r3
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f43f aedf 	beq.w	8008902 <_scanf_float+0x46>
 8008b44:	e6ea      	b.n	800891c <_scanf_float+0x60>
 8008b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b4e:	463a      	mov	r2, r7
 8008b50:	4640      	mov	r0, r8
 8008b52:	4798      	blx	r3
 8008b54:	6923      	ldr	r3, [r4, #16]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	6123      	str	r3, [r4, #16]
 8008b5a:	e6ec      	b.n	8008936 <_scanf_float+0x7a>
 8008b5c:	1e6b      	subs	r3, r5, #1
 8008b5e:	2b06      	cmp	r3, #6
 8008b60:	d825      	bhi.n	8008bae <_scanf_float+0x2f2>
 8008b62:	2d02      	cmp	r5, #2
 8008b64:	d836      	bhi.n	8008bd4 <_scanf_float+0x318>
 8008b66:	455e      	cmp	r6, fp
 8008b68:	f67f aee8 	bls.w	800893c <_scanf_float+0x80>
 8008b6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b74:	463a      	mov	r2, r7
 8008b76:	4640      	mov	r0, r8
 8008b78:	4798      	blx	r3
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	6123      	str	r3, [r4, #16]
 8008b80:	e7f1      	b.n	8008b66 <_scanf_float+0x2aa>
 8008b82:	9802      	ldr	r0, [sp, #8]
 8008b84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b8c:	9002      	str	r0, [sp, #8]
 8008b8e:	463a      	mov	r2, r7
 8008b90:	4640      	mov	r0, r8
 8008b92:	4798      	blx	r3
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	6123      	str	r3, [r4, #16]
 8008b9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b9e:	fa5f fa8a 	uxtb.w	sl, sl
 8008ba2:	f1ba 0f02 	cmp.w	sl, #2
 8008ba6:	d1ec      	bne.n	8008b82 <_scanf_float+0x2c6>
 8008ba8:	3d03      	subs	r5, #3
 8008baa:	b2ed      	uxtb	r5, r5
 8008bac:	1b76      	subs	r6, r6, r5
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	05da      	lsls	r2, r3, #23
 8008bb2:	d52f      	bpl.n	8008c14 <_scanf_float+0x358>
 8008bb4:	055b      	lsls	r3, r3, #21
 8008bb6:	d510      	bpl.n	8008bda <_scanf_float+0x31e>
 8008bb8:	455e      	cmp	r6, fp
 8008bba:	f67f aebf 	bls.w	800893c <_scanf_float+0x80>
 8008bbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bc6:	463a      	mov	r2, r7
 8008bc8:	4640      	mov	r0, r8
 8008bca:	4798      	blx	r3
 8008bcc:	6923      	ldr	r3, [r4, #16]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	6123      	str	r3, [r4, #16]
 8008bd2:	e7f1      	b.n	8008bb8 <_scanf_float+0x2fc>
 8008bd4:	46aa      	mov	sl, r5
 8008bd6:	9602      	str	r6, [sp, #8]
 8008bd8:	e7df      	b.n	8008b9a <_scanf_float+0x2de>
 8008bda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008bde:	6923      	ldr	r3, [r4, #16]
 8008be0:	2965      	cmp	r1, #101	; 0x65
 8008be2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008be6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008bea:	6123      	str	r3, [r4, #16]
 8008bec:	d00c      	beq.n	8008c08 <_scanf_float+0x34c>
 8008bee:	2945      	cmp	r1, #69	; 0x45
 8008bf0:	d00a      	beq.n	8008c08 <_scanf_float+0x34c>
 8008bf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bf6:	463a      	mov	r2, r7
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	4798      	blx	r3
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	1eb5      	subs	r5, r6, #2
 8008c06:	6123      	str	r3, [r4, #16]
 8008c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c0c:	463a      	mov	r2, r7
 8008c0e:	4640      	mov	r0, r8
 8008c10:	4798      	blx	r3
 8008c12:	462e      	mov	r6, r5
 8008c14:	6825      	ldr	r5, [r4, #0]
 8008c16:	f015 0510 	ands.w	r5, r5, #16
 8008c1a:	d158      	bne.n	8008cce <_scanf_float+0x412>
 8008c1c:	7035      	strb	r5, [r6, #0]
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c28:	d11c      	bne.n	8008c64 <_scanf_float+0x3a8>
 8008c2a:	9b01      	ldr	r3, [sp, #4]
 8008c2c:	454b      	cmp	r3, r9
 8008c2e:	eba3 0209 	sub.w	r2, r3, r9
 8008c32:	d124      	bne.n	8008c7e <_scanf_float+0x3c2>
 8008c34:	2200      	movs	r2, #0
 8008c36:	4659      	mov	r1, fp
 8008c38:	4640      	mov	r0, r8
 8008c3a:	f002 fc41 	bl	800b4c0 <_strtod_r>
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	6821      	ldr	r1, [r4, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f011 0f02 	tst.w	r1, #2
 8008c48:	ec57 6b10 	vmov	r6, r7, d0
 8008c4c:	f103 0204 	add.w	r2, r3, #4
 8008c50:	d020      	beq.n	8008c94 <_scanf_float+0x3d8>
 8008c52:	9903      	ldr	r1, [sp, #12]
 8008c54:	600a      	str	r2, [r1, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	e9c3 6700 	strd	r6, r7, [r3]
 8008c5c:	68e3      	ldr	r3, [r4, #12]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	60e3      	str	r3, [r4, #12]
 8008c62:	e66c      	b.n	800893e <_scanf_float+0x82>
 8008c64:	9b04      	ldr	r3, [sp, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0e4      	beq.n	8008c34 <_scanf_float+0x378>
 8008c6a:	9905      	ldr	r1, [sp, #20]
 8008c6c:	230a      	movs	r3, #10
 8008c6e:	462a      	mov	r2, r5
 8008c70:	3101      	adds	r1, #1
 8008c72:	4640      	mov	r0, r8
 8008c74:	f002 fcac 	bl	800b5d0 <_strtol_r>
 8008c78:	9b04      	ldr	r3, [sp, #16]
 8008c7a:	9e05      	ldr	r6, [sp, #20]
 8008c7c:	1ac2      	subs	r2, r0, r3
 8008c7e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c82:	429e      	cmp	r6, r3
 8008c84:	bf28      	it	cs
 8008c86:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c8a:	4912      	ldr	r1, [pc, #72]	; (8008cd4 <_scanf_float+0x418>)
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f000 f8f9 	bl	8008e84 <siprintf>
 8008c92:	e7cf      	b.n	8008c34 <_scanf_float+0x378>
 8008c94:	f011 0f04 	tst.w	r1, #4
 8008c98:	9903      	ldr	r1, [sp, #12]
 8008c9a:	600a      	str	r2, [r1, #0]
 8008c9c:	d1db      	bne.n	8008c56 <_scanf_float+0x39a>
 8008c9e:	f8d3 8000 	ldr.w	r8, [r3]
 8008ca2:	ee10 2a10 	vmov	r2, s0
 8008ca6:	ee10 0a10 	vmov	r0, s0
 8008caa:	463b      	mov	r3, r7
 8008cac:	4639      	mov	r1, r7
 8008cae:	f7f7 ff3d 	bl	8000b2c <__aeabi_dcmpun>
 8008cb2:	b128      	cbz	r0, 8008cc0 <_scanf_float+0x404>
 8008cb4:	4808      	ldr	r0, [pc, #32]	; (8008cd8 <_scanf_float+0x41c>)
 8008cb6:	f000 f9c9 	bl	800904c <nanf>
 8008cba:	ed88 0a00 	vstr	s0, [r8]
 8008cbe:	e7cd      	b.n	8008c5c <_scanf_float+0x3a0>
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f7f7 ff90 	bl	8000be8 <__aeabi_d2f>
 8008cc8:	f8c8 0000 	str.w	r0, [r8]
 8008ccc:	e7c6      	b.n	8008c5c <_scanf_float+0x3a0>
 8008cce:	2500      	movs	r5, #0
 8008cd0:	e635      	b.n	800893e <_scanf_float+0x82>
 8008cd2:	bf00      	nop
 8008cd4:	0800c888 	.word	0x0800c888
 8008cd8:	0800cc1d 	.word	0x0800cc1d

08008cdc <std>:
 8008cdc:	2300      	movs	r3, #0
 8008cde:	b510      	push	{r4, lr}
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cea:	6083      	str	r3, [r0, #8]
 8008cec:	8181      	strh	r1, [r0, #12]
 8008cee:	6643      	str	r3, [r0, #100]	; 0x64
 8008cf0:	81c2      	strh	r2, [r0, #14]
 8008cf2:	6183      	str	r3, [r0, #24]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	2208      	movs	r2, #8
 8008cf8:	305c      	adds	r0, #92	; 0x5c
 8008cfa:	f000 f926 	bl	8008f4a <memset>
 8008cfe:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <std+0x58>)
 8008d00:	6263      	str	r3, [r4, #36]	; 0x24
 8008d02:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <std+0x5c>)
 8008d04:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d06:	4b0d      	ldr	r3, [pc, #52]	; (8008d3c <std+0x60>)
 8008d08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d0a:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <std+0x64>)
 8008d0c:	6323      	str	r3, [r4, #48]	; 0x30
 8008d0e:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <std+0x68>)
 8008d10:	6224      	str	r4, [r4, #32]
 8008d12:	429c      	cmp	r4, r3
 8008d14:	d006      	beq.n	8008d24 <std+0x48>
 8008d16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008d1a:	4294      	cmp	r4, r2
 8008d1c:	d002      	beq.n	8008d24 <std+0x48>
 8008d1e:	33d0      	adds	r3, #208	; 0xd0
 8008d20:	429c      	cmp	r4, r3
 8008d22:	d105      	bne.n	8008d30 <std+0x54>
 8008d24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d2c:	f000 b98a 	b.w	8009044 <__retarget_lock_init_recursive>
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	bf00      	nop
 8008d34:	08008ec5 	.word	0x08008ec5
 8008d38:	08008ee7 	.word	0x08008ee7
 8008d3c:	08008f1f 	.word	0x08008f1f
 8008d40:	08008f43 	.word	0x08008f43
 8008d44:	200004dc 	.word	0x200004dc

08008d48 <stdio_exit_handler>:
 8008d48:	4a02      	ldr	r2, [pc, #8]	; (8008d54 <stdio_exit_handler+0xc>)
 8008d4a:	4903      	ldr	r1, [pc, #12]	; (8008d58 <stdio_exit_handler+0x10>)
 8008d4c:	4803      	ldr	r0, [pc, #12]	; (8008d5c <stdio_exit_handler+0x14>)
 8008d4e:	f000 b869 	b.w	8008e24 <_fwalk_sglue>
 8008d52:	bf00      	nop
 8008d54:	2000000c 	.word	0x2000000c
 8008d58:	0800bc19 	.word	0x0800bc19
 8008d5c:	20000018 	.word	0x20000018

08008d60 <cleanup_stdio>:
 8008d60:	6841      	ldr	r1, [r0, #4]
 8008d62:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <cleanup_stdio+0x34>)
 8008d64:	4299      	cmp	r1, r3
 8008d66:	b510      	push	{r4, lr}
 8008d68:	4604      	mov	r4, r0
 8008d6a:	d001      	beq.n	8008d70 <cleanup_stdio+0x10>
 8008d6c:	f002 ff54 	bl	800bc18 <_fflush_r>
 8008d70:	68a1      	ldr	r1, [r4, #8]
 8008d72:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <cleanup_stdio+0x38>)
 8008d74:	4299      	cmp	r1, r3
 8008d76:	d002      	beq.n	8008d7e <cleanup_stdio+0x1e>
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f002 ff4d 	bl	800bc18 <_fflush_r>
 8008d7e:	68e1      	ldr	r1, [r4, #12]
 8008d80:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <cleanup_stdio+0x3c>)
 8008d82:	4299      	cmp	r1, r3
 8008d84:	d004      	beq.n	8008d90 <cleanup_stdio+0x30>
 8008d86:	4620      	mov	r0, r4
 8008d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d8c:	f002 bf44 	b.w	800bc18 <_fflush_r>
 8008d90:	bd10      	pop	{r4, pc}
 8008d92:	bf00      	nop
 8008d94:	200004dc 	.word	0x200004dc
 8008d98:	20000544 	.word	0x20000544
 8008d9c:	200005ac 	.word	0x200005ac

08008da0 <global_stdio_init.part.0>:
 8008da0:	b510      	push	{r4, lr}
 8008da2:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <global_stdio_init.part.0+0x30>)
 8008da4:	4c0b      	ldr	r4, [pc, #44]	; (8008dd4 <global_stdio_init.part.0+0x34>)
 8008da6:	4a0c      	ldr	r2, [pc, #48]	; (8008dd8 <global_stdio_init.part.0+0x38>)
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	4620      	mov	r0, r4
 8008dac:	2200      	movs	r2, #0
 8008dae:	2104      	movs	r1, #4
 8008db0:	f7ff ff94 	bl	8008cdc <std>
 8008db4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008db8:	2201      	movs	r2, #1
 8008dba:	2109      	movs	r1, #9
 8008dbc:	f7ff ff8e 	bl	8008cdc <std>
 8008dc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dca:	2112      	movs	r1, #18
 8008dcc:	f7ff bf86 	b.w	8008cdc <std>
 8008dd0:	20000614 	.word	0x20000614
 8008dd4:	200004dc 	.word	0x200004dc
 8008dd8:	08008d49 	.word	0x08008d49

08008ddc <__sfp_lock_acquire>:
 8008ddc:	4801      	ldr	r0, [pc, #4]	; (8008de4 <__sfp_lock_acquire+0x8>)
 8008dde:	f000 b932 	b.w	8009046 <__retarget_lock_acquire_recursive>
 8008de2:	bf00      	nop
 8008de4:	2000061d 	.word	0x2000061d

08008de8 <__sfp_lock_release>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__sfp_lock_release+0x8>)
 8008dea:	f000 b92d 	b.w	8009048 <__retarget_lock_release_recursive>
 8008dee:	bf00      	nop
 8008df0:	2000061d 	.word	0x2000061d

08008df4 <__sinit>:
 8008df4:	b510      	push	{r4, lr}
 8008df6:	4604      	mov	r4, r0
 8008df8:	f7ff fff0 	bl	8008ddc <__sfp_lock_acquire>
 8008dfc:	6a23      	ldr	r3, [r4, #32]
 8008dfe:	b11b      	cbz	r3, 8008e08 <__sinit+0x14>
 8008e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e04:	f7ff bff0 	b.w	8008de8 <__sfp_lock_release>
 8008e08:	4b04      	ldr	r3, [pc, #16]	; (8008e1c <__sinit+0x28>)
 8008e0a:	6223      	str	r3, [r4, #32]
 8008e0c:	4b04      	ldr	r3, [pc, #16]	; (8008e20 <__sinit+0x2c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1f5      	bne.n	8008e00 <__sinit+0xc>
 8008e14:	f7ff ffc4 	bl	8008da0 <global_stdio_init.part.0>
 8008e18:	e7f2      	b.n	8008e00 <__sinit+0xc>
 8008e1a:	bf00      	nop
 8008e1c:	08008d61 	.word	0x08008d61
 8008e20:	20000614 	.word	0x20000614

08008e24 <_fwalk_sglue>:
 8008e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e28:	4607      	mov	r7, r0
 8008e2a:	4688      	mov	r8, r1
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	2600      	movs	r6, #0
 8008e30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e34:	f1b9 0901 	subs.w	r9, r9, #1
 8008e38:	d505      	bpl.n	8008e46 <_fwalk_sglue+0x22>
 8008e3a:	6824      	ldr	r4, [r4, #0]
 8008e3c:	2c00      	cmp	r4, #0
 8008e3e:	d1f7      	bne.n	8008e30 <_fwalk_sglue+0xc>
 8008e40:	4630      	mov	r0, r6
 8008e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e46:	89ab      	ldrh	r3, [r5, #12]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d907      	bls.n	8008e5c <_fwalk_sglue+0x38>
 8008e4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e50:	3301      	adds	r3, #1
 8008e52:	d003      	beq.n	8008e5c <_fwalk_sglue+0x38>
 8008e54:	4629      	mov	r1, r5
 8008e56:	4638      	mov	r0, r7
 8008e58:	47c0      	blx	r8
 8008e5a:	4306      	orrs	r6, r0
 8008e5c:	3568      	adds	r5, #104	; 0x68
 8008e5e:	e7e9      	b.n	8008e34 <_fwalk_sglue+0x10>

08008e60 <iprintf>:
 8008e60:	b40f      	push	{r0, r1, r2, r3}
 8008e62:	b507      	push	{r0, r1, r2, lr}
 8008e64:	4906      	ldr	r1, [pc, #24]	; (8008e80 <iprintf+0x20>)
 8008e66:	ab04      	add	r3, sp, #16
 8008e68:	6808      	ldr	r0, [r1, #0]
 8008e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6e:	6881      	ldr	r1, [r0, #8]
 8008e70:	9301      	str	r3, [sp, #4]
 8008e72:	f002 fd31 	bl	800b8d8 <_vfiprintf_r>
 8008e76:	b003      	add	sp, #12
 8008e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e7c:	b004      	add	sp, #16
 8008e7e:	4770      	bx	lr
 8008e80:	20000064 	.word	0x20000064

08008e84 <siprintf>:
 8008e84:	b40e      	push	{r1, r2, r3}
 8008e86:	b500      	push	{lr}
 8008e88:	b09c      	sub	sp, #112	; 0x70
 8008e8a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e8c:	9002      	str	r0, [sp, #8]
 8008e8e:	9006      	str	r0, [sp, #24]
 8008e90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e94:	4809      	ldr	r0, [pc, #36]	; (8008ebc <siprintf+0x38>)
 8008e96:	9107      	str	r1, [sp, #28]
 8008e98:	9104      	str	r1, [sp, #16]
 8008e9a:	4909      	ldr	r1, [pc, #36]	; (8008ec0 <siprintf+0x3c>)
 8008e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea0:	9105      	str	r1, [sp, #20]
 8008ea2:	6800      	ldr	r0, [r0, #0]
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	a902      	add	r1, sp, #8
 8008ea8:	f002 fbee 	bl	800b688 <_svfiprintf_r>
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	b01c      	add	sp, #112	; 0x70
 8008eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb8:	b003      	add	sp, #12
 8008eba:	4770      	bx	lr
 8008ebc:	20000064 	.word	0x20000064
 8008ec0:	ffff0208 	.word	0xffff0208

08008ec4 <__sread>:
 8008ec4:	b510      	push	{r4, lr}
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ecc:	f000 f86c 	bl	8008fa8 <_read_r>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	bfab      	itete	ge
 8008ed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ed8:	181b      	addge	r3, r3, r0
 8008eda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ede:	bfac      	ite	ge
 8008ee0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ee2:	81a3      	strhlt	r3, [r4, #12]
 8008ee4:	bd10      	pop	{r4, pc}

08008ee6 <__swrite>:
 8008ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eea:	461f      	mov	r7, r3
 8008eec:	898b      	ldrh	r3, [r1, #12]
 8008eee:	05db      	lsls	r3, r3, #23
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	4616      	mov	r6, r2
 8008ef6:	d505      	bpl.n	8008f04 <__swrite+0x1e>
 8008ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008efc:	2302      	movs	r3, #2
 8008efe:	2200      	movs	r2, #0
 8008f00:	f000 f840 	bl	8008f84 <_lseek_r>
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f0e:	81a3      	strh	r3, [r4, #12]
 8008f10:	4632      	mov	r2, r6
 8008f12:	463b      	mov	r3, r7
 8008f14:	4628      	mov	r0, r5
 8008f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1a:	f000 b857 	b.w	8008fcc <_write_r>

08008f1e <__sseek>:
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	460c      	mov	r4, r1
 8008f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f26:	f000 f82d 	bl	8008f84 <_lseek_r>
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	bf15      	itete	ne
 8008f30:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f3a:	81a3      	strheq	r3, [r4, #12]
 8008f3c:	bf18      	it	ne
 8008f3e:	81a3      	strhne	r3, [r4, #12]
 8008f40:	bd10      	pop	{r4, pc}

08008f42 <__sclose>:
 8008f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f46:	f000 b80d 	b.w	8008f64 <_close_r>

08008f4a <memset>:
 8008f4a:	4402      	add	r2, r0
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d100      	bne.n	8008f54 <memset+0xa>
 8008f52:	4770      	bx	lr
 8008f54:	f803 1b01 	strb.w	r1, [r3], #1
 8008f58:	e7f9      	b.n	8008f4e <memset+0x4>
	...

08008f5c <_localeconv_r>:
 8008f5c:	4800      	ldr	r0, [pc, #0]	; (8008f60 <_localeconv_r+0x4>)
 8008f5e:	4770      	bx	lr
 8008f60:	20000158 	.word	0x20000158

08008f64 <_close_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d06      	ldr	r5, [pc, #24]	; (8008f80 <_close_r+0x1c>)
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	f7f8 fea8 	bl	8001cc4 <_close>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_close_r+0x1a>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_close_r+0x1a>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	20000618 	.word	0x20000618

08008f84 <_lseek_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d07      	ldr	r5, [pc, #28]	; (8008fa4 <_lseek_r+0x20>)
 8008f88:	4604      	mov	r4, r0
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	602a      	str	r2, [r5, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	f7f8 febd 	bl	8001d12 <_lseek>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d102      	bne.n	8008fa2 <_lseek_r+0x1e>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	b103      	cbz	r3, 8008fa2 <_lseek_r+0x1e>
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	20000618 	.word	0x20000618

08008fa8 <_read_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4d07      	ldr	r5, [pc, #28]	; (8008fc8 <_read_r+0x20>)
 8008fac:	4604      	mov	r4, r0
 8008fae:	4608      	mov	r0, r1
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	602a      	str	r2, [r5, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f7f8 fe46 	bl	8001c48 <_read>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d102      	bne.n	8008fc6 <_read_r+0x1e>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	b103      	cbz	r3, 8008fc6 <_read_r+0x1e>
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	20000618 	.word	0x20000618

08008fcc <_write_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4d07      	ldr	r5, [pc, #28]	; (8008fec <_write_r+0x20>)
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	4608      	mov	r0, r1
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	602a      	str	r2, [r5, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f7f8 fe52 	bl	8001c84 <_write>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_write_r+0x1e>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_write_r+0x1e>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	20000618 	.word	0x20000618

08008ff0 <__errno>:
 8008ff0:	4b01      	ldr	r3, [pc, #4]	; (8008ff8 <__errno+0x8>)
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	20000064 	.word	0x20000064

08008ffc <__libc_init_array>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	4d0d      	ldr	r5, [pc, #52]	; (8009034 <__libc_init_array+0x38>)
 8009000:	4c0d      	ldr	r4, [pc, #52]	; (8009038 <__libc_init_array+0x3c>)
 8009002:	1b64      	subs	r4, r4, r5
 8009004:	10a4      	asrs	r4, r4, #2
 8009006:	2600      	movs	r6, #0
 8009008:	42a6      	cmp	r6, r4
 800900a:	d109      	bne.n	8009020 <__libc_init_array+0x24>
 800900c:	4d0b      	ldr	r5, [pc, #44]	; (800903c <__libc_init_array+0x40>)
 800900e:	4c0c      	ldr	r4, [pc, #48]	; (8009040 <__libc_init_array+0x44>)
 8009010:	f003 fbd6 	bl	800c7c0 <_init>
 8009014:	1b64      	subs	r4, r4, r5
 8009016:	10a4      	asrs	r4, r4, #2
 8009018:	2600      	movs	r6, #0
 800901a:	42a6      	cmp	r6, r4
 800901c:	d105      	bne.n	800902a <__libc_init_array+0x2e>
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	f855 3b04 	ldr.w	r3, [r5], #4
 8009024:	4798      	blx	r3
 8009026:	3601      	adds	r6, #1
 8009028:	e7ee      	b.n	8009008 <__libc_init_array+0xc>
 800902a:	f855 3b04 	ldr.w	r3, [r5], #4
 800902e:	4798      	blx	r3
 8009030:	3601      	adds	r6, #1
 8009032:	e7f2      	b.n	800901a <__libc_init_array+0x1e>
 8009034:	0800cc88 	.word	0x0800cc88
 8009038:	0800cc88 	.word	0x0800cc88
 800903c:	0800cc88 	.word	0x0800cc88
 8009040:	0800cc8c 	.word	0x0800cc8c

08009044 <__retarget_lock_init_recursive>:
 8009044:	4770      	bx	lr

08009046 <__retarget_lock_acquire_recursive>:
 8009046:	4770      	bx	lr

08009048 <__retarget_lock_release_recursive>:
 8009048:	4770      	bx	lr
	...

0800904c <nanf>:
 800904c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009054 <nanf+0x8>
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	7fc00000 	.word	0x7fc00000

08009058 <quorem>:
 8009058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	6903      	ldr	r3, [r0, #16]
 800905e:	690c      	ldr	r4, [r1, #16]
 8009060:	42a3      	cmp	r3, r4
 8009062:	4607      	mov	r7, r0
 8009064:	db7e      	blt.n	8009164 <quorem+0x10c>
 8009066:	3c01      	subs	r4, #1
 8009068:	f101 0814 	add.w	r8, r1, #20
 800906c:	f100 0514 	add.w	r5, r0, #20
 8009070:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800907a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800907e:	3301      	adds	r3, #1
 8009080:	429a      	cmp	r2, r3
 8009082:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009086:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800908a:	fbb2 f6f3 	udiv	r6, r2, r3
 800908e:	d331      	bcc.n	80090f4 <quorem+0x9c>
 8009090:	f04f 0e00 	mov.w	lr, #0
 8009094:	4640      	mov	r0, r8
 8009096:	46ac      	mov	ip, r5
 8009098:	46f2      	mov	sl, lr
 800909a:	f850 2b04 	ldr.w	r2, [r0], #4
 800909e:	b293      	uxth	r3, r2
 80090a0:	fb06 e303 	mla	r3, r6, r3, lr
 80090a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090a8:	0c1a      	lsrs	r2, r3, #16
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	ebaa 0303 	sub.w	r3, sl, r3
 80090b0:	f8dc a000 	ldr.w	sl, [ip]
 80090b4:	fa13 f38a 	uxtah	r3, r3, sl
 80090b8:	fb06 220e 	mla	r2, r6, lr, r2
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	9b00      	ldr	r3, [sp, #0]
 80090c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090c4:	b292      	uxth	r2, r2
 80090c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80090d2:	4581      	cmp	r9, r0
 80090d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090d8:	f84c 3b04 	str.w	r3, [ip], #4
 80090dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090e0:	d2db      	bcs.n	800909a <quorem+0x42>
 80090e2:	f855 300b 	ldr.w	r3, [r5, fp]
 80090e6:	b92b      	cbnz	r3, 80090f4 <quorem+0x9c>
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	3b04      	subs	r3, #4
 80090ec:	429d      	cmp	r5, r3
 80090ee:	461a      	mov	r2, r3
 80090f0:	d32c      	bcc.n	800914c <quorem+0xf4>
 80090f2:	613c      	str	r4, [r7, #16]
 80090f4:	4638      	mov	r0, r7
 80090f6:	f001 f9ef 	bl	800a4d8 <__mcmp>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	db22      	blt.n	8009144 <quorem+0xec>
 80090fe:	3601      	adds	r6, #1
 8009100:	4629      	mov	r1, r5
 8009102:	2000      	movs	r0, #0
 8009104:	f858 2b04 	ldr.w	r2, [r8], #4
 8009108:	f8d1 c000 	ldr.w	ip, [r1]
 800910c:	b293      	uxth	r3, r2
 800910e:	1ac3      	subs	r3, r0, r3
 8009110:	0c12      	lsrs	r2, r2, #16
 8009112:	fa13 f38c 	uxtah	r3, r3, ip
 8009116:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800911a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800911e:	b29b      	uxth	r3, r3
 8009120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009124:	45c1      	cmp	r9, r8
 8009126:	f841 3b04 	str.w	r3, [r1], #4
 800912a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800912e:	d2e9      	bcs.n	8009104 <quorem+0xac>
 8009130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009134:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009138:	b922      	cbnz	r2, 8009144 <quorem+0xec>
 800913a:	3b04      	subs	r3, #4
 800913c:	429d      	cmp	r5, r3
 800913e:	461a      	mov	r2, r3
 8009140:	d30a      	bcc.n	8009158 <quorem+0x100>
 8009142:	613c      	str	r4, [r7, #16]
 8009144:	4630      	mov	r0, r6
 8009146:	b003      	add	sp, #12
 8009148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914c:	6812      	ldr	r2, [r2, #0]
 800914e:	3b04      	subs	r3, #4
 8009150:	2a00      	cmp	r2, #0
 8009152:	d1ce      	bne.n	80090f2 <quorem+0x9a>
 8009154:	3c01      	subs	r4, #1
 8009156:	e7c9      	b.n	80090ec <quorem+0x94>
 8009158:	6812      	ldr	r2, [r2, #0]
 800915a:	3b04      	subs	r3, #4
 800915c:	2a00      	cmp	r2, #0
 800915e:	d1f0      	bne.n	8009142 <quorem+0xea>
 8009160:	3c01      	subs	r4, #1
 8009162:	e7eb      	b.n	800913c <quorem+0xe4>
 8009164:	2000      	movs	r0, #0
 8009166:	e7ee      	b.n	8009146 <quorem+0xee>

08009168 <_dtoa_r>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	ed2d 8b04 	vpush	{d8-d9}
 8009170:	69c5      	ldr	r5, [r0, #28]
 8009172:	b093      	sub	sp, #76	; 0x4c
 8009174:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009178:	ec57 6b10 	vmov	r6, r7, d0
 800917c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009180:	9107      	str	r1, [sp, #28]
 8009182:	4604      	mov	r4, r0
 8009184:	920a      	str	r2, [sp, #40]	; 0x28
 8009186:	930d      	str	r3, [sp, #52]	; 0x34
 8009188:	b975      	cbnz	r5, 80091a8 <_dtoa_r+0x40>
 800918a:	2010      	movs	r0, #16
 800918c:	f000 fe2a 	bl	8009de4 <malloc>
 8009190:	4602      	mov	r2, r0
 8009192:	61e0      	str	r0, [r4, #28]
 8009194:	b920      	cbnz	r0, 80091a0 <_dtoa_r+0x38>
 8009196:	4bae      	ldr	r3, [pc, #696]	; (8009450 <_dtoa_r+0x2e8>)
 8009198:	21ef      	movs	r1, #239	; 0xef
 800919a:	48ae      	ldr	r0, [pc, #696]	; (8009454 <_dtoa_r+0x2ec>)
 800919c:	f002 fe4c 	bl	800be38 <__assert_func>
 80091a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091a4:	6005      	str	r5, [r0, #0]
 80091a6:	60c5      	str	r5, [r0, #12]
 80091a8:	69e3      	ldr	r3, [r4, #28]
 80091aa:	6819      	ldr	r1, [r3, #0]
 80091ac:	b151      	cbz	r1, 80091c4 <_dtoa_r+0x5c>
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	604a      	str	r2, [r1, #4]
 80091b2:	2301      	movs	r3, #1
 80091b4:	4093      	lsls	r3, r2
 80091b6:	608b      	str	r3, [r1, #8]
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 ff07 	bl	8009fcc <_Bfree>
 80091be:	69e3      	ldr	r3, [r4, #28]
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	1e3b      	subs	r3, r7, #0
 80091c6:	bfbb      	ittet	lt
 80091c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80091cc:	9303      	strlt	r3, [sp, #12]
 80091ce:	2300      	movge	r3, #0
 80091d0:	2201      	movlt	r2, #1
 80091d2:	bfac      	ite	ge
 80091d4:	f8c8 3000 	strge.w	r3, [r8]
 80091d8:	f8c8 2000 	strlt.w	r2, [r8]
 80091dc:	4b9e      	ldr	r3, [pc, #632]	; (8009458 <_dtoa_r+0x2f0>)
 80091de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80091e2:	ea33 0308 	bics.w	r3, r3, r8
 80091e6:	d11b      	bne.n	8009220 <_dtoa_r+0xb8>
 80091e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80091f4:	4333      	orrs	r3, r6
 80091f6:	f000 8593 	beq.w	8009d20 <_dtoa_r+0xbb8>
 80091fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091fc:	b963      	cbnz	r3, 8009218 <_dtoa_r+0xb0>
 80091fe:	4b97      	ldr	r3, [pc, #604]	; (800945c <_dtoa_r+0x2f4>)
 8009200:	e027      	b.n	8009252 <_dtoa_r+0xea>
 8009202:	4b97      	ldr	r3, [pc, #604]	; (8009460 <_dtoa_r+0x2f8>)
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	3308      	adds	r3, #8
 8009208:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	9800      	ldr	r0, [sp, #0]
 800920e:	b013      	add	sp, #76	; 0x4c
 8009210:	ecbd 8b04 	vpop	{d8-d9}
 8009214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009218:	4b90      	ldr	r3, [pc, #576]	; (800945c <_dtoa_r+0x2f4>)
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	3303      	adds	r3, #3
 800921e:	e7f3      	b.n	8009208 <_dtoa_r+0xa0>
 8009220:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009224:	2200      	movs	r2, #0
 8009226:	ec51 0b17 	vmov	r0, r1, d7
 800922a:	eeb0 8a47 	vmov.f32	s16, s14
 800922e:	eef0 8a67 	vmov.f32	s17, s15
 8009232:	2300      	movs	r3, #0
 8009234:	f7f7 fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009238:	4681      	mov	r9, r0
 800923a:	b160      	cbz	r0, 8009256 <_dtoa_r+0xee>
 800923c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800923e:	2301      	movs	r3, #1
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 8568 	beq.w	8009d1a <_dtoa_r+0xbb2>
 800924a:	4b86      	ldr	r3, [pc, #536]	; (8009464 <_dtoa_r+0x2fc>)
 800924c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	3b01      	subs	r3, #1
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	e7da      	b.n	800920c <_dtoa_r+0xa4>
 8009256:	aa10      	add	r2, sp, #64	; 0x40
 8009258:	a911      	add	r1, sp, #68	; 0x44
 800925a:	4620      	mov	r0, r4
 800925c:	eeb0 0a48 	vmov.f32	s0, s16
 8009260:	eef0 0a68 	vmov.f32	s1, s17
 8009264:	f001 fa4e 	bl	800a704 <__d2b>
 8009268:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800926c:	4682      	mov	sl, r0
 800926e:	2d00      	cmp	r5, #0
 8009270:	d07f      	beq.n	8009372 <_dtoa_r+0x20a>
 8009272:	ee18 3a90 	vmov	r3, s17
 8009276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800927a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800927e:	ec51 0b18 	vmov	r0, r1, d8
 8009282:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800928a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800928e:	4619      	mov	r1, r3
 8009290:	2200      	movs	r2, #0
 8009292:	4b75      	ldr	r3, [pc, #468]	; (8009468 <_dtoa_r+0x300>)
 8009294:	f7f6 fff8 	bl	8000288 <__aeabi_dsub>
 8009298:	a367      	add	r3, pc, #412	; (adr r3, 8009438 <_dtoa_r+0x2d0>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	f7f7 f9ab 	bl	80005f8 <__aeabi_dmul>
 80092a2:	a367      	add	r3, pc, #412	; (adr r3, 8009440 <_dtoa_r+0x2d8>)
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f7f6 fff0 	bl	800028c <__adddf3>
 80092ac:	4606      	mov	r6, r0
 80092ae:	4628      	mov	r0, r5
 80092b0:	460f      	mov	r7, r1
 80092b2:	f7f7 f937 	bl	8000524 <__aeabi_i2d>
 80092b6:	a364      	add	r3, pc, #400	; (adr r3, 8009448 <_dtoa_r+0x2e0>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f7f7 f99c 	bl	80005f8 <__aeabi_dmul>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4630      	mov	r0, r6
 80092c6:	4639      	mov	r1, r7
 80092c8:	f7f6 ffe0 	bl	800028c <__adddf3>
 80092cc:	4606      	mov	r6, r0
 80092ce:	460f      	mov	r7, r1
 80092d0:	f7f7 fc42 	bl	8000b58 <__aeabi_d2iz>
 80092d4:	2200      	movs	r2, #0
 80092d6:	4683      	mov	fp, r0
 80092d8:	2300      	movs	r3, #0
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f7 fbfd 	bl	8000adc <__aeabi_dcmplt>
 80092e2:	b148      	cbz	r0, 80092f8 <_dtoa_r+0x190>
 80092e4:	4658      	mov	r0, fp
 80092e6:	f7f7 f91d 	bl	8000524 <__aeabi_i2d>
 80092ea:	4632      	mov	r2, r6
 80092ec:	463b      	mov	r3, r7
 80092ee:	f7f7 fbeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80092f2:	b908      	cbnz	r0, 80092f8 <_dtoa_r+0x190>
 80092f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092f8:	f1bb 0f16 	cmp.w	fp, #22
 80092fc:	d857      	bhi.n	80093ae <_dtoa_r+0x246>
 80092fe:	4b5b      	ldr	r3, [pc, #364]	; (800946c <_dtoa_r+0x304>)
 8009300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	ec51 0b18 	vmov	r0, r1, d8
 800930c:	f7f7 fbe6 	bl	8000adc <__aeabi_dcmplt>
 8009310:	2800      	cmp	r0, #0
 8009312:	d04e      	beq.n	80093b2 <_dtoa_r+0x24a>
 8009314:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009318:	2300      	movs	r3, #0
 800931a:	930c      	str	r3, [sp, #48]	; 0x30
 800931c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800931e:	1b5b      	subs	r3, r3, r5
 8009320:	1e5a      	subs	r2, r3, #1
 8009322:	bf45      	ittet	mi
 8009324:	f1c3 0301 	rsbmi	r3, r3, #1
 8009328:	9305      	strmi	r3, [sp, #20]
 800932a:	2300      	movpl	r3, #0
 800932c:	2300      	movmi	r3, #0
 800932e:	9206      	str	r2, [sp, #24]
 8009330:	bf54      	ite	pl
 8009332:	9305      	strpl	r3, [sp, #20]
 8009334:	9306      	strmi	r3, [sp, #24]
 8009336:	f1bb 0f00 	cmp.w	fp, #0
 800933a:	db3c      	blt.n	80093b6 <_dtoa_r+0x24e>
 800933c:	9b06      	ldr	r3, [sp, #24]
 800933e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009342:	445b      	add	r3, fp
 8009344:	9306      	str	r3, [sp, #24]
 8009346:	2300      	movs	r3, #0
 8009348:	9308      	str	r3, [sp, #32]
 800934a:	9b07      	ldr	r3, [sp, #28]
 800934c:	2b09      	cmp	r3, #9
 800934e:	d868      	bhi.n	8009422 <_dtoa_r+0x2ba>
 8009350:	2b05      	cmp	r3, #5
 8009352:	bfc4      	itt	gt
 8009354:	3b04      	subgt	r3, #4
 8009356:	9307      	strgt	r3, [sp, #28]
 8009358:	9b07      	ldr	r3, [sp, #28]
 800935a:	f1a3 0302 	sub.w	r3, r3, #2
 800935e:	bfcc      	ite	gt
 8009360:	2500      	movgt	r5, #0
 8009362:	2501      	movle	r5, #1
 8009364:	2b03      	cmp	r3, #3
 8009366:	f200 8085 	bhi.w	8009474 <_dtoa_r+0x30c>
 800936a:	e8df f003 	tbb	[pc, r3]
 800936e:	3b2e      	.short	0x3b2e
 8009370:	5839      	.short	0x5839
 8009372:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009376:	441d      	add	r5, r3
 8009378:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800937c:	2b20      	cmp	r3, #32
 800937e:	bfc1      	itttt	gt
 8009380:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009384:	fa08 f803 	lslgt.w	r8, r8, r3
 8009388:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800938c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009390:	bfd6      	itet	le
 8009392:	f1c3 0320 	rsble	r3, r3, #32
 8009396:	ea48 0003 	orrgt.w	r0, r8, r3
 800939a:	fa06 f003 	lslle.w	r0, r6, r3
 800939e:	f7f7 f8b1 	bl	8000504 <__aeabi_ui2d>
 80093a2:	2201      	movs	r2, #1
 80093a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80093a8:	3d01      	subs	r5, #1
 80093aa:	920e      	str	r2, [sp, #56]	; 0x38
 80093ac:	e76f      	b.n	800928e <_dtoa_r+0x126>
 80093ae:	2301      	movs	r3, #1
 80093b0:	e7b3      	b.n	800931a <_dtoa_r+0x1b2>
 80093b2:	900c      	str	r0, [sp, #48]	; 0x30
 80093b4:	e7b2      	b.n	800931c <_dtoa_r+0x1b4>
 80093b6:	9b05      	ldr	r3, [sp, #20]
 80093b8:	eba3 030b 	sub.w	r3, r3, fp
 80093bc:	9305      	str	r3, [sp, #20]
 80093be:	f1cb 0300 	rsb	r3, fp, #0
 80093c2:	9308      	str	r3, [sp, #32]
 80093c4:	2300      	movs	r3, #0
 80093c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80093c8:	e7bf      	b.n	800934a <_dtoa_r+0x1e2>
 80093ca:	2300      	movs	r3, #0
 80093cc:	9309      	str	r3, [sp, #36]	; 0x24
 80093ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc52      	bgt.n	800947a <_dtoa_r+0x312>
 80093d4:	2301      	movs	r3, #1
 80093d6:	9301      	str	r3, [sp, #4]
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	461a      	mov	r2, r3
 80093dc:	920a      	str	r2, [sp, #40]	; 0x28
 80093de:	e00b      	b.n	80093f8 <_dtoa_r+0x290>
 80093e0:	2301      	movs	r3, #1
 80093e2:	e7f3      	b.n	80093cc <_dtoa_r+0x264>
 80093e4:	2300      	movs	r3, #0
 80093e6:	9309      	str	r3, [sp, #36]	; 0x24
 80093e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ea:	445b      	add	r3, fp
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	3301      	adds	r3, #1
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	9304      	str	r3, [sp, #16]
 80093f4:	bfb8      	it	lt
 80093f6:	2301      	movlt	r3, #1
 80093f8:	69e0      	ldr	r0, [r4, #28]
 80093fa:	2100      	movs	r1, #0
 80093fc:	2204      	movs	r2, #4
 80093fe:	f102 0614 	add.w	r6, r2, #20
 8009402:	429e      	cmp	r6, r3
 8009404:	d93d      	bls.n	8009482 <_dtoa_r+0x31a>
 8009406:	6041      	str	r1, [r0, #4]
 8009408:	4620      	mov	r0, r4
 800940a:	f000 fd9f 	bl	8009f4c <_Balloc>
 800940e:	9000      	str	r0, [sp, #0]
 8009410:	2800      	cmp	r0, #0
 8009412:	d139      	bne.n	8009488 <_dtoa_r+0x320>
 8009414:	4b16      	ldr	r3, [pc, #88]	; (8009470 <_dtoa_r+0x308>)
 8009416:	4602      	mov	r2, r0
 8009418:	f240 11af 	movw	r1, #431	; 0x1af
 800941c:	e6bd      	b.n	800919a <_dtoa_r+0x32>
 800941e:	2301      	movs	r3, #1
 8009420:	e7e1      	b.n	80093e6 <_dtoa_r+0x27e>
 8009422:	2501      	movs	r5, #1
 8009424:	2300      	movs	r3, #0
 8009426:	9307      	str	r3, [sp, #28]
 8009428:	9509      	str	r5, [sp, #36]	; 0x24
 800942a:	f04f 33ff 	mov.w	r3, #4294967295
 800942e:	9301      	str	r3, [sp, #4]
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	2200      	movs	r2, #0
 8009434:	2312      	movs	r3, #18
 8009436:	e7d1      	b.n	80093dc <_dtoa_r+0x274>
 8009438:	636f4361 	.word	0x636f4361
 800943c:	3fd287a7 	.word	0x3fd287a7
 8009440:	8b60c8b3 	.word	0x8b60c8b3
 8009444:	3fc68a28 	.word	0x3fc68a28
 8009448:	509f79fb 	.word	0x509f79fb
 800944c:	3fd34413 	.word	0x3fd34413
 8009450:	0800c89a 	.word	0x0800c89a
 8009454:	0800c8b1 	.word	0x0800c8b1
 8009458:	7ff00000 	.word	0x7ff00000
 800945c:	0800c896 	.word	0x0800c896
 8009460:	0800c88d 	.word	0x0800c88d
 8009464:	0800c865 	.word	0x0800c865
 8009468:	3ff80000 	.word	0x3ff80000
 800946c:	0800c9a0 	.word	0x0800c9a0
 8009470:	0800c909 	.word	0x0800c909
 8009474:	2301      	movs	r3, #1
 8009476:	9309      	str	r3, [sp, #36]	; 0x24
 8009478:	e7d7      	b.n	800942a <_dtoa_r+0x2c2>
 800947a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	9304      	str	r3, [sp, #16]
 8009480:	e7ba      	b.n	80093f8 <_dtoa_r+0x290>
 8009482:	3101      	adds	r1, #1
 8009484:	0052      	lsls	r2, r2, #1
 8009486:	e7ba      	b.n	80093fe <_dtoa_r+0x296>
 8009488:	69e3      	ldr	r3, [r4, #28]
 800948a:	9a00      	ldr	r2, [sp, #0]
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	9b04      	ldr	r3, [sp, #16]
 8009490:	2b0e      	cmp	r3, #14
 8009492:	f200 80a8 	bhi.w	80095e6 <_dtoa_r+0x47e>
 8009496:	2d00      	cmp	r5, #0
 8009498:	f000 80a5 	beq.w	80095e6 <_dtoa_r+0x47e>
 800949c:	f1bb 0f00 	cmp.w	fp, #0
 80094a0:	dd38      	ble.n	8009514 <_dtoa_r+0x3ac>
 80094a2:	4bc0      	ldr	r3, [pc, #768]	; (80097a4 <_dtoa_r+0x63c>)
 80094a4:	f00b 020f 	and.w	r2, fp, #15
 80094a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80094b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80094b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80094b8:	d019      	beq.n	80094ee <_dtoa_r+0x386>
 80094ba:	4bbb      	ldr	r3, [pc, #748]	; (80097a8 <_dtoa_r+0x640>)
 80094bc:	ec51 0b18 	vmov	r0, r1, d8
 80094c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094c4:	f7f7 f9c2 	bl	800084c <__aeabi_ddiv>
 80094c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094cc:	f008 080f 	and.w	r8, r8, #15
 80094d0:	2503      	movs	r5, #3
 80094d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80097a8 <_dtoa_r+0x640>
 80094d6:	f1b8 0f00 	cmp.w	r8, #0
 80094da:	d10a      	bne.n	80094f2 <_dtoa_r+0x38a>
 80094dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094e0:	4632      	mov	r2, r6
 80094e2:	463b      	mov	r3, r7
 80094e4:	f7f7 f9b2 	bl	800084c <__aeabi_ddiv>
 80094e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ec:	e02b      	b.n	8009546 <_dtoa_r+0x3de>
 80094ee:	2502      	movs	r5, #2
 80094f0:	e7ef      	b.n	80094d2 <_dtoa_r+0x36a>
 80094f2:	f018 0f01 	tst.w	r8, #1
 80094f6:	d008      	beq.n	800950a <_dtoa_r+0x3a2>
 80094f8:	4630      	mov	r0, r6
 80094fa:	4639      	mov	r1, r7
 80094fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009500:	f7f7 f87a 	bl	80005f8 <__aeabi_dmul>
 8009504:	3501      	adds	r5, #1
 8009506:	4606      	mov	r6, r0
 8009508:	460f      	mov	r7, r1
 800950a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800950e:	f109 0908 	add.w	r9, r9, #8
 8009512:	e7e0      	b.n	80094d6 <_dtoa_r+0x36e>
 8009514:	f000 809f 	beq.w	8009656 <_dtoa_r+0x4ee>
 8009518:	f1cb 0600 	rsb	r6, fp, #0
 800951c:	4ba1      	ldr	r3, [pc, #644]	; (80097a4 <_dtoa_r+0x63c>)
 800951e:	4fa2      	ldr	r7, [pc, #648]	; (80097a8 <_dtoa_r+0x640>)
 8009520:	f006 020f 	and.w	r2, r6, #15
 8009524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	ec51 0b18 	vmov	r0, r1, d8
 8009530:	f7f7 f862 	bl	80005f8 <__aeabi_dmul>
 8009534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009538:	1136      	asrs	r6, r6, #4
 800953a:	2300      	movs	r3, #0
 800953c:	2502      	movs	r5, #2
 800953e:	2e00      	cmp	r6, #0
 8009540:	d17e      	bne.n	8009640 <_dtoa_r+0x4d8>
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1d0      	bne.n	80094e8 <_dtoa_r+0x380>
 8009546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009548:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 8084 	beq.w	800965a <_dtoa_r+0x4f2>
 8009552:	4b96      	ldr	r3, [pc, #600]	; (80097ac <_dtoa_r+0x644>)
 8009554:	2200      	movs	r2, #0
 8009556:	4640      	mov	r0, r8
 8009558:	4649      	mov	r1, r9
 800955a:	f7f7 fabf 	bl	8000adc <__aeabi_dcmplt>
 800955e:	2800      	cmp	r0, #0
 8009560:	d07b      	beq.n	800965a <_dtoa_r+0x4f2>
 8009562:	9b04      	ldr	r3, [sp, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d078      	beq.n	800965a <_dtoa_r+0x4f2>
 8009568:	9b01      	ldr	r3, [sp, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	dd39      	ble.n	80095e2 <_dtoa_r+0x47a>
 800956e:	4b90      	ldr	r3, [pc, #576]	; (80097b0 <_dtoa_r+0x648>)
 8009570:	2200      	movs	r2, #0
 8009572:	4640      	mov	r0, r8
 8009574:	4649      	mov	r1, r9
 8009576:	f7f7 f83f 	bl	80005f8 <__aeabi_dmul>
 800957a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800957e:	9e01      	ldr	r6, [sp, #4]
 8009580:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009584:	3501      	adds	r5, #1
 8009586:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800958a:	4628      	mov	r0, r5
 800958c:	f7f6 ffca 	bl	8000524 <__aeabi_i2d>
 8009590:	4642      	mov	r2, r8
 8009592:	464b      	mov	r3, r9
 8009594:	f7f7 f830 	bl	80005f8 <__aeabi_dmul>
 8009598:	4b86      	ldr	r3, [pc, #536]	; (80097b4 <_dtoa_r+0x64c>)
 800959a:	2200      	movs	r2, #0
 800959c:	f7f6 fe76 	bl	800028c <__adddf3>
 80095a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80095a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095a8:	9303      	str	r3, [sp, #12]
 80095aa:	2e00      	cmp	r6, #0
 80095ac:	d158      	bne.n	8009660 <_dtoa_r+0x4f8>
 80095ae:	4b82      	ldr	r3, [pc, #520]	; (80097b8 <_dtoa_r+0x650>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	f7f6 fe67 	bl	8000288 <__aeabi_dsub>
 80095ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095be:	4680      	mov	r8, r0
 80095c0:	4689      	mov	r9, r1
 80095c2:	f7f7 faa9 	bl	8000b18 <__aeabi_dcmpgt>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f040 8296 	bne.w	8009af8 <_dtoa_r+0x990>
 80095cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80095d0:	4640      	mov	r0, r8
 80095d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095d6:	4649      	mov	r1, r9
 80095d8:	f7f7 fa80 	bl	8000adc <__aeabi_dcmplt>
 80095dc:	2800      	cmp	r0, #0
 80095de:	f040 8289 	bne.w	8009af4 <_dtoa_r+0x98c>
 80095e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80095e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f2c0 814e 	blt.w	800988a <_dtoa_r+0x722>
 80095ee:	f1bb 0f0e 	cmp.w	fp, #14
 80095f2:	f300 814a 	bgt.w	800988a <_dtoa_r+0x722>
 80095f6:	4b6b      	ldr	r3, [pc, #428]	; (80097a4 <_dtoa_r+0x63c>)
 80095f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80095fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009602:	2b00      	cmp	r3, #0
 8009604:	f280 80dc 	bge.w	80097c0 <_dtoa_r+0x658>
 8009608:	9b04      	ldr	r3, [sp, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f300 80d8 	bgt.w	80097c0 <_dtoa_r+0x658>
 8009610:	f040 826f 	bne.w	8009af2 <_dtoa_r+0x98a>
 8009614:	4b68      	ldr	r3, [pc, #416]	; (80097b8 <_dtoa_r+0x650>)
 8009616:	2200      	movs	r2, #0
 8009618:	4640      	mov	r0, r8
 800961a:	4649      	mov	r1, r9
 800961c:	f7f6 ffec 	bl	80005f8 <__aeabi_dmul>
 8009620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009624:	f7f7 fa6e 	bl	8000b04 <__aeabi_dcmpge>
 8009628:	9e04      	ldr	r6, [sp, #16]
 800962a:	4637      	mov	r7, r6
 800962c:	2800      	cmp	r0, #0
 800962e:	f040 8245 	bne.w	8009abc <_dtoa_r+0x954>
 8009632:	9d00      	ldr	r5, [sp, #0]
 8009634:	2331      	movs	r3, #49	; 0x31
 8009636:	f805 3b01 	strb.w	r3, [r5], #1
 800963a:	f10b 0b01 	add.w	fp, fp, #1
 800963e:	e241      	b.n	8009ac4 <_dtoa_r+0x95c>
 8009640:	07f2      	lsls	r2, r6, #31
 8009642:	d505      	bpl.n	8009650 <_dtoa_r+0x4e8>
 8009644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009648:	f7f6 ffd6 	bl	80005f8 <__aeabi_dmul>
 800964c:	3501      	adds	r5, #1
 800964e:	2301      	movs	r3, #1
 8009650:	1076      	asrs	r6, r6, #1
 8009652:	3708      	adds	r7, #8
 8009654:	e773      	b.n	800953e <_dtoa_r+0x3d6>
 8009656:	2502      	movs	r5, #2
 8009658:	e775      	b.n	8009546 <_dtoa_r+0x3de>
 800965a:	9e04      	ldr	r6, [sp, #16]
 800965c:	465f      	mov	r7, fp
 800965e:	e792      	b.n	8009586 <_dtoa_r+0x41e>
 8009660:	9900      	ldr	r1, [sp, #0]
 8009662:	4b50      	ldr	r3, [pc, #320]	; (80097a4 <_dtoa_r+0x63c>)
 8009664:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009668:	4431      	add	r1, r6
 800966a:	9102      	str	r1, [sp, #8]
 800966c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800966e:	eeb0 9a47 	vmov.f32	s18, s14
 8009672:	eef0 9a67 	vmov.f32	s19, s15
 8009676:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800967a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800967e:	2900      	cmp	r1, #0
 8009680:	d044      	beq.n	800970c <_dtoa_r+0x5a4>
 8009682:	494e      	ldr	r1, [pc, #312]	; (80097bc <_dtoa_r+0x654>)
 8009684:	2000      	movs	r0, #0
 8009686:	f7f7 f8e1 	bl	800084c <__aeabi_ddiv>
 800968a:	ec53 2b19 	vmov	r2, r3, d9
 800968e:	f7f6 fdfb 	bl	8000288 <__aeabi_dsub>
 8009692:	9d00      	ldr	r5, [sp, #0]
 8009694:	ec41 0b19 	vmov	d9, r0, r1
 8009698:	4649      	mov	r1, r9
 800969a:	4640      	mov	r0, r8
 800969c:	f7f7 fa5c 	bl	8000b58 <__aeabi_d2iz>
 80096a0:	4606      	mov	r6, r0
 80096a2:	f7f6 ff3f 	bl	8000524 <__aeabi_i2d>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4640      	mov	r0, r8
 80096ac:	4649      	mov	r1, r9
 80096ae:	f7f6 fdeb 	bl	8000288 <__aeabi_dsub>
 80096b2:	3630      	adds	r6, #48	; 0x30
 80096b4:	f805 6b01 	strb.w	r6, [r5], #1
 80096b8:	ec53 2b19 	vmov	r2, r3, d9
 80096bc:	4680      	mov	r8, r0
 80096be:	4689      	mov	r9, r1
 80096c0:	f7f7 fa0c 	bl	8000adc <__aeabi_dcmplt>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d164      	bne.n	8009792 <_dtoa_r+0x62a>
 80096c8:	4642      	mov	r2, r8
 80096ca:	464b      	mov	r3, r9
 80096cc:	4937      	ldr	r1, [pc, #220]	; (80097ac <_dtoa_r+0x644>)
 80096ce:	2000      	movs	r0, #0
 80096d0:	f7f6 fdda 	bl	8000288 <__aeabi_dsub>
 80096d4:	ec53 2b19 	vmov	r2, r3, d9
 80096d8:	f7f7 fa00 	bl	8000adc <__aeabi_dcmplt>
 80096dc:	2800      	cmp	r0, #0
 80096de:	f040 80b6 	bne.w	800984e <_dtoa_r+0x6e6>
 80096e2:	9b02      	ldr	r3, [sp, #8]
 80096e4:	429d      	cmp	r5, r3
 80096e6:	f43f af7c 	beq.w	80095e2 <_dtoa_r+0x47a>
 80096ea:	4b31      	ldr	r3, [pc, #196]	; (80097b0 <_dtoa_r+0x648>)
 80096ec:	ec51 0b19 	vmov	r0, r1, d9
 80096f0:	2200      	movs	r2, #0
 80096f2:	f7f6 ff81 	bl	80005f8 <__aeabi_dmul>
 80096f6:	4b2e      	ldr	r3, [pc, #184]	; (80097b0 <_dtoa_r+0x648>)
 80096f8:	ec41 0b19 	vmov	d9, r0, r1
 80096fc:	2200      	movs	r2, #0
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f7f6 ff79 	bl	80005f8 <__aeabi_dmul>
 8009706:	4680      	mov	r8, r0
 8009708:	4689      	mov	r9, r1
 800970a:	e7c5      	b.n	8009698 <_dtoa_r+0x530>
 800970c:	ec51 0b17 	vmov	r0, r1, d7
 8009710:	f7f6 ff72 	bl	80005f8 <__aeabi_dmul>
 8009714:	9b02      	ldr	r3, [sp, #8]
 8009716:	9d00      	ldr	r5, [sp, #0]
 8009718:	930f      	str	r3, [sp, #60]	; 0x3c
 800971a:	ec41 0b19 	vmov	d9, r0, r1
 800971e:	4649      	mov	r1, r9
 8009720:	4640      	mov	r0, r8
 8009722:	f7f7 fa19 	bl	8000b58 <__aeabi_d2iz>
 8009726:	4606      	mov	r6, r0
 8009728:	f7f6 fefc 	bl	8000524 <__aeabi_i2d>
 800972c:	3630      	adds	r6, #48	; 0x30
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4640      	mov	r0, r8
 8009734:	4649      	mov	r1, r9
 8009736:	f7f6 fda7 	bl	8000288 <__aeabi_dsub>
 800973a:	f805 6b01 	strb.w	r6, [r5], #1
 800973e:	9b02      	ldr	r3, [sp, #8]
 8009740:	429d      	cmp	r5, r3
 8009742:	4680      	mov	r8, r0
 8009744:	4689      	mov	r9, r1
 8009746:	f04f 0200 	mov.w	r2, #0
 800974a:	d124      	bne.n	8009796 <_dtoa_r+0x62e>
 800974c:	4b1b      	ldr	r3, [pc, #108]	; (80097bc <_dtoa_r+0x654>)
 800974e:	ec51 0b19 	vmov	r0, r1, d9
 8009752:	f7f6 fd9b 	bl	800028c <__adddf3>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	4640      	mov	r0, r8
 800975c:	4649      	mov	r1, r9
 800975e:	f7f7 f9db 	bl	8000b18 <__aeabi_dcmpgt>
 8009762:	2800      	cmp	r0, #0
 8009764:	d173      	bne.n	800984e <_dtoa_r+0x6e6>
 8009766:	ec53 2b19 	vmov	r2, r3, d9
 800976a:	4914      	ldr	r1, [pc, #80]	; (80097bc <_dtoa_r+0x654>)
 800976c:	2000      	movs	r0, #0
 800976e:	f7f6 fd8b 	bl	8000288 <__aeabi_dsub>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4640      	mov	r0, r8
 8009778:	4649      	mov	r1, r9
 800977a:	f7f7 f9af 	bl	8000adc <__aeabi_dcmplt>
 800977e:	2800      	cmp	r0, #0
 8009780:	f43f af2f 	beq.w	80095e2 <_dtoa_r+0x47a>
 8009784:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009786:	1e6b      	subs	r3, r5, #1
 8009788:	930f      	str	r3, [sp, #60]	; 0x3c
 800978a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800978e:	2b30      	cmp	r3, #48	; 0x30
 8009790:	d0f8      	beq.n	8009784 <_dtoa_r+0x61c>
 8009792:	46bb      	mov	fp, r7
 8009794:	e04a      	b.n	800982c <_dtoa_r+0x6c4>
 8009796:	4b06      	ldr	r3, [pc, #24]	; (80097b0 <_dtoa_r+0x648>)
 8009798:	f7f6 ff2e 	bl	80005f8 <__aeabi_dmul>
 800979c:	4680      	mov	r8, r0
 800979e:	4689      	mov	r9, r1
 80097a0:	e7bd      	b.n	800971e <_dtoa_r+0x5b6>
 80097a2:	bf00      	nop
 80097a4:	0800c9a0 	.word	0x0800c9a0
 80097a8:	0800c978 	.word	0x0800c978
 80097ac:	3ff00000 	.word	0x3ff00000
 80097b0:	40240000 	.word	0x40240000
 80097b4:	401c0000 	.word	0x401c0000
 80097b8:	40140000 	.word	0x40140000
 80097bc:	3fe00000 	.word	0x3fe00000
 80097c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097c4:	9d00      	ldr	r5, [sp, #0]
 80097c6:	4642      	mov	r2, r8
 80097c8:	464b      	mov	r3, r9
 80097ca:	4630      	mov	r0, r6
 80097cc:	4639      	mov	r1, r7
 80097ce:	f7f7 f83d 	bl	800084c <__aeabi_ddiv>
 80097d2:	f7f7 f9c1 	bl	8000b58 <__aeabi_d2iz>
 80097d6:	9001      	str	r0, [sp, #4]
 80097d8:	f7f6 fea4 	bl	8000524 <__aeabi_i2d>
 80097dc:	4642      	mov	r2, r8
 80097de:	464b      	mov	r3, r9
 80097e0:	f7f6 ff0a 	bl	80005f8 <__aeabi_dmul>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4630      	mov	r0, r6
 80097ea:	4639      	mov	r1, r7
 80097ec:	f7f6 fd4c 	bl	8000288 <__aeabi_dsub>
 80097f0:	9e01      	ldr	r6, [sp, #4]
 80097f2:	9f04      	ldr	r7, [sp, #16]
 80097f4:	3630      	adds	r6, #48	; 0x30
 80097f6:	f805 6b01 	strb.w	r6, [r5], #1
 80097fa:	9e00      	ldr	r6, [sp, #0]
 80097fc:	1bae      	subs	r6, r5, r6
 80097fe:	42b7      	cmp	r7, r6
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	d134      	bne.n	8009870 <_dtoa_r+0x708>
 8009806:	f7f6 fd41 	bl	800028c <__adddf3>
 800980a:	4642      	mov	r2, r8
 800980c:	464b      	mov	r3, r9
 800980e:	4606      	mov	r6, r0
 8009810:	460f      	mov	r7, r1
 8009812:	f7f7 f981 	bl	8000b18 <__aeabi_dcmpgt>
 8009816:	b9c8      	cbnz	r0, 800984c <_dtoa_r+0x6e4>
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	f7f7 f952 	bl	8000ac8 <__aeabi_dcmpeq>
 8009824:	b110      	cbz	r0, 800982c <_dtoa_r+0x6c4>
 8009826:	9b01      	ldr	r3, [sp, #4]
 8009828:	07db      	lsls	r3, r3, #31
 800982a:	d40f      	bmi.n	800984c <_dtoa_r+0x6e4>
 800982c:	4651      	mov	r1, sl
 800982e:	4620      	mov	r0, r4
 8009830:	f000 fbcc 	bl	8009fcc <_Bfree>
 8009834:	2300      	movs	r3, #0
 8009836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009838:	702b      	strb	r3, [r5, #0]
 800983a:	f10b 0301 	add.w	r3, fp, #1
 800983e:	6013      	str	r3, [r2, #0]
 8009840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009842:	2b00      	cmp	r3, #0
 8009844:	f43f ace2 	beq.w	800920c <_dtoa_r+0xa4>
 8009848:	601d      	str	r5, [r3, #0]
 800984a:	e4df      	b.n	800920c <_dtoa_r+0xa4>
 800984c:	465f      	mov	r7, fp
 800984e:	462b      	mov	r3, r5
 8009850:	461d      	mov	r5, r3
 8009852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009856:	2a39      	cmp	r2, #57	; 0x39
 8009858:	d106      	bne.n	8009868 <_dtoa_r+0x700>
 800985a:	9a00      	ldr	r2, [sp, #0]
 800985c:	429a      	cmp	r2, r3
 800985e:	d1f7      	bne.n	8009850 <_dtoa_r+0x6e8>
 8009860:	9900      	ldr	r1, [sp, #0]
 8009862:	2230      	movs	r2, #48	; 0x30
 8009864:	3701      	adds	r7, #1
 8009866:	700a      	strb	r2, [r1, #0]
 8009868:	781a      	ldrb	r2, [r3, #0]
 800986a:	3201      	adds	r2, #1
 800986c:	701a      	strb	r2, [r3, #0]
 800986e:	e790      	b.n	8009792 <_dtoa_r+0x62a>
 8009870:	4ba3      	ldr	r3, [pc, #652]	; (8009b00 <_dtoa_r+0x998>)
 8009872:	2200      	movs	r2, #0
 8009874:	f7f6 fec0 	bl	80005f8 <__aeabi_dmul>
 8009878:	2200      	movs	r2, #0
 800987a:	2300      	movs	r3, #0
 800987c:	4606      	mov	r6, r0
 800987e:	460f      	mov	r7, r1
 8009880:	f7f7 f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8009884:	2800      	cmp	r0, #0
 8009886:	d09e      	beq.n	80097c6 <_dtoa_r+0x65e>
 8009888:	e7d0      	b.n	800982c <_dtoa_r+0x6c4>
 800988a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800988c:	2a00      	cmp	r2, #0
 800988e:	f000 80ca 	beq.w	8009a26 <_dtoa_r+0x8be>
 8009892:	9a07      	ldr	r2, [sp, #28]
 8009894:	2a01      	cmp	r2, #1
 8009896:	f300 80ad 	bgt.w	80099f4 <_dtoa_r+0x88c>
 800989a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800989c:	2a00      	cmp	r2, #0
 800989e:	f000 80a5 	beq.w	80099ec <_dtoa_r+0x884>
 80098a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80098a6:	9e08      	ldr	r6, [sp, #32]
 80098a8:	9d05      	ldr	r5, [sp, #20]
 80098aa:	9a05      	ldr	r2, [sp, #20]
 80098ac:	441a      	add	r2, r3
 80098ae:	9205      	str	r2, [sp, #20]
 80098b0:	9a06      	ldr	r2, [sp, #24]
 80098b2:	2101      	movs	r1, #1
 80098b4:	441a      	add	r2, r3
 80098b6:	4620      	mov	r0, r4
 80098b8:	9206      	str	r2, [sp, #24]
 80098ba:	f000 fc87 	bl	800a1cc <__i2b>
 80098be:	4607      	mov	r7, r0
 80098c0:	b165      	cbz	r5, 80098dc <_dtoa_r+0x774>
 80098c2:	9b06      	ldr	r3, [sp, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dd09      	ble.n	80098dc <_dtoa_r+0x774>
 80098c8:	42ab      	cmp	r3, r5
 80098ca:	9a05      	ldr	r2, [sp, #20]
 80098cc:	bfa8      	it	ge
 80098ce:	462b      	movge	r3, r5
 80098d0:	1ad2      	subs	r2, r2, r3
 80098d2:	9205      	str	r2, [sp, #20]
 80098d4:	9a06      	ldr	r2, [sp, #24]
 80098d6:	1aed      	subs	r5, r5, r3
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	9306      	str	r3, [sp, #24]
 80098dc:	9b08      	ldr	r3, [sp, #32]
 80098de:	b1f3      	cbz	r3, 800991e <_dtoa_r+0x7b6>
 80098e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 80a3 	beq.w	8009a2e <_dtoa_r+0x8c6>
 80098e8:	2e00      	cmp	r6, #0
 80098ea:	dd10      	ble.n	800990e <_dtoa_r+0x7a6>
 80098ec:	4639      	mov	r1, r7
 80098ee:	4632      	mov	r2, r6
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fd2b 	bl	800a34c <__pow5mult>
 80098f6:	4652      	mov	r2, sl
 80098f8:	4601      	mov	r1, r0
 80098fa:	4607      	mov	r7, r0
 80098fc:	4620      	mov	r0, r4
 80098fe:	f000 fc7b 	bl	800a1f8 <__multiply>
 8009902:	4651      	mov	r1, sl
 8009904:	4680      	mov	r8, r0
 8009906:	4620      	mov	r0, r4
 8009908:	f000 fb60 	bl	8009fcc <_Bfree>
 800990c:	46c2      	mov	sl, r8
 800990e:	9b08      	ldr	r3, [sp, #32]
 8009910:	1b9a      	subs	r2, r3, r6
 8009912:	d004      	beq.n	800991e <_dtoa_r+0x7b6>
 8009914:	4651      	mov	r1, sl
 8009916:	4620      	mov	r0, r4
 8009918:	f000 fd18 	bl	800a34c <__pow5mult>
 800991c:	4682      	mov	sl, r0
 800991e:	2101      	movs	r1, #1
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fc53 	bl	800a1cc <__i2b>
 8009926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009928:	2b00      	cmp	r3, #0
 800992a:	4606      	mov	r6, r0
 800992c:	f340 8081 	ble.w	8009a32 <_dtoa_r+0x8ca>
 8009930:	461a      	mov	r2, r3
 8009932:	4601      	mov	r1, r0
 8009934:	4620      	mov	r0, r4
 8009936:	f000 fd09 	bl	800a34c <__pow5mult>
 800993a:	9b07      	ldr	r3, [sp, #28]
 800993c:	2b01      	cmp	r3, #1
 800993e:	4606      	mov	r6, r0
 8009940:	dd7a      	ble.n	8009a38 <_dtoa_r+0x8d0>
 8009942:	f04f 0800 	mov.w	r8, #0
 8009946:	6933      	ldr	r3, [r6, #16]
 8009948:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800994c:	6918      	ldr	r0, [r3, #16]
 800994e:	f000 fbef 	bl	800a130 <__hi0bits>
 8009952:	f1c0 0020 	rsb	r0, r0, #32
 8009956:	9b06      	ldr	r3, [sp, #24]
 8009958:	4418      	add	r0, r3
 800995a:	f010 001f 	ands.w	r0, r0, #31
 800995e:	f000 8094 	beq.w	8009a8a <_dtoa_r+0x922>
 8009962:	f1c0 0320 	rsb	r3, r0, #32
 8009966:	2b04      	cmp	r3, #4
 8009968:	f340 8085 	ble.w	8009a76 <_dtoa_r+0x90e>
 800996c:	9b05      	ldr	r3, [sp, #20]
 800996e:	f1c0 001c 	rsb	r0, r0, #28
 8009972:	4403      	add	r3, r0
 8009974:	9305      	str	r3, [sp, #20]
 8009976:	9b06      	ldr	r3, [sp, #24]
 8009978:	4403      	add	r3, r0
 800997a:	4405      	add	r5, r0
 800997c:	9306      	str	r3, [sp, #24]
 800997e:	9b05      	ldr	r3, [sp, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	dd05      	ble.n	8009990 <_dtoa_r+0x828>
 8009984:	4651      	mov	r1, sl
 8009986:	461a      	mov	r2, r3
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fd39 	bl	800a400 <__lshift>
 800998e:	4682      	mov	sl, r0
 8009990:	9b06      	ldr	r3, [sp, #24]
 8009992:	2b00      	cmp	r3, #0
 8009994:	dd05      	ble.n	80099a2 <_dtoa_r+0x83a>
 8009996:	4631      	mov	r1, r6
 8009998:	461a      	mov	r2, r3
 800999a:	4620      	mov	r0, r4
 800999c:	f000 fd30 	bl	800a400 <__lshift>
 80099a0:	4606      	mov	r6, r0
 80099a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d072      	beq.n	8009a8e <_dtoa_r+0x926>
 80099a8:	4631      	mov	r1, r6
 80099aa:	4650      	mov	r0, sl
 80099ac:	f000 fd94 	bl	800a4d8 <__mcmp>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	da6c      	bge.n	8009a8e <_dtoa_r+0x926>
 80099b4:	2300      	movs	r3, #0
 80099b6:	4651      	mov	r1, sl
 80099b8:	220a      	movs	r2, #10
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 fb28 	bl	800a010 <__multadd>
 80099c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099c6:	4682      	mov	sl, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 81b0 	beq.w	8009d2e <_dtoa_r+0xbc6>
 80099ce:	2300      	movs	r3, #0
 80099d0:	4639      	mov	r1, r7
 80099d2:	220a      	movs	r2, #10
 80099d4:	4620      	mov	r0, r4
 80099d6:	f000 fb1b 	bl	800a010 <__multadd>
 80099da:	9b01      	ldr	r3, [sp, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	4607      	mov	r7, r0
 80099e0:	f300 8096 	bgt.w	8009b10 <_dtoa_r+0x9a8>
 80099e4:	9b07      	ldr	r3, [sp, #28]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	dc59      	bgt.n	8009a9e <_dtoa_r+0x936>
 80099ea:	e091      	b.n	8009b10 <_dtoa_r+0x9a8>
 80099ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099f2:	e758      	b.n	80098a6 <_dtoa_r+0x73e>
 80099f4:	9b04      	ldr	r3, [sp, #16]
 80099f6:	1e5e      	subs	r6, r3, #1
 80099f8:	9b08      	ldr	r3, [sp, #32]
 80099fa:	42b3      	cmp	r3, r6
 80099fc:	bfbf      	itttt	lt
 80099fe:	9b08      	ldrlt	r3, [sp, #32]
 8009a00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009a02:	9608      	strlt	r6, [sp, #32]
 8009a04:	1af3      	sublt	r3, r6, r3
 8009a06:	bfb4      	ite	lt
 8009a08:	18d2      	addlt	r2, r2, r3
 8009a0a:	1b9e      	subge	r6, r3, r6
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	bfbc      	itt	lt
 8009a10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009a12:	2600      	movlt	r6, #0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	bfb7      	itett	lt
 8009a18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009a1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009a20:	1a9d      	sublt	r5, r3, r2
 8009a22:	2300      	movlt	r3, #0
 8009a24:	e741      	b.n	80098aa <_dtoa_r+0x742>
 8009a26:	9e08      	ldr	r6, [sp, #32]
 8009a28:	9d05      	ldr	r5, [sp, #20]
 8009a2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a2c:	e748      	b.n	80098c0 <_dtoa_r+0x758>
 8009a2e:	9a08      	ldr	r2, [sp, #32]
 8009a30:	e770      	b.n	8009914 <_dtoa_r+0x7ac>
 8009a32:	9b07      	ldr	r3, [sp, #28]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	dc19      	bgt.n	8009a6c <_dtoa_r+0x904>
 8009a38:	9b02      	ldr	r3, [sp, #8]
 8009a3a:	b9bb      	cbnz	r3, 8009a6c <_dtoa_r+0x904>
 8009a3c:	9b03      	ldr	r3, [sp, #12]
 8009a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a42:	b99b      	cbnz	r3, 8009a6c <_dtoa_r+0x904>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a4a:	0d1b      	lsrs	r3, r3, #20
 8009a4c:	051b      	lsls	r3, r3, #20
 8009a4e:	b183      	cbz	r3, 8009a72 <_dtoa_r+0x90a>
 8009a50:	9b05      	ldr	r3, [sp, #20]
 8009a52:	3301      	adds	r3, #1
 8009a54:	9305      	str	r3, [sp, #20]
 8009a56:	9b06      	ldr	r3, [sp, #24]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	9306      	str	r3, [sp, #24]
 8009a5c:	f04f 0801 	mov.w	r8, #1
 8009a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f47f af6f 	bne.w	8009946 <_dtoa_r+0x7de>
 8009a68:	2001      	movs	r0, #1
 8009a6a:	e774      	b.n	8009956 <_dtoa_r+0x7ee>
 8009a6c:	f04f 0800 	mov.w	r8, #0
 8009a70:	e7f6      	b.n	8009a60 <_dtoa_r+0x8f8>
 8009a72:	4698      	mov	r8, r3
 8009a74:	e7f4      	b.n	8009a60 <_dtoa_r+0x8f8>
 8009a76:	d082      	beq.n	800997e <_dtoa_r+0x816>
 8009a78:	9a05      	ldr	r2, [sp, #20]
 8009a7a:	331c      	adds	r3, #28
 8009a7c:	441a      	add	r2, r3
 8009a7e:	9205      	str	r2, [sp, #20]
 8009a80:	9a06      	ldr	r2, [sp, #24]
 8009a82:	441a      	add	r2, r3
 8009a84:	441d      	add	r5, r3
 8009a86:	9206      	str	r2, [sp, #24]
 8009a88:	e779      	b.n	800997e <_dtoa_r+0x816>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	e7f4      	b.n	8009a78 <_dtoa_r+0x910>
 8009a8e:	9b04      	ldr	r3, [sp, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dc37      	bgt.n	8009b04 <_dtoa_r+0x99c>
 8009a94:	9b07      	ldr	r3, [sp, #28]
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	dd34      	ble.n	8009b04 <_dtoa_r+0x99c>
 8009a9a:	9b04      	ldr	r3, [sp, #16]
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	b963      	cbnz	r3, 8009abc <_dtoa_r+0x954>
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	2205      	movs	r2, #5
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 fab2 	bl	800a010 <__multadd>
 8009aac:	4601      	mov	r1, r0
 8009aae:	4606      	mov	r6, r0
 8009ab0:	4650      	mov	r0, sl
 8009ab2:	f000 fd11 	bl	800a4d8 <__mcmp>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	f73f adbb 	bgt.w	8009632 <_dtoa_r+0x4ca>
 8009abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009abe:	9d00      	ldr	r5, [sp, #0]
 8009ac0:	ea6f 0b03 	mvn.w	fp, r3
 8009ac4:	f04f 0800 	mov.w	r8, #0
 8009ac8:	4631      	mov	r1, r6
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 fa7e 	bl	8009fcc <_Bfree>
 8009ad0:	2f00      	cmp	r7, #0
 8009ad2:	f43f aeab 	beq.w	800982c <_dtoa_r+0x6c4>
 8009ad6:	f1b8 0f00 	cmp.w	r8, #0
 8009ada:	d005      	beq.n	8009ae8 <_dtoa_r+0x980>
 8009adc:	45b8      	cmp	r8, r7
 8009ade:	d003      	beq.n	8009ae8 <_dtoa_r+0x980>
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f000 fa72 	bl	8009fcc <_Bfree>
 8009ae8:	4639      	mov	r1, r7
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 fa6e 	bl	8009fcc <_Bfree>
 8009af0:	e69c      	b.n	800982c <_dtoa_r+0x6c4>
 8009af2:	2600      	movs	r6, #0
 8009af4:	4637      	mov	r7, r6
 8009af6:	e7e1      	b.n	8009abc <_dtoa_r+0x954>
 8009af8:	46bb      	mov	fp, r7
 8009afa:	4637      	mov	r7, r6
 8009afc:	e599      	b.n	8009632 <_dtoa_r+0x4ca>
 8009afe:	bf00      	nop
 8009b00:	40240000 	.word	0x40240000
 8009b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 80c8 	beq.w	8009c9c <_dtoa_r+0xb34>
 8009b0c:	9b04      	ldr	r3, [sp, #16]
 8009b0e:	9301      	str	r3, [sp, #4]
 8009b10:	2d00      	cmp	r5, #0
 8009b12:	dd05      	ble.n	8009b20 <_dtoa_r+0x9b8>
 8009b14:	4639      	mov	r1, r7
 8009b16:	462a      	mov	r2, r5
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 fc71 	bl	800a400 <__lshift>
 8009b1e:	4607      	mov	r7, r0
 8009b20:	f1b8 0f00 	cmp.w	r8, #0
 8009b24:	d05b      	beq.n	8009bde <_dtoa_r+0xa76>
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 fa0f 	bl	8009f4c <_Balloc>
 8009b2e:	4605      	mov	r5, r0
 8009b30:	b928      	cbnz	r0, 8009b3e <_dtoa_r+0x9d6>
 8009b32:	4b83      	ldr	r3, [pc, #524]	; (8009d40 <_dtoa_r+0xbd8>)
 8009b34:	4602      	mov	r2, r0
 8009b36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009b3a:	f7ff bb2e 	b.w	800919a <_dtoa_r+0x32>
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	3202      	adds	r2, #2
 8009b42:	0092      	lsls	r2, r2, #2
 8009b44:	f107 010c 	add.w	r1, r7, #12
 8009b48:	300c      	adds	r0, #12
 8009b4a:	f002 f95f 	bl	800be0c <memcpy>
 8009b4e:	2201      	movs	r2, #1
 8009b50:	4629      	mov	r1, r5
 8009b52:	4620      	mov	r0, r4
 8009b54:	f000 fc54 	bl	800a400 <__lshift>
 8009b58:	9b00      	ldr	r3, [sp, #0]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b62:	4413      	add	r3, r2
 8009b64:	9308      	str	r3, [sp, #32]
 8009b66:	9b02      	ldr	r3, [sp, #8]
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	46b8      	mov	r8, r7
 8009b6e:	9306      	str	r3, [sp, #24]
 8009b70:	4607      	mov	r7, r0
 8009b72:	9b04      	ldr	r3, [sp, #16]
 8009b74:	4631      	mov	r1, r6
 8009b76:	3b01      	subs	r3, #1
 8009b78:	4650      	mov	r0, sl
 8009b7a:	9301      	str	r3, [sp, #4]
 8009b7c:	f7ff fa6c 	bl	8009058 <quorem>
 8009b80:	4641      	mov	r1, r8
 8009b82:	9002      	str	r0, [sp, #8]
 8009b84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b88:	4650      	mov	r0, sl
 8009b8a:	f000 fca5 	bl	800a4d8 <__mcmp>
 8009b8e:	463a      	mov	r2, r7
 8009b90:	9005      	str	r0, [sp, #20]
 8009b92:	4631      	mov	r1, r6
 8009b94:	4620      	mov	r0, r4
 8009b96:	f000 fcbb 	bl	800a510 <__mdiff>
 8009b9a:	68c2      	ldr	r2, [r0, #12]
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	bb02      	cbnz	r2, 8009be2 <_dtoa_r+0xa7a>
 8009ba0:	4601      	mov	r1, r0
 8009ba2:	4650      	mov	r0, sl
 8009ba4:	f000 fc98 	bl	800a4d8 <__mcmp>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	4629      	mov	r1, r5
 8009bac:	4620      	mov	r0, r4
 8009bae:	9209      	str	r2, [sp, #36]	; 0x24
 8009bb0:	f000 fa0c 	bl	8009fcc <_Bfree>
 8009bb4:	9b07      	ldr	r3, [sp, #28]
 8009bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bb8:	9d04      	ldr	r5, [sp, #16]
 8009bba:	ea43 0102 	orr.w	r1, r3, r2
 8009bbe:	9b06      	ldr	r3, [sp, #24]
 8009bc0:	4319      	orrs	r1, r3
 8009bc2:	d110      	bne.n	8009be6 <_dtoa_r+0xa7e>
 8009bc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009bc8:	d029      	beq.n	8009c1e <_dtoa_r+0xab6>
 8009bca:	9b05      	ldr	r3, [sp, #20]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	dd02      	ble.n	8009bd6 <_dtoa_r+0xa6e>
 8009bd0:	9b02      	ldr	r3, [sp, #8]
 8009bd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009bd6:	9b01      	ldr	r3, [sp, #4]
 8009bd8:	f883 9000 	strb.w	r9, [r3]
 8009bdc:	e774      	b.n	8009ac8 <_dtoa_r+0x960>
 8009bde:	4638      	mov	r0, r7
 8009be0:	e7ba      	b.n	8009b58 <_dtoa_r+0x9f0>
 8009be2:	2201      	movs	r2, #1
 8009be4:	e7e1      	b.n	8009baa <_dtoa_r+0xa42>
 8009be6:	9b05      	ldr	r3, [sp, #20]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	db04      	blt.n	8009bf6 <_dtoa_r+0xa8e>
 8009bec:	9907      	ldr	r1, [sp, #28]
 8009bee:	430b      	orrs	r3, r1
 8009bf0:	9906      	ldr	r1, [sp, #24]
 8009bf2:	430b      	orrs	r3, r1
 8009bf4:	d120      	bne.n	8009c38 <_dtoa_r+0xad0>
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	dded      	ble.n	8009bd6 <_dtoa_r+0xa6e>
 8009bfa:	4651      	mov	r1, sl
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 fbfe 	bl	800a400 <__lshift>
 8009c04:	4631      	mov	r1, r6
 8009c06:	4682      	mov	sl, r0
 8009c08:	f000 fc66 	bl	800a4d8 <__mcmp>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	dc03      	bgt.n	8009c18 <_dtoa_r+0xab0>
 8009c10:	d1e1      	bne.n	8009bd6 <_dtoa_r+0xa6e>
 8009c12:	f019 0f01 	tst.w	r9, #1
 8009c16:	d0de      	beq.n	8009bd6 <_dtoa_r+0xa6e>
 8009c18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c1c:	d1d8      	bne.n	8009bd0 <_dtoa_r+0xa68>
 8009c1e:	9a01      	ldr	r2, [sp, #4]
 8009c20:	2339      	movs	r3, #57	; 0x39
 8009c22:	7013      	strb	r3, [r2, #0]
 8009c24:	462b      	mov	r3, r5
 8009c26:	461d      	mov	r5, r3
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c2e:	2a39      	cmp	r2, #57	; 0x39
 8009c30:	d06c      	beq.n	8009d0c <_dtoa_r+0xba4>
 8009c32:	3201      	adds	r2, #1
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	e747      	b.n	8009ac8 <_dtoa_r+0x960>
 8009c38:	2a00      	cmp	r2, #0
 8009c3a:	dd07      	ble.n	8009c4c <_dtoa_r+0xae4>
 8009c3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c40:	d0ed      	beq.n	8009c1e <_dtoa_r+0xab6>
 8009c42:	9a01      	ldr	r2, [sp, #4]
 8009c44:	f109 0301 	add.w	r3, r9, #1
 8009c48:	7013      	strb	r3, [r2, #0]
 8009c4a:	e73d      	b.n	8009ac8 <_dtoa_r+0x960>
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	9a08      	ldr	r2, [sp, #32]
 8009c50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d043      	beq.n	8009ce0 <_dtoa_r+0xb78>
 8009c58:	4651      	mov	r1, sl
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	220a      	movs	r2, #10
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f000 f9d6 	bl	800a010 <__multadd>
 8009c64:	45b8      	cmp	r8, r7
 8009c66:	4682      	mov	sl, r0
 8009c68:	f04f 0300 	mov.w	r3, #0
 8009c6c:	f04f 020a 	mov.w	r2, #10
 8009c70:	4641      	mov	r1, r8
 8009c72:	4620      	mov	r0, r4
 8009c74:	d107      	bne.n	8009c86 <_dtoa_r+0xb1e>
 8009c76:	f000 f9cb 	bl	800a010 <__multadd>
 8009c7a:	4680      	mov	r8, r0
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	3301      	adds	r3, #1
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	e775      	b.n	8009b72 <_dtoa_r+0xa0a>
 8009c86:	f000 f9c3 	bl	800a010 <__multadd>
 8009c8a:	4639      	mov	r1, r7
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	2300      	movs	r3, #0
 8009c90:	220a      	movs	r2, #10
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 f9bc 	bl	800a010 <__multadd>
 8009c98:	4607      	mov	r7, r0
 8009c9a:	e7f0      	b.n	8009c7e <_dtoa_r+0xb16>
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	9d00      	ldr	r5, [sp, #0]
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	4650      	mov	r0, sl
 8009ca6:	f7ff f9d7 	bl	8009058 <quorem>
 8009caa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009cae:	9b00      	ldr	r3, [sp, #0]
 8009cb0:	f805 9b01 	strb.w	r9, [r5], #1
 8009cb4:	1aea      	subs	r2, r5, r3
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	dd07      	ble.n	8009ccc <_dtoa_r+0xb64>
 8009cbc:	4651      	mov	r1, sl
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	220a      	movs	r2, #10
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 f9a4 	bl	800a010 <__multadd>
 8009cc8:	4682      	mov	sl, r0
 8009cca:	e7ea      	b.n	8009ca2 <_dtoa_r+0xb3a>
 8009ccc:	9b01      	ldr	r3, [sp, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bfc8      	it	gt
 8009cd2:	461d      	movgt	r5, r3
 8009cd4:	9b00      	ldr	r3, [sp, #0]
 8009cd6:	bfd8      	it	le
 8009cd8:	2501      	movle	r5, #1
 8009cda:	441d      	add	r5, r3
 8009cdc:	f04f 0800 	mov.w	r8, #0
 8009ce0:	4651      	mov	r1, sl
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 fb8b 	bl	800a400 <__lshift>
 8009cea:	4631      	mov	r1, r6
 8009cec:	4682      	mov	sl, r0
 8009cee:	f000 fbf3 	bl	800a4d8 <__mcmp>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	dc96      	bgt.n	8009c24 <_dtoa_r+0xabc>
 8009cf6:	d102      	bne.n	8009cfe <_dtoa_r+0xb96>
 8009cf8:	f019 0f01 	tst.w	r9, #1
 8009cfc:	d192      	bne.n	8009c24 <_dtoa_r+0xabc>
 8009cfe:	462b      	mov	r3, r5
 8009d00:	461d      	mov	r5, r3
 8009d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d06:	2a30      	cmp	r2, #48	; 0x30
 8009d08:	d0fa      	beq.n	8009d00 <_dtoa_r+0xb98>
 8009d0a:	e6dd      	b.n	8009ac8 <_dtoa_r+0x960>
 8009d0c:	9a00      	ldr	r2, [sp, #0]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d189      	bne.n	8009c26 <_dtoa_r+0xabe>
 8009d12:	f10b 0b01 	add.w	fp, fp, #1
 8009d16:	2331      	movs	r3, #49	; 0x31
 8009d18:	e796      	b.n	8009c48 <_dtoa_r+0xae0>
 8009d1a:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <_dtoa_r+0xbdc>)
 8009d1c:	f7ff ba99 	b.w	8009252 <_dtoa_r+0xea>
 8009d20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f47f aa6d 	bne.w	8009202 <_dtoa_r+0x9a>
 8009d28:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <_dtoa_r+0xbe0>)
 8009d2a:	f7ff ba92 	b.w	8009252 <_dtoa_r+0xea>
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	dcb5      	bgt.n	8009ca0 <_dtoa_r+0xb38>
 8009d34:	9b07      	ldr	r3, [sp, #28]
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	f73f aeb1 	bgt.w	8009a9e <_dtoa_r+0x936>
 8009d3c:	e7b0      	b.n	8009ca0 <_dtoa_r+0xb38>
 8009d3e:	bf00      	nop
 8009d40:	0800c909 	.word	0x0800c909
 8009d44:	0800c864 	.word	0x0800c864
 8009d48:	0800c88d 	.word	0x0800c88d

08009d4c <_free_r>:
 8009d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	d044      	beq.n	8009ddc <_free_r+0x90>
 8009d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d56:	9001      	str	r0, [sp, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d5e:	bfb8      	it	lt
 8009d60:	18e4      	addlt	r4, r4, r3
 8009d62:	f000 f8e7 	bl	8009f34 <__malloc_lock>
 8009d66:	4a1e      	ldr	r2, [pc, #120]	; (8009de0 <_free_r+0x94>)
 8009d68:	9801      	ldr	r0, [sp, #4]
 8009d6a:	6813      	ldr	r3, [r2, #0]
 8009d6c:	b933      	cbnz	r3, 8009d7c <_free_r+0x30>
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	6014      	str	r4, [r2, #0]
 8009d72:	b003      	add	sp, #12
 8009d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d78:	f000 b8e2 	b.w	8009f40 <__malloc_unlock>
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	d908      	bls.n	8009d92 <_free_r+0x46>
 8009d80:	6825      	ldr	r5, [r4, #0]
 8009d82:	1961      	adds	r1, r4, r5
 8009d84:	428b      	cmp	r3, r1
 8009d86:	bf01      	itttt	eq
 8009d88:	6819      	ldreq	r1, [r3, #0]
 8009d8a:	685b      	ldreq	r3, [r3, #4]
 8009d8c:	1949      	addeq	r1, r1, r5
 8009d8e:	6021      	streq	r1, [r4, #0]
 8009d90:	e7ed      	b.n	8009d6e <_free_r+0x22>
 8009d92:	461a      	mov	r2, r3
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	b10b      	cbz	r3, 8009d9c <_free_r+0x50>
 8009d98:	42a3      	cmp	r3, r4
 8009d9a:	d9fa      	bls.n	8009d92 <_free_r+0x46>
 8009d9c:	6811      	ldr	r1, [r2, #0]
 8009d9e:	1855      	adds	r5, r2, r1
 8009da0:	42a5      	cmp	r5, r4
 8009da2:	d10b      	bne.n	8009dbc <_free_r+0x70>
 8009da4:	6824      	ldr	r4, [r4, #0]
 8009da6:	4421      	add	r1, r4
 8009da8:	1854      	adds	r4, r2, r1
 8009daa:	42a3      	cmp	r3, r4
 8009dac:	6011      	str	r1, [r2, #0]
 8009dae:	d1e0      	bne.n	8009d72 <_free_r+0x26>
 8009db0:	681c      	ldr	r4, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	6053      	str	r3, [r2, #4]
 8009db6:	440c      	add	r4, r1
 8009db8:	6014      	str	r4, [r2, #0]
 8009dba:	e7da      	b.n	8009d72 <_free_r+0x26>
 8009dbc:	d902      	bls.n	8009dc4 <_free_r+0x78>
 8009dbe:	230c      	movs	r3, #12
 8009dc0:	6003      	str	r3, [r0, #0]
 8009dc2:	e7d6      	b.n	8009d72 <_free_r+0x26>
 8009dc4:	6825      	ldr	r5, [r4, #0]
 8009dc6:	1961      	adds	r1, r4, r5
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf04      	itt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	bf04      	itt	eq
 8009dd4:	1949      	addeq	r1, r1, r5
 8009dd6:	6021      	streq	r1, [r4, #0]
 8009dd8:	6054      	str	r4, [r2, #4]
 8009dda:	e7ca      	b.n	8009d72 <_free_r+0x26>
 8009ddc:	b003      	add	sp, #12
 8009dde:	bd30      	pop	{r4, r5, pc}
 8009de0:	20000620 	.word	0x20000620

08009de4 <malloc>:
 8009de4:	4b02      	ldr	r3, [pc, #8]	; (8009df0 <malloc+0xc>)
 8009de6:	4601      	mov	r1, r0
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	f000 b823 	b.w	8009e34 <_malloc_r>
 8009dee:	bf00      	nop
 8009df0:	20000064 	.word	0x20000064

08009df4 <sbrk_aligned>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	4e0e      	ldr	r6, [pc, #56]	; (8009e30 <sbrk_aligned+0x3c>)
 8009df8:	460c      	mov	r4, r1
 8009dfa:	6831      	ldr	r1, [r6, #0]
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	b911      	cbnz	r1, 8009e06 <sbrk_aligned+0x12>
 8009e00:	f001 fff4 	bl	800bdec <_sbrk_r>
 8009e04:	6030      	str	r0, [r6, #0]
 8009e06:	4621      	mov	r1, r4
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f001 ffef 	bl	800bdec <_sbrk_r>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d00a      	beq.n	8009e28 <sbrk_aligned+0x34>
 8009e12:	1cc4      	adds	r4, r0, #3
 8009e14:	f024 0403 	bic.w	r4, r4, #3
 8009e18:	42a0      	cmp	r0, r4
 8009e1a:	d007      	beq.n	8009e2c <sbrk_aligned+0x38>
 8009e1c:	1a21      	subs	r1, r4, r0
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f001 ffe4 	bl	800bdec <_sbrk_r>
 8009e24:	3001      	adds	r0, #1
 8009e26:	d101      	bne.n	8009e2c <sbrk_aligned+0x38>
 8009e28:	f04f 34ff 	mov.w	r4, #4294967295
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	20000624 	.word	0x20000624

08009e34 <_malloc_r>:
 8009e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e38:	1ccd      	adds	r5, r1, #3
 8009e3a:	f025 0503 	bic.w	r5, r5, #3
 8009e3e:	3508      	adds	r5, #8
 8009e40:	2d0c      	cmp	r5, #12
 8009e42:	bf38      	it	cc
 8009e44:	250c      	movcc	r5, #12
 8009e46:	2d00      	cmp	r5, #0
 8009e48:	4607      	mov	r7, r0
 8009e4a:	db01      	blt.n	8009e50 <_malloc_r+0x1c>
 8009e4c:	42a9      	cmp	r1, r5
 8009e4e:	d905      	bls.n	8009e5c <_malloc_r+0x28>
 8009e50:	230c      	movs	r3, #12
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	2600      	movs	r6, #0
 8009e56:	4630      	mov	r0, r6
 8009e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009f30 <_malloc_r+0xfc>
 8009e60:	f000 f868 	bl	8009f34 <__malloc_lock>
 8009e64:	f8d8 3000 	ldr.w	r3, [r8]
 8009e68:	461c      	mov	r4, r3
 8009e6a:	bb5c      	cbnz	r4, 8009ec4 <_malloc_r+0x90>
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f7ff ffc0 	bl	8009df4 <sbrk_aligned>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	4604      	mov	r4, r0
 8009e78:	d155      	bne.n	8009f26 <_malloc_r+0xf2>
 8009e7a:	f8d8 4000 	ldr.w	r4, [r8]
 8009e7e:	4626      	mov	r6, r4
 8009e80:	2e00      	cmp	r6, #0
 8009e82:	d145      	bne.n	8009f10 <_malloc_r+0xdc>
 8009e84:	2c00      	cmp	r4, #0
 8009e86:	d048      	beq.n	8009f1a <_malloc_r+0xe6>
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	eb04 0903 	add.w	r9, r4, r3
 8009e92:	f001 ffab 	bl	800bdec <_sbrk_r>
 8009e96:	4581      	cmp	r9, r0
 8009e98:	d13f      	bne.n	8009f1a <_malloc_r+0xe6>
 8009e9a:	6821      	ldr	r1, [r4, #0]
 8009e9c:	1a6d      	subs	r5, r5, r1
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7ff ffa7 	bl	8009df4 <sbrk_aligned>
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	d037      	beq.n	8009f1a <_malloc_r+0xe6>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	442b      	add	r3, r5
 8009eae:	6023      	str	r3, [r4, #0]
 8009eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d038      	beq.n	8009f2a <_malloc_r+0xf6>
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	42a2      	cmp	r2, r4
 8009ebc:	d12b      	bne.n	8009f16 <_malloc_r+0xe2>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	605a      	str	r2, [r3, #4]
 8009ec2:	e00f      	b.n	8009ee4 <_malloc_r+0xb0>
 8009ec4:	6822      	ldr	r2, [r4, #0]
 8009ec6:	1b52      	subs	r2, r2, r5
 8009ec8:	d41f      	bmi.n	8009f0a <_malloc_r+0xd6>
 8009eca:	2a0b      	cmp	r2, #11
 8009ecc:	d917      	bls.n	8009efe <_malloc_r+0xca>
 8009ece:	1961      	adds	r1, r4, r5
 8009ed0:	42a3      	cmp	r3, r4
 8009ed2:	6025      	str	r5, [r4, #0]
 8009ed4:	bf18      	it	ne
 8009ed6:	6059      	strne	r1, [r3, #4]
 8009ed8:	6863      	ldr	r3, [r4, #4]
 8009eda:	bf08      	it	eq
 8009edc:	f8c8 1000 	streq.w	r1, [r8]
 8009ee0:	5162      	str	r2, [r4, r5]
 8009ee2:	604b      	str	r3, [r1, #4]
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	f104 060b 	add.w	r6, r4, #11
 8009eea:	f000 f829 	bl	8009f40 <__malloc_unlock>
 8009eee:	f026 0607 	bic.w	r6, r6, #7
 8009ef2:	1d23      	adds	r3, r4, #4
 8009ef4:	1af2      	subs	r2, r6, r3
 8009ef6:	d0ae      	beq.n	8009e56 <_malloc_r+0x22>
 8009ef8:	1b9b      	subs	r3, r3, r6
 8009efa:	50a3      	str	r3, [r4, r2]
 8009efc:	e7ab      	b.n	8009e56 <_malloc_r+0x22>
 8009efe:	42a3      	cmp	r3, r4
 8009f00:	6862      	ldr	r2, [r4, #4]
 8009f02:	d1dd      	bne.n	8009ec0 <_malloc_r+0x8c>
 8009f04:	f8c8 2000 	str.w	r2, [r8]
 8009f08:	e7ec      	b.n	8009ee4 <_malloc_r+0xb0>
 8009f0a:	4623      	mov	r3, r4
 8009f0c:	6864      	ldr	r4, [r4, #4]
 8009f0e:	e7ac      	b.n	8009e6a <_malloc_r+0x36>
 8009f10:	4634      	mov	r4, r6
 8009f12:	6876      	ldr	r6, [r6, #4]
 8009f14:	e7b4      	b.n	8009e80 <_malloc_r+0x4c>
 8009f16:	4613      	mov	r3, r2
 8009f18:	e7cc      	b.n	8009eb4 <_malloc_r+0x80>
 8009f1a:	230c      	movs	r3, #12
 8009f1c:	603b      	str	r3, [r7, #0]
 8009f1e:	4638      	mov	r0, r7
 8009f20:	f000 f80e 	bl	8009f40 <__malloc_unlock>
 8009f24:	e797      	b.n	8009e56 <_malloc_r+0x22>
 8009f26:	6025      	str	r5, [r4, #0]
 8009f28:	e7dc      	b.n	8009ee4 <_malloc_r+0xb0>
 8009f2a:	605b      	str	r3, [r3, #4]
 8009f2c:	deff      	udf	#255	; 0xff
 8009f2e:	bf00      	nop
 8009f30:	20000620 	.word	0x20000620

08009f34 <__malloc_lock>:
 8009f34:	4801      	ldr	r0, [pc, #4]	; (8009f3c <__malloc_lock+0x8>)
 8009f36:	f7ff b886 	b.w	8009046 <__retarget_lock_acquire_recursive>
 8009f3a:	bf00      	nop
 8009f3c:	2000061c 	.word	0x2000061c

08009f40 <__malloc_unlock>:
 8009f40:	4801      	ldr	r0, [pc, #4]	; (8009f48 <__malloc_unlock+0x8>)
 8009f42:	f7ff b881 	b.w	8009048 <__retarget_lock_release_recursive>
 8009f46:	bf00      	nop
 8009f48:	2000061c 	.word	0x2000061c

08009f4c <_Balloc>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	69c6      	ldr	r6, [r0, #28]
 8009f50:	4604      	mov	r4, r0
 8009f52:	460d      	mov	r5, r1
 8009f54:	b976      	cbnz	r6, 8009f74 <_Balloc+0x28>
 8009f56:	2010      	movs	r0, #16
 8009f58:	f7ff ff44 	bl	8009de4 <malloc>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	61e0      	str	r0, [r4, #28]
 8009f60:	b920      	cbnz	r0, 8009f6c <_Balloc+0x20>
 8009f62:	4b18      	ldr	r3, [pc, #96]	; (8009fc4 <_Balloc+0x78>)
 8009f64:	4818      	ldr	r0, [pc, #96]	; (8009fc8 <_Balloc+0x7c>)
 8009f66:	216b      	movs	r1, #107	; 0x6b
 8009f68:	f001 ff66 	bl	800be38 <__assert_func>
 8009f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f70:	6006      	str	r6, [r0, #0]
 8009f72:	60c6      	str	r6, [r0, #12]
 8009f74:	69e6      	ldr	r6, [r4, #28]
 8009f76:	68f3      	ldr	r3, [r6, #12]
 8009f78:	b183      	cbz	r3, 8009f9c <_Balloc+0x50>
 8009f7a:	69e3      	ldr	r3, [r4, #28]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f82:	b9b8      	cbnz	r0, 8009fb4 <_Balloc+0x68>
 8009f84:	2101      	movs	r1, #1
 8009f86:	fa01 f605 	lsl.w	r6, r1, r5
 8009f8a:	1d72      	adds	r2, r6, #5
 8009f8c:	0092      	lsls	r2, r2, #2
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f001 ff70 	bl	800be74 <_calloc_r>
 8009f94:	b160      	cbz	r0, 8009fb0 <_Balloc+0x64>
 8009f96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f9a:	e00e      	b.n	8009fba <_Balloc+0x6e>
 8009f9c:	2221      	movs	r2, #33	; 0x21
 8009f9e:	2104      	movs	r1, #4
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f001 ff67 	bl	800be74 <_calloc_r>
 8009fa6:	69e3      	ldr	r3, [r4, #28]
 8009fa8:	60f0      	str	r0, [r6, #12]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e4      	bne.n	8009f7a <_Balloc+0x2e>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	6802      	ldr	r2, [r0, #0]
 8009fb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fc0:	e7f7      	b.n	8009fb2 <_Balloc+0x66>
 8009fc2:	bf00      	nop
 8009fc4:	0800c89a 	.word	0x0800c89a
 8009fc8:	0800c91a 	.word	0x0800c91a

08009fcc <_Bfree>:
 8009fcc:	b570      	push	{r4, r5, r6, lr}
 8009fce:	69c6      	ldr	r6, [r0, #28]
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	b976      	cbnz	r6, 8009ff4 <_Bfree+0x28>
 8009fd6:	2010      	movs	r0, #16
 8009fd8:	f7ff ff04 	bl	8009de4 <malloc>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	61e8      	str	r0, [r5, #28]
 8009fe0:	b920      	cbnz	r0, 8009fec <_Bfree+0x20>
 8009fe2:	4b09      	ldr	r3, [pc, #36]	; (800a008 <_Bfree+0x3c>)
 8009fe4:	4809      	ldr	r0, [pc, #36]	; (800a00c <_Bfree+0x40>)
 8009fe6:	218f      	movs	r1, #143	; 0x8f
 8009fe8:	f001 ff26 	bl	800be38 <__assert_func>
 8009fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ff0:	6006      	str	r6, [r0, #0]
 8009ff2:	60c6      	str	r6, [r0, #12]
 8009ff4:	b13c      	cbz	r4, 800a006 <_Bfree+0x3a>
 8009ff6:	69eb      	ldr	r3, [r5, #28]
 8009ff8:	6862      	ldr	r2, [r4, #4]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a000:	6021      	str	r1, [r4, #0]
 800a002:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a006:	bd70      	pop	{r4, r5, r6, pc}
 800a008:	0800c89a 	.word	0x0800c89a
 800a00c:	0800c91a 	.word	0x0800c91a

0800a010 <__multadd>:
 800a010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a014:	690d      	ldr	r5, [r1, #16]
 800a016:	4607      	mov	r7, r0
 800a018:	460c      	mov	r4, r1
 800a01a:	461e      	mov	r6, r3
 800a01c:	f101 0c14 	add.w	ip, r1, #20
 800a020:	2000      	movs	r0, #0
 800a022:	f8dc 3000 	ldr.w	r3, [ip]
 800a026:	b299      	uxth	r1, r3
 800a028:	fb02 6101 	mla	r1, r2, r1, r6
 800a02c:	0c1e      	lsrs	r6, r3, #16
 800a02e:	0c0b      	lsrs	r3, r1, #16
 800a030:	fb02 3306 	mla	r3, r2, r6, r3
 800a034:	b289      	uxth	r1, r1
 800a036:	3001      	adds	r0, #1
 800a038:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a03c:	4285      	cmp	r5, r0
 800a03e:	f84c 1b04 	str.w	r1, [ip], #4
 800a042:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a046:	dcec      	bgt.n	800a022 <__multadd+0x12>
 800a048:	b30e      	cbz	r6, 800a08e <__multadd+0x7e>
 800a04a:	68a3      	ldr	r3, [r4, #8]
 800a04c:	42ab      	cmp	r3, r5
 800a04e:	dc19      	bgt.n	800a084 <__multadd+0x74>
 800a050:	6861      	ldr	r1, [r4, #4]
 800a052:	4638      	mov	r0, r7
 800a054:	3101      	adds	r1, #1
 800a056:	f7ff ff79 	bl	8009f4c <_Balloc>
 800a05a:	4680      	mov	r8, r0
 800a05c:	b928      	cbnz	r0, 800a06a <__multadd+0x5a>
 800a05e:	4602      	mov	r2, r0
 800a060:	4b0c      	ldr	r3, [pc, #48]	; (800a094 <__multadd+0x84>)
 800a062:	480d      	ldr	r0, [pc, #52]	; (800a098 <__multadd+0x88>)
 800a064:	21ba      	movs	r1, #186	; 0xba
 800a066:	f001 fee7 	bl	800be38 <__assert_func>
 800a06a:	6922      	ldr	r2, [r4, #16]
 800a06c:	3202      	adds	r2, #2
 800a06e:	f104 010c 	add.w	r1, r4, #12
 800a072:	0092      	lsls	r2, r2, #2
 800a074:	300c      	adds	r0, #12
 800a076:	f001 fec9 	bl	800be0c <memcpy>
 800a07a:	4621      	mov	r1, r4
 800a07c:	4638      	mov	r0, r7
 800a07e:	f7ff ffa5 	bl	8009fcc <_Bfree>
 800a082:	4644      	mov	r4, r8
 800a084:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a088:	3501      	adds	r5, #1
 800a08a:	615e      	str	r6, [r3, #20]
 800a08c:	6125      	str	r5, [r4, #16]
 800a08e:	4620      	mov	r0, r4
 800a090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a094:	0800c909 	.word	0x0800c909
 800a098:	0800c91a 	.word	0x0800c91a

0800a09c <__s2b>:
 800a09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a0:	460c      	mov	r4, r1
 800a0a2:	4615      	mov	r5, r2
 800a0a4:	461f      	mov	r7, r3
 800a0a6:	2209      	movs	r2, #9
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	db09      	blt.n	800a0cc <__s2b+0x30>
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7ff ff47 	bl	8009f4c <_Balloc>
 800a0be:	b940      	cbnz	r0, 800a0d2 <__s2b+0x36>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	4b19      	ldr	r3, [pc, #100]	; (800a128 <__s2b+0x8c>)
 800a0c4:	4819      	ldr	r0, [pc, #100]	; (800a12c <__s2b+0x90>)
 800a0c6:	21d3      	movs	r1, #211	; 0xd3
 800a0c8:	f001 feb6 	bl	800be38 <__assert_func>
 800a0cc:	0052      	lsls	r2, r2, #1
 800a0ce:	3101      	adds	r1, #1
 800a0d0:	e7f0      	b.n	800a0b4 <__s2b+0x18>
 800a0d2:	9b08      	ldr	r3, [sp, #32]
 800a0d4:	6143      	str	r3, [r0, #20]
 800a0d6:	2d09      	cmp	r5, #9
 800a0d8:	f04f 0301 	mov.w	r3, #1
 800a0dc:	6103      	str	r3, [r0, #16]
 800a0de:	dd16      	ble.n	800a10e <__s2b+0x72>
 800a0e0:	f104 0909 	add.w	r9, r4, #9
 800a0e4:	46c8      	mov	r8, r9
 800a0e6:	442c      	add	r4, r5
 800a0e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	3b30      	subs	r3, #48	; 0x30
 800a0f0:	220a      	movs	r2, #10
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f7ff ff8c 	bl	800a010 <__multadd>
 800a0f8:	45a0      	cmp	r8, r4
 800a0fa:	d1f5      	bne.n	800a0e8 <__s2b+0x4c>
 800a0fc:	f1a5 0408 	sub.w	r4, r5, #8
 800a100:	444c      	add	r4, r9
 800a102:	1b2d      	subs	r5, r5, r4
 800a104:	1963      	adds	r3, r4, r5
 800a106:	42bb      	cmp	r3, r7
 800a108:	db04      	blt.n	800a114 <__s2b+0x78>
 800a10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a10e:	340a      	adds	r4, #10
 800a110:	2509      	movs	r5, #9
 800a112:	e7f6      	b.n	800a102 <__s2b+0x66>
 800a114:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a118:	4601      	mov	r1, r0
 800a11a:	3b30      	subs	r3, #48	; 0x30
 800a11c:	220a      	movs	r2, #10
 800a11e:	4630      	mov	r0, r6
 800a120:	f7ff ff76 	bl	800a010 <__multadd>
 800a124:	e7ee      	b.n	800a104 <__s2b+0x68>
 800a126:	bf00      	nop
 800a128:	0800c909 	.word	0x0800c909
 800a12c:	0800c91a 	.word	0x0800c91a

0800a130 <__hi0bits>:
 800a130:	0c03      	lsrs	r3, r0, #16
 800a132:	041b      	lsls	r3, r3, #16
 800a134:	b9d3      	cbnz	r3, 800a16c <__hi0bits+0x3c>
 800a136:	0400      	lsls	r0, r0, #16
 800a138:	2310      	movs	r3, #16
 800a13a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a13e:	bf04      	itt	eq
 800a140:	0200      	lsleq	r0, r0, #8
 800a142:	3308      	addeq	r3, #8
 800a144:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a148:	bf04      	itt	eq
 800a14a:	0100      	lsleq	r0, r0, #4
 800a14c:	3304      	addeq	r3, #4
 800a14e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a152:	bf04      	itt	eq
 800a154:	0080      	lsleq	r0, r0, #2
 800a156:	3302      	addeq	r3, #2
 800a158:	2800      	cmp	r0, #0
 800a15a:	db05      	blt.n	800a168 <__hi0bits+0x38>
 800a15c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a160:	f103 0301 	add.w	r3, r3, #1
 800a164:	bf08      	it	eq
 800a166:	2320      	moveq	r3, #32
 800a168:	4618      	mov	r0, r3
 800a16a:	4770      	bx	lr
 800a16c:	2300      	movs	r3, #0
 800a16e:	e7e4      	b.n	800a13a <__hi0bits+0xa>

0800a170 <__lo0bits>:
 800a170:	6803      	ldr	r3, [r0, #0]
 800a172:	f013 0207 	ands.w	r2, r3, #7
 800a176:	d00c      	beq.n	800a192 <__lo0bits+0x22>
 800a178:	07d9      	lsls	r1, r3, #31
 800a17a:	d422      	bmi.n	800a1c2 <__lo0bits+0x52>
 800a17c:	079a      	lsls	r2, r3, #30
 800a17e:	bf49      	itett	mi
 800a180:	085b      	lsrmi	r3, r3, #1
 800a182:	089b      	lsrpl	r3, r3, #2
 800a184:	6003      	strmi	r3, [r0, #0]
 800a186:	2201      	movmi	r2, #1
 800a188:	bf5c      	itt	pl
 800a18a:	6003      	strpl	r3, [r0, #0]
 800a18c:	2202      	movpl	r2, #2
 800a18e:	4610      	mov	r0, r2
 800a190:	4770      	bx	lr
 800a192:	b299      	uxth	r1, r3
 800a194:	b909      	cbnz	r1, 800a19a <__lo0bits+0x2a>
 800a196:	0c1b      	lsrs	r3, r3, #16
 800a198:	2210      	movs	r2, #16
 800a19a:	b2d9      	uxtb	r1, r3
 800a19c:	b909      	cbnz	r1, 800a1a2 <__lo0bits+0x32>
 800a19e:	3208      	adds	r2, #8
 800a1a0:	0a1b      	lsrs	r3, r3, #8
 800a1a2:	0719      	lsls	r1, r3, #28
 800a1a4:	bf04      	itt	eq
 800a1a6:	091b      	lsreq	r3, r3, #4
 800a1a8:	3204      	addeq	r2, #4
 800a1aa:	0799      	lsls	r1, r3, #30
 800a1ac:	bf04      	itt	eq
 800a1ae:	089b      	lsreq	r3, r3, #2
 800a1b0:	3202      	addeq	r2, #2
 800a1b2:	07d9      	lsls	r1, r3, #31
 800a1b4:	d403      	bmi.n	800a1be <__lo0bits+0x4e>
 800a1b6:	085b      	lsrs	r3, r3, #1
 800a1b8:	f102 0201 	add.w	r2, r2, #1
 800a1bc:	d003      	beq.n	800a1c6 <__lo0bits+0x56>
 800a1be:	6003      	str	r3, [r0, #0]
 800a1c0:	e7e5      	b.n	800a18e <__lo0bits+0x1e>
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	e7e3      	b.n	800a18e <__lo0bits+0x1e>
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	e7e1      	b.n	800a18e <__lo0bits+0x1e>
	...

0800a1cc <__i2b>:
 800a1cc:	b510      	push	{r4, lr}
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	f7ff febb 	bl	8009f4c <_Balloc>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	b928      	cbnz	r0, 800a1e6 <__i2b+0x1a>
 800a1da:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <__i2b+0x24>)
 800a1dc:	4805      	ldr	r0, [pc, #20]	; (800a1f4 <__i2b+0x28>)
 800a1de:	f240 1145 	movw	r1, #325	; 0x145
 800a1e2:	f001 fe29 	bl	800be38 <__assert_func>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	6144      	str	r4, [r0, #20]
 800a1ea:	6103      	str	r3, [r0, #16]
 800a1ec:	bd10      	pop	{r4, pc}
 800a1ee:	bf00      	nop
 800a1f0:	0800c909 	.word	0x0800c909
 800a1f4:	0800c91a 	.word	0x0800c91a

0800a1f8 <__multiply>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	4691      	mov	r9, r2
 800a1fe:	690a      	ldr	r2, [r1, #16]
 800a200:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a204:	429a      	cmp	r2, r3
 800a206:	bfb8      	it	lt
 800a208:	460b      	movlt	r3, r1
 800a20a:	460c      	mov	r4, r1
 800a20c:	bfbc      	itt	lt
 800a20e:	464c      	movlt	r4, r9
 800a210:	4699      	movlt	r9, r3
 800a212:	6927      	ldr	r7, [r4, #16]
 800a214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a218:	68a3      	ldr	r3, [r4, #8]
 800a21a:	6861      	ldr	r1, [r4, #4]
 800a21c:	eb07 060a 	add.w	r6, r7, sl
 800a220:	42b3      	cmp	r3, r6
 800a222:	b085      	sub	sp, #20
 800a224:	bfb8      	it	lt
 800a226:	3101      	addlt	r1, #1
 800a228:	f7ff fe90 	bl	8009f4c <_Balloc>
 800a22c:	b930      	cbnz	r0, 800a23c <__multiply+0x44>
 800a22e:	4602      	mov	r2, r0
 800a230:	4b44      	ldr	r3, [pc, #272]	; (800a344 <__multiply+0x14c>)
 800a232:	4845      	ldr	r0, [pc, #276]	; (800a348 <__multiply+0x150>)
 800a234:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a238:	f001 fdfe 	bl	800be38 <__assert_func>
 800a23c:	f100 0514 	add.w	r5, r0, #20
 800a240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a244:	462b      	mov	r3, r5
 800a246:	2200      	movs	r2, #0
 800a248:	4543      	cmp	r3, r8
 800a24a:	d321      	bcc.n	800a290 <__multiply+0x98>
 800a24c:	f104 0314 	add.w	r3, r4, #20
 800a250:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a254:	f109 0314 	add.w	r3, r9, #20
 800a258:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a25c:	9202      	str	r2, [sp, #8]
 800a25e:	1b3a      	subs	r2, r7, r4
 800a260:	3a15      	subs	r2, #21
 800a262:	f022 0203 	bic.w	r2, r2, #3
 800a266:	3204      	adds	r2, #4
 800a268:	f104 0115 	add.w	r1, r4, #21
 800a26c:	428f      	cmp	r7, r1
 800a26e:	bf38      	it	cc
 800a270:	2204      	movcc	r2, #4
 800a272:	9201      	str	r2, [sp, #4]
 800a274:	9a02      	ldr	r2, [sp, #8]
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d80c      	bhi.n	800a296 <__multiply+0x9e>
 800a27c:	2e00      	cmp	r6, #0
 800a27e:	dd03      	ble.n	800a288 <__multiply+0x90>
 800a280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a284:	2b00      	cmp	r3, #0
 800a286:	d05b      	beq.n	800a340 <__multiply+0x148>
 800a288:	6106      	str	r6, [r0, #16]
 800a28a:	b005      	add	sp, #20
 800a28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a290:	f843 2b04 	str.w	r2, [r3], #4
 800a294:	e7d8      	b.n	800a248 <__multiply+0x50>
 800a296:	f8b3 a000 	ldrh.w	sl, [r3]
 800a29a:	f1ba 0f00 	cmp.w	sl, #0
 800a29e:	d024      	beq.n	800a2ea <__multiply+0xf2>
 800a2a0:	f104 0e14 	add.w	lr, r4, #20
 800a2a4:	46a9      	mov	r9, r5
 800a2a6:	f04f 0c00 	mov.w	ip, #0
 800a2aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a2ae:	f8d9 1000 	ldr.w	r1, [r9]
 800a2b2:	fa1f fb82 	uxth.w	fp, r2
 800a2b6:	b289      	uxth	r1, r1
 800a2b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a2bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a2c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a2c4:	4461      	add	r1, ip
 800a2c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800a2ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2d2:	b289      	uxth	r1, r1
 800a2d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2d8:	4577      	cmp	r7, lr
 800a2da:	f849 1b04 	str.w	r1, [r9], #4
 800a2de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2e2:	d8e2      	bhi.n	800a2aa <__multiply+0xb2>
 800a2e4:	9a01      	ldr	r2, [sp, #4]
 800a2e6:	f845 c002 	str.w	ip, [r5, r2]
 800a2ea:	9a03      	ldr	r2, [sp, #12]
 800a2ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	f1b9 0f00 	cmp.w	r9, #0
 800a2f6:	d021      	beq.n	800a33c <__multiply+0x144>
 800a2f8:	6829      	ldr	r1, [r5, #0]
 800a2fa:	f104 0c14 	add.w	ip, r4, #20
 800a2fe:	46ae      	mov	lr, r5
 800a300:	f04f 0a00 	mov.w	sl, #0
 800a304:	f8bc b000 	ldrh.w	fp, [ip]
 800a308:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a30c:	fb09 220b 	mla	r2, r9, fp, r2
 800a310:	4452      	add	r2, sl
 800a312:	b289      	uxth	r1, r1
 800a314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a318:	f84e 1b04 	str.w	r1, [lr], #4
 800a31c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a320:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a324:	f8be 1000 	ldrh.w	r1, [lr]
 800a328:	fb09 110a 	mla	r1, r9, sl, r1
 800a32c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a330:	4567      	cmp	r7, ip
 800a332:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a336:	d8e5      	bhi.n	800a304 <__multiply+0x10c>
 800a338:	9a01      	ldr	r2, [sp, #4]
 800a33a:	50a9      	str	r1, [r5, r2]
 800a33c:	3504      	adds	r5, #4
 800a33e:	e799      	b.n	800a274 <__multiply+0x7c>
 800a340:	3e01      	subs	r6, #1
 800a342:	e79b      	b.n	800a27c <__multiply+0x84>
 800a344:	0800c909 	.word	0x0800c909
 800a348:	0800c91a 	.word	0x0800c91a

0800a34c <__pow5mult>:
 800a34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a350:	4615      	mov	r5, r2
 800a352:	f012 0203 	ands.w	r2, r2, #3
 800a356:	4606      	mov	r6, r0
 800a358:	460f      	mov	r7, r1
 800a35a:	d007      	beq.n	800a36c <__pow5mult+0x20>
 800a35c:	4c25      	ldr	r4, [pc, #148]	; (800a3f4 <__pow5mult+0xa8>)
 800a35e:	3a01      	subs	r2, #1
 800a360:	2300      	movs	r3, #0
 800a362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a366:	f7ff fe53 	bl	800a010 <__multadd>
 800a36a:	4607      	mov	r7, r0
 800a36c:	10ad      	asrs	r5, r5, #2
 800a36e:	d03d      	beq.n	800a3ec <__pow5mult+0xa0>
 800a370:	69f4      	ldr	r4, [r6, #28]
 800a372:	b97c      	cbnz	r4, 800a394 <__pow5mult+0x48>
 800a374:	2010      	movs	r0, #16
 800a376:	f7ff fd35 	bl	8009de4 <malloc>
 800a37a:	4602      	mov	r2, r0
 800a37c:	61f0      	str	r0, [r6, #28]
 800a37e:	b928      	cbnz	r0, 800a38c <__pow5mult+0x40>
 800a380:	4b1d      	ldr	r3, [pc, #116]	; (800a3f8 <__pow5mult+0xac>)
 800a382:	481e      	ldr	r0, [pc, #120]	; (800a3fc <__pow5mult+0xb0>)
 800a384:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a388:	f001 fd56 	bl	800be38 <__assert_func>
 800a38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a390:	6004      	str	r4, [r0, #0]
 800a392:	60c4      	str	r4, [r0, #12]
 800a394:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a39c:	b94c      	cbnz	r4, 800a3b2 <__pow5mult+0x66>
 800a39e:	f240 2171 	movw	r1, #625	; 0x271
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7ff ff12 	bl	800a1cc <__i2b>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	6003      	str	r3, [r0, #0]
 800a3b2:	f04f 0900 	mov.w	r9, #0
 800a3b6:	07eb      	lsls	r3, r5, #31
 800a3b8:	d50a      	bpl.n	800a3d0 <__pow5mult+0x84>
 800a3ba:	4639      	mov	r1, r7
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f7ff ff1a 	bl	800a1f8 <__multiply>
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	4680      	mov	r8, r0
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7ff fdff 	bl	8009fcc <_Bfree>
 800a3ce:	4647      	mov	r7, r8
 800a3d0:	106d      	asrs	r5, r5, #1
 800a3d2:	d00b      	beq.n	800a3ec <__pow5mult+0xa0>
 800a3d4:	6820      	ldr	r0, [r4, #0]
 800a3d6:	b938      	cbnz	r0, 800a3e8 <__pow5mult+0x9c>
 800a3d8:	4622      	mov	r2, r4
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4630      	mov	r0, r6
 800a3de:	f7ff ff0b 	bl	800a1f8 <__multiply>
 800a3e2:	6020      	str	r0, [r4, #0]
 800a3e4:	f8c0 9000 	str.w	r9, [r0]
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	e7e4      	b.n	800a3b6 <__pow5mult+0x6a>
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0800ca68 	.word	0x0800ca68
 800a3f8:	0800c89a 	.word	0x0800c89a
 800a3fc:	0800c91a 	.word	0x0800c91a

0800a400 <__lshift>:
 800a400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a404:	460c      	mov	r4, r1
 800a406:	6849      	ldr	r1, [r1, #4]
 800a408:	6923      	ldr	r3, [r4, #16]
 800a40a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a40e:	68a3      	ldr	r3, [r4, #8]
 800a410:	4607      	mov	r7, r0
 800a412:	4691      	mov	r9, r2
 800a414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a418:	f108 0601 	add.w	r6, r8, #1
 800a41c:	42b3      	cmp	r3, r6
 800a41e:	db0b      	blt.n	800a438 <__lshift+0x38>
 800a420:	4638      	mov	r0, r7
 800a422:	f7ff fd93 	bl	8009f4c <_Balloc>
 800a426:	4605      	mov	r5, r0
 800a428:	b948      	cbnz	r0, 800a43e <__lshift+0x3e>
 800a42a:	4602      	mov	r2, r0
 800a42c:	4b28      	ldr	r3, [pc, #160]	; (800a4d0 <__lshift+0xd0>)
 800a42e:	4829      	ldr	r0, [pc, #164]	; (800a4d4 <__lshift+0xd4>)
 800a430:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a434:	f001 fd00 	bl	800be38 <__assert_func>
 800a438:	3101      	adds	r1, #1
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	e7ee      	b.n	800a41c <__lshift+0x1c>
 800a43e:	2300      	movs	r3, #0
 800a440:	f100 0114 	add.w	r1, r0, #20
 800a444:	f100 0210 	add.w	r2, r0, #16
 800a448:	4618      	mov	r0, r3
 800a44a:	4553      	cmp	r3, sl
 800a44c:	db33      	blt.n	800a4b6 <__lshift+0xb6>
 800a44e:	6920      	ldr	r0, [r4, #16]
 800a450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a454:	f104 0314 	add.w	r3, r4, #20
 800a458:	f019 091f 	ands.w	r9, r9, #31
 800a45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a464:	d02b      	beq.n	800a4be <__lshift+0xbe>
 800a466:	f1c9 0e20 	rsb	lr, r9, #32
 800a46a:	468a      	mov	sl, r1
 800a46c:	2200      	movs	r2, #0
 800a46e:	6818      	ldr	r0, [r3, #0]
 800a470:	fa00 f009 	lsl.w	r0, r0, r9
 800a474:	4310      	orrs	r0, r2
 800a476:	f84a 0b04 	str.w	r0, [sl], #4
 800a47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a47e:	459c      	cmp	ip, r3
 800a480:	fa22 f20e 	lsr.w	r2, r2, lr
 800a484:	d8f3      	bhi.n	800a46e <__lshift+0x6e>
 800a486:	ebac 0304 	sub.w	r3, ip, r4
 800a48a:	3b15      	subs	r3, #21
 800a48c:	f023 0303 	bic.w	r3, r3, #3
 800a490:	3304      	adds	r3, #4
 800a492:	f104 0015 	add.w	r0, r4, #21
 800a496:	4584      	cmp	ip, r0
 800a498:	bf38      	it	cc
 800a49a:	2304      	movcc	r3, #4
 800a49c:	50ca      	str	r2, [r1, r3]
 800a49e:	b10a      	cbz	r2, 800a4a4 <__lshift+0xa4>
 800a4a0:	f108 0602 	add.w	r6, r8, #2
 800a4a4:	3e01      	subs	r6, #1
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	612e      	str	r6, [r5, #16]
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	f7ff fd8e 	bl	8009fcc <_Bfree>
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	e7c5      	b.n	800a44a <__lshift+0x4a>
 800a4be:	3904      	subs	r1, #4
 800a4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4c8:	459c      	cmp	ip, r3
 800a4ca:	d8f9      	bhi.n	800a4c0 <__lshift+0xc0>
 800a4cc:	e7ea      	b.n	800a4a4 <__lshift+0xa4>
 800a4ce:	bf00      	nop
 800a4d0:	0800c909 	.word	0x0800c909
 800a4d4:	0800c91a 	.word	0x0800c91a

0800a4d8 <__mcmp>:
 800a4d8:	b530      	push	{r4, r5, lr}
 800a4da:	6902      	ldr	r2, [r0, #16]
 800a4dc:	690c      	ldr	r4, [r1, #16]
 800a4de:	1b12      	subs	r2, r2, r4
 800a4e0:	d10e      	bne.n	800a500 <__mcmp+0x28>
 800a4e2:	f100 0314 	add.w	r3, r0, #20
 800a4e6:	3114      	adds	r1, #20
 800a4e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a4ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a4f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a4f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4f8:	42a5      	cmp	r5, r4
 800a4fa:	d003      	beq.n	800a504 <__mcmp+0x2c>
 800a4fc:	d305      	bcc.n	800a50a <__mcmp+0x32>
 800a4fe:	2201      	movs	r2, #1
 800a500:	4610      	mov	r0, r2
 800a502:	bd30      	pop	{r4, r5, pc}
 800a504:	4283      	cmp	r3, r0
 800a506:	d3f3      	bcc.n	800a4f0 <__mcmp+0x18>
 800a508:	e7fa      	b.n	800a500 <__mcmp+0x28>
 800a50a:	f04f 32ff 	mov.w	r2, #4294967295
 800a50e:	e7f7      	b.n	800a500 <__mcmp+0x28>

0800a510 <__mdiff>:
 800a510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	4606      	mov	r6, r0
 800a518:	4611      	mov	r1, r2
 800a51a:	4620      	mov	r0, r4
 800a51c:	4690      	mov	r8, r2
 800a51e:	f7ff ffdb 	bl	800a4d8 <__mcmp>
 800a522:	1e05      	subs	r5, r0, #0
 800a524:	d110      	bne.n	800a548 <__mdiff+0x38>
 800a526:	4629      	mov	r1, r5
 800a528:	4630      	mov	r0, r6
 800a52a:	f7ff fd0f 	bl	8009f4c <_Balloc>
 800a52e:	b930      	cbnz	r0, 800a53e <__mdiff+0x2e>
 800a530:	4b3a      	ldr	r3, [pc, #232]	; (800a61c <__mdiff+0x10c>)
 800a532:	4602      	mov	r2, r0
 800a534:	f240 2137 	movw	r1, #567	; 0x237
 800a538:	4839      	ldr	r0, [pc, #228]	; (800a620 <__mdiff+0x110>)
 800a53a:	f001 fc7d 	bl	800be38 <__assert_func>
 800a53e:	2301      	movs	r3, #1
 800a540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a548:	bfa4      	itt	ge
 800a54a:	4643      	movge	r3, r8
 800a54c:	46a0      	movge	r8, r4
 800a54e:	4630      	mov	r0, r6
 800a550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a554:	bfa6      	itte	ge
 800a556:	461c      	movge	r4, r3
 800a558:	2500      	movge	r5, #0
 800a55a:	2501      	movlt	r5, #1
 800a55c:	f7ff fcf6 	bl	8009f4c <_Balloc>
 800a560:	b920      	cbnz	r0, 800a56c <__mdiff+0x5c>
 800a562:	4b2e      	ldr	r3, [pc, #184]	; (800a61c <__mdiff+0x10c>)
 800a564:	4602      	mov	r2, r0
 800a566:	f240 2145 	movw	r1, #581	; 0x245
 800a56a:	e7e5      	b.n	800a538 <__mdiff+0x28>
 800a56c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a570:	6926      	ldr	r6, [r4, #16]
 800a572:	60c5      	str	r5, [r0, #12]
 800a574:	f104 0914 	add.w	r9, r4, #20
 800a578:	f108 0514 	add.w	r5, r8, #20
 800a57c:	f100 0e14 	add.w	lr, r0, #20
 800a580:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a584:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a588:	f108 0210 	add.w	r2, r8, #16
 800a58c:	46f2      	mov	sl, lr
 800a58e:	2100      	movs	r1, #0
 800a590:	f859 3b04 	ldr.w	r3, [r9], #4
 800a594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a598:	fa11 f88b 	uxtah	r8, r1, fp
 800a59c:	b299      	uxth	r1, r3
 800a59e:	0c1b      	lsrs	r3, r3, #16
 800a5a0:	eba8 0801 	sub.w	r8, r8, r1
 800a5a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a5ac:	fa1f f888 	uxth.w	r8, r8
 800a5b0:	1419      	asrs	r1, r3, #16
 800a5b2:	454e      	cmp	r6, r9
 800a5b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a5b8:	f84a 3b04 	str.w	r3, [sl], #4
 800a5bc:	d8e8      	bhi.n	800a590 <__mdiff+0x80>
 800a5be:	1b33      	subs	r3, r6, r4
 800a5c0:	3b15      	subs	r3, #21
 800a5c2:	f023 0303 	bic.w	r3, r3, #3
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	3415      	adds	r4, #21
 800a5ca:	42a6      	cmp	r6, r4
 800a5cc:	bf38      	it	cc
 800a5ce:	2304      	movcc	r3, #4
 800a5d0:	441d      	add	r5, r3
 800a5d2:	4473      	add	r3, lr
 800a5d4:	469e      	mov	lr, r3
 800a5d6:	462e      	mov	r6, r5
 800a5d8:	4566      	cmp	r6, ip
 800a5da:	d30e      	bcc.n	800a5fa <__mdiff+0xea>
 800a5dc:	f10c 0203 	add.w	r2, ip, #3
 800a5e0:	1b52      	subs	r2, r2, r5
 800a5e2:	f022 0203 	bic.w	r2, r2, #3
 800a5e6:	3d03      	subs	r5, #3
 800a5e8:	45ac      	cmp	ip, r5
 800a5ea:	bf38      	it	cc
 800a5ec:	2200      	movcc	r2, #0
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a5f4:	b17a      	cbz	r2, 800a616 <__mdiff+0x106>
 800a5f6:	6107      	str	r7, [r0, #16]
 800a5f8:	e7a4      	b.n	800a544 <__mdiff+0x34>
 800a5fa:	f856 8b04 	ldr.w	r8, [r6], #4
 800a5fe:	fa11 f288 	uxtah	r2, r1, r8
 800a602:	1414      	asrs	r4, r2, #16
 800a604:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a608:	b292      	uxth	r2, r2
 800a60a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a60e:	f84e 2b04 	str.w	r2, [lr], #4
 800a612:	1421      	asrs	r1, r4, #16
 800a614:	e7e0      	b.n	800a5d8 <__mdiff+0xc8>
 800a616:	3f01      	subs	r7, #1
 800a618:	e7ea      	b.n	800a5f0 <__mdiff+0xe0>
 800a61a:	bf00      	nop
 800a61c:	0800c909 	.word	0x0800c909
 800a620:	0800c91a 	.word	0x0800c91a

0800a624 <__ulp>:
 800a624:	b082      	sub	sp, #8
 800a626:	ed8d 0b00 	vstr	d0, [sp]
 800a62a:	9a01      	ldr	r2, [sp, #4]
 800a62c:	4b0f      	ldr	r3, [pc, #60]	; (800a66c <__ulp+0x48>)
 800a62e:	4013      	ands	r3, r2
 800a630:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a634:	2b00      	cmp	r3, #0
 800a636:	dc08      	bgt.n	800a64a <__ulp+0x26>
 800a638:	425b      	negs	r3, r3
 800a63a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a63e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a642:	da04      	bge.n	800a64e <__ulp+0x2a>
 800a644:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a648:	4113      	asrs	r3, r2
 800a64a:	2200      	movs	r2, #0
 800a64c:	e008      	b.n	800a660 <__ulp+0x3c>
 800a64e:	f1a2 0314 	sub.w	r3, r2, #20
 800a652:	2b1e      	cmp	r3, #30
 800a654:	bfda      	itte	le
 800a656:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a65a:	40da      	lsrle	r2, r3
 800a65c:	2201      	movgt	r2, #1
 800a65e:	2300      	movs	r3, #0
 800a660:	4619      	mov	r1, r3
 800a662:	4610      	mov	r0, r2
 800a664:	ec41 0b10 	vmov	d0, r0, r1
 800a668:	b002      	add	sp, #8
 800a66a:	4770      	bx	lr
 800a66c:	7ff00000 	.word	0x7ff00000

0800a670 <__b2d>:
 800a670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a674:	6906      	ldr	r6, [r0, #16]
 800a676:	f100 0814 	add.w	r8, r0, #20
 800a67a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a67e:	1f37      	subs	r7, r6, #4
 800a680:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a684:	4610      	mov	r0, r2
 800a686:	f7ff fd53 	bl	800a130 <__hi0bits>
 800a68a:	f1c0 0320 	rsb	r3, r0, #32
 800a68e:	280a      	cmp	r0, #10
 800a690:	600b      	str	r3, [r1, #0]
 800a692:	491b      	ldr	r1, [pc, #108]	; (800a700 <__b2d+0x90>)
 800a694:	dc15      	bgt.n	800a6c2 <__b2d+0x52>
 800a696:	f1c0 0c0b 	rsb	ip, r0, #11
 800a69a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a69e:	45b8      	cmp	r8, r7
 800a6a0:	ea43 0501 	orr.w	r5, r3, r1
 800a6a4:	bf34      	ite	cc
 800a6a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6aa:	2300      	movcs	r3, #0
 800a6ac:	3015      	adds	r0, #21
 800a6ae:	fa02 f000 	lsl.w	r0, r2, r0
 800a6b2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a6b6:	4303      	orrs	r3, r0
 800a6b8:	461c      	mov	r4, r3
 800a6ba:	ec45 4b10 	vmov	d0, r4, r5
 800a6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c2:	45b8      	cmp	r8, r7
 800a6c4:	bf3a      	itte	cc
 800a6c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6ca:	f1a6 0708 	subcc.w	r7, r6, #8
 800a6ce:	2300      	movcs	r3, #0
 800a6d0:	380b      	subs	r0, #11
 800a6d2:	d012      	beq.n	800a6fa <__b2d+0x8a>
 800a6d4:	f1c0 0120 	rsb	r1, r0, #32
 800a6d8:	fa23 f401 	lsr.w	r4, r3, r1
 800a6dc:	4082      	lsls	r2, r0
 800a6de:	4322      	orrs	r2, r4
 800a6e0:	4547      	cmp	r7, r8
 800a6e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a6e6:	bf8c      	ite	hi
 800a6e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a6ec:	2200      	movls	r2, #0
 800a6ee:	4083      	lsls	r3, r0
 800a6f0:	40ca      	lsrs	r2, r1
 800a6f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	e7de      	b.n	800a6b8 <__b2d+0x48>
 800a6fa:	ea42 0501 	orr.w	r5, r2, r1
 800a6fe:	e7db      	b.n	800a6b8 <__b2d+0x48>
 800a700:	3ff00000 	.word	0x3ff00000

0800a704 <__d2b>:
 800a704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a708:	460f      	mov	r7, r1
 800a70a:	2101      	movs	r1, #1
 800a70c:	ec59 8b10 	vmov	r8, r9, d0
 800a710:	4616      	mov	r6, r2
 800a712:	f7ff fc1b 	bl	8009f4c <_Balloc>
 800a716:	4604      	mov	r4, r0
 800a718:	b930      	cbnz	r0, 800a728 <__d2b+0x24>
 800a71a:	4602      	mov	r2, r0
 800a71c:	4b24      	ldr	r3, [pc, #144]	; (800a7b0 <__d2b+0xac>)
 800a71e:	4825      	ldr	r0, [pc, #148]	; (800a7b4 <__d2b+0xb0>)
 800a720:	f240 310f 	movw	r1, #783	; 0x30f
 800a724:	f001 fb88 	bl	800be38 <__assert_func>
 800a728:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a72c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a730:	bb2d      	cbnz	r5, 800a77e <__d2b+0x7a>
 800a732:	9301      	str	r3, [sp, #4]
 800a734:	f1b8 0300 	subs.w	r3, r8, #0
 800a738:	d026      	beq.n	800a788 <__d2b+0x84>
 800a73a:	4668      	mov	r0, sp
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	f7ff fd17 	bl	800a170 <__lo0bits>
 800a742:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a746:	b1e8      	cbz	r0, 800a784 <__d2b+0x80>
 800a748:	f1c0 0320 	rsb	r3, r0, #32
 800a74c:	fa02 f303 	lsl.w	r3, r2, r3
 800a750:	430b      	orrs	r3, r1
 800a752:	40c2      	lsrs	r2, r0
 800a754:	6163      	str	r3, [r4, #20]
 800a756:	9201      	str	r2, [sp, #4]
 800a758:	9b01      	ldr	r3, [sp, #4]
 800a75a:	61a3      	str	r3, [r4, #24]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bf14      	ite	ne
 800a760:	2202      	movne	r2, #2
 800a762:	2201      	moveq	r2, #1
 800a764:	6122      	str	r2, [r4, #16]
 800a766:	b1bd      	cbz	r5, 800a798 <__d2b+0x94>
 800a768:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a76c:	4405      	add	r5, r0
 800a76e:	603d      	str	r5, [r7, #0]
 800a770:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a774:	6030      	str	r0, [r6, #0]
 800a776:	4620      	mov	r0, r4
 800a778:	b003      	add	sp, #12
 800a77a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a77e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a782:	e7d6      	b.n	800a732 <__d2b+0x2e>
 800a784:	6161      	str	r1, [r4, #20]
 800a786:	e7e7      	b.n	800a758 <__d2b+0x54>
 800a788:	a801      	add	r0, sp, #4
 800a78a:	f7ff fcf1 	bl	800a170 <__lo0bits>
 800a78e:	9b01      	ldr	r3, [sp, #4]
 800a790:	6163      	str	r3, [r4, #20]
 800a792:	3020      	adds	r0, #32
 800a794:	2201      	movs	r2, #1
 800a796:	e7e5      	b.n	800a764 <__d2b+0x60>
 800a798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a79c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7a0:	6038      	str	r0, [r7, #0]
 800a7a2:	6918      	ldr	r0, [r3, #16]
 800a7a4:	f7ff fcc4 	bl	800a130 <__hi0bits>
 800a7a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7ac:	e7e2      	b.n	800a774 <__d2b+0x70>
 800a7ae:	bf00      	nop
 800a7b0:	0800c909 	.word	0x0800c909
 800a7b4:	0800c91a 	.word	0x0800c91a

0800a7b8 <__ratio>:
 800a7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	4688      	mov	r8, r1
 800a7be:	4669      	mov	r1, sp
 800a7c0:	4681      	mov	r9, r0
 800a7c2:	f7ff ff55 	bl	800a670 <__b2d>
 800a7c6:	a901      	add	r1, sp, #4
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	ec55 4b10 	vmov	r4, r5, d0
 800a7ce:	f7ff ff4f 	bl	800a670 <__b2d>
 800a7d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a7da:	eba3 0c02 	sub.w	ip, r3, r2
 800a7de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7e2:	1a9b      	subs	r3, r3, r2
 800a7e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a7e8:	ec51 0b10 	vmov	r0, r1, d0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	bfd6      	itet	le
 800a7f0:	460a      	movle	r2, r1
 800a7f2:	462a      	movgt	r2, r5
 800a7f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7f8:	468b      	mov	fp, r1
 800a7fa:	462f      	mov	r7, r5
 800a7fc:	bfd4      	ite	le
 800a7fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a802:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a806:	4620      	mov	r0, r4
 800a808:	ee10 2a10 	vmov	r2, s0
 800a80c:	465b      	mov	r3, fp
 800a80e:	4639      	mov	r1, r7
 800a810:	f7f6 f81c 	bl	800084c <__aeabi_ddiv>
 800a814:	ec41 0b10 	vmov	d0, r0, r1
 800a818:	b003      	add	sp, #12
 800a81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a81e <__copybits>:
 800a81e:	3901      	subs	r1, #1
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	1149      	asrs	r1, r1, #5
 800a824:	6914      	ldr	r4, [r2, #16]
 800a826:	3101      	adds	r1, #1
 800a828:	f102 0314 	add.w	r3, r2, #20
 800a82c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a830:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a834:	1f05      	subs	r5, r0, #4
 800a836:	42a3      	cmp	r3, r4
 800a838:	d30c      	bcc.n	800a854 <__copybits+0x36>
 800a83a:	1aa3      	subs	r3, r4, r2
 800a83c:	3b11      	subs	r3, #17
 800a83e:	f023 0303 	bic.w	r3, r3, #3
 800a842:	3211      	adds	r2, #17
 800a844:	42a2      	cmp	r2, r4
 800a846:	bf88      	it	hi
 800a848:	2300      	movhi	r3, #0
 800a84a:	4418      	add	r0, r3
 800a84c:	2300      	movs	r3, #0
 800a84e:	4288      	cmp	r0, r1
 800a850:	d305      	bcc.n	800a85e <__copybits+0x40>
 800a852:	bd70      	pop	{r4, r5, r6, pc}
 800a854:	f853 6b04 	ldr.w	r6, [r3], #4
 800a858:	f845 6f04 	str.w	r6, [r5, #4]!
 800a85c:	e7eb      	b.n	800a836 <__copybits+0x18>
 800a85e:	f840 3b04 	str.w	r3, [r0], #4
 800a862:	e7f4      	b.n	800a84e <__copybits+0x30>

0800a864 <__any_on>:
 800a864:	f100 0214 	add.w	r2, r0, #20
 800a868:	6900      	ldr	r0, [r0, #16]
 800a86a:	114b      	asrs	r3, r1, #5
 800a86c:	4298      	cmp	r0, r3
 800a86e:	b510      	push	{r4, lr}
 800a870:	db11      	blt.n	800a896 <__any_on+0x32>
 800a872:	dd0a      	ble.n	800a88a <__any_on+0x26>
 800a874:	f011 011f 	ands.w	r1, r1, #31
 800a878:	d007      	beq.n	800a88a <__any_on+0x26>
 800a87a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a87e:	fa24 f001 	lsr.w	r0, r4, r1
 800a882:	fa00 f101 	lsl.w	r1, r0, r1
 800a886:	428c      	cmp	r4, r1
 800a888:	d10b      	bne.n	800a8a2 <__any_on+0x3e>
 800a88a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a88e:	4293      	cmp	r3, r2
 800a890:	d803      	bhi.n	800a89a <__any_on+0x36>
 800a892:	2000      	movs	r0, #0
 800a894:	bd10      	pop	{r4, pc}
 800a896:	4603      	mov	r3, r0
 800a898:	e7f7      	b.n	800a88a <__any_on+0x26>
 800a89a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a89e:	2900      	cmp	r1, #0
 800a8a0:	d0f5      	beq.n	800a88e <__any_on+0x2a>
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	e7f6      	b.n	800a894 <__any_on+0x30>

0800a8a6 <sulp>:
 800a8a6:	b570      	push	{r4, r5, r6, lr}
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	460d      	mov	r5, r1
 800a8ac:	ec45 4b10 	vmov	d0, r4, r5
 800a8b0:	4616      	mov	r6, r2
 800a8b2:	f7ff feb7 	bl	800a624 <__ulp>
 800a8b6:	ec51 0b10 	vmov	r0, r1, d0
 800a8ba:	b17e      	cbz	r6, 800a8dc <sulp+0x36>
 800a8bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a8c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dd09      	ble.n	800a8dc <sulp+0x36>
 800a8c8:	051b      	lsls	r3, r3, #20
 800a8ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a8ce:	2400      	movs	r4, #0
 800a8d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a8d4:	4622      	mov	r2, r4
 800a8d6:	462b      	mov	r3, r5
 800a8d8:	f7f5 fe8e 	bl	80005f8 <__aeabi_dmul>
 800a8dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a8e0 <_strtod_l>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	ed2d 8b02 	vpush	{d8}
 800a8e8:	b09b      	sub	sp, #108	; 0x6c
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	9216      	str	r2, [sp, #88]	; 0x58
 800a8f2:	460d      	mov	r5, r1
 800a8f4:	f04f 0800 	mov.w	r8, #0
 800a8f8:	f04f 0900 	mov.w	r9, #0
 800a8fc:	460a      	mov	r2, r1
 800a8fe:	9215      	str	r2, [sp, #84]	; 0x54
 800a900:	7811      	ldrb	r1, [r2, #0]
 800a902:	292b      	cmp	r1, #43	; 0x2b
 800a904:	d04c      	beq.n	800a9a0 <_strtod_l+0xc0>
 800a906:	d83a      	bhi.n	800a97e <_strtod_l+0x9e>
 800a908:	290d      	cmp	r1, #13
 800a90a:	d834      	bhi.n	800a976 <_strtod_l+0x96>
 800a90c:	2908      	cmp	r1, #8
 800a90e:	d834      	bhi.n	800a97a <_strtod_l+0x9a>
 800a910:	2900      	cmp	r1, #0
 800a912:	d03d      	beq.n	800a990 <_strtod_l+0xb0>
 800a914:	2200      	movs	r2, #0
 800a916:	920a      	str	r2, [sp, #40]	; 0x28
 800a918:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a91a:	7832      	ldrb	r2, [r6, #0]
 800a91c:	2a30      	cmp	r2, #48	; 0x30
 800a91e:	f040 80b4 	bne.w	800aa8a <_strtod_l+0x1aa>
 800a922:	7872      	ldrb	r2, [r6, #1]
 800a924:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a928:	2a58      	cmp	r2, #88	; 0x58
 800a92a:	d170      	bne.n	800aa0e <_strtod_l+0x12e>
 800a92c:	9302      	str	r3, [sp, #8]
 800a92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	ab16      	add	r3, sp, #88	; 0x58
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	4a8e      	ldr	r2, [pc, #568]	; (800ab70 <_strtod_l+0x290>)
 800a938:	ab17      	add	r3, sp, #92	; 0x5c
 800a93a:	a915      	add	r1, sp, #84	; 0x54
 800a93c:	4620      	mov	r0, r4
 800a93e:	f001 fb17 	bl	800bf70 <__gethex>
 800a942:	f010 070f 	ands.w	r7, r0, #15
 800a946:	4605      	mov	r5, r0
 800a948:	d005      	beq.n	800a956 <_strtod_l+0x76>
 800a94a:	2f06      	cmp	r7, #6
 800a94c:	d12a      	bne.n	800a9a4 <_strtod_l+0xc4>
 800a94e:	3601      	adds	r6, #1
 800a950:	2300      	movs	r3, #0
 800a952:	9615      	str	r6, [sp, #84]	; 0x54
 800a954:	930a      	str	r3, [sp, #40]	; 0x28
 800a956:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f040 857f 	bne.w	800b45c <_strtod_l+0xb7c>
 800a95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a960:	b1db      	cbz	r3, 800a99a <_strtod_l+0xba>
 800a962:	4642      	mov	r2, r8
 800a964:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a968:	ec43 2b10 	vmov	d0, r2, r3
 800a96c:	b01b      	add	sp, #108	; 0x6c
 800a96e:	ecbd 8b02 	vpop	{d8}
 800a972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a976:	2920      	cmp	r1, #32
 800a978:	d1cc      	bne.n	800a914 <_strtod_l+0x34>
 800a97a:	3201      	adds	r2, #1
 800a97c:	e7bf      	b.n	800a8fe <_strtod_l+0x1e>
 800a97e:	292d      	cmp	r1, #45	; 0x2d
 800a980:	d1c8      	bne.n	800a914 <_strtod_l+0x34>
 800a982:	2101      	movs	r1, #1
 800a984:	910a      	str	r1, [sp, #40]	; 0x28
 800a986:	1c51      	adds	r1, r2, #1
 800a988:	9115      	str	r1, [sp, #84]	; 0x54
 800a98a:	7852      	ldrb	r2, [r2, #1]
 800a98c:	2a00      	cmp	r2, #0
 800a98e:	d1c3      	bne.n	800a918 <_strtod_l+0x38>
 800a990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a992:	9515      	str	r5, [sp, #84]	; 0x54
 800a994:	2b00      	cmp	r3, #0
 800a996:	f040 855f 	bne.w	800b458 <_strtod_l+0xb78>
 800a99a:	4642      	mov	r2, r8
 800a99c:	464b      	mov	r3, r9
 800a99e:	e7e3      	b.n	800a968 <_strtod_l+0x88>
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	e7ef      	b.n	800a984 <_strtod_l+0xa4>
 800a9a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a9a6:	b13a      	cbz	r2, 800a9b8 <_strtod_l+0xd8>
 800a9a8:	2135      	movs	r1, #53	; 0x35
 800a9aa:	a818      	add	r0, sp, #96	; 0x60
 800a9ac:	f7ff ff37 	bl	800a81e <__copybits>
 800a9b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f7ff fb0a 	bl	8009fcc <_Bfree>
 800a9b8:	3f01      	subs	r7, #1
 800a9ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a9bc:	2f04      	cmp	r7, #4
 800a9be:	d806      	bhi.n	800a9ce <_strtod_l+0xee>
 800a9c0:	e8df f007 	tbb	[pc, r7]
 800a9c4:	201d0314 	.word	0x201d0314
 800a9c8:	14          	.byte	0x14
 800a9c9:	00          	.byte	0x00
 800a9ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a9ce:	05e9      	lsls	r1, r5, #23
 800a9d0:	bf48      	it	mi
 800a9d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a9d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9da:	0d1b      	lsrs	r3, r3, #20
 800a9dc:	051b      	lsls	r3, r3, #20
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1b9      	bne.n	800a956 <_strtod_l+0x76>
 800a9e2:	f7fe fb05 	bl	8008ff0 <__errno>
 800a9e6:	2322      	movs	r3, #34	; 0x22
 800a9e8:	6003      	str	r3, [r0, #0]
 800a9ea:	e7b4      	b.n	800a956 <_strtod_l+0x76>
 800a9ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a9f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a9f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a9f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a9fc:	e7e7      	b.n	800a9ce <_strtod_l+0xee>
 800a9fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ab78 <_strtod_l+0x298>
 800aa02:	e7e4      	b.n	800a9ce <_strtod_l+0xee>
 800aa04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800aa08:	f04f 38ff 	mov.w	r8, #4294967295
 800aa0c:	e7df      	b.n	800a9ce <_strtod_l+0xee>
 800aa0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	9215      	str	r2, [sp, #84]	; 0x54
 800aa14:	785b      	ldrb	r3, [r3, #1]
 800aa16:	2b30      	cmp	r3, #48	; 0x30
 800aa18:	d0f9      	beq.n	800aa0e <_strtod_l+0x12e>
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d09b      	beq.n	800a956 <_strtod_l+0x76>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	f04f 0a00 	mov.w	sl, #0
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa28:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800aa2e:	46d3      	mov	fp, sl
 800aa30:	220a      	movs	r2, #10
 800aa32:	9815      	ldr	r0, [sp, #84]	; 0x54
 800aa34:	7806      	ldrb	r6, [r0, #0]
 800aa36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aa3a:	b2d9      	uxtb	r1, r3
 800aa3c:	2909      	cmp	r1, #9
 800aa3e:	d926      	bls.n	800aa8e <_strtod_l+0x1ae>
 800aa40:	494c      	ldr	r1, [pc, #304]	; (800ab74 <_strtod_l+0x294>)
 800aa42:	2201      	movs	r2, #1
 800aa44:	f001 f9c0 	bl	800bdc8 <strncmp>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d030      	beq.n	800aaae <_strtod_l+0x1ce>
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	4632      	mov	r2, r6
 800aa50:	9005      	str	r0, [sp, #20]
 800aa52:	465e      	mov	r6, fp
 800aa54:	4603      	mov	r3, r0
 800aa56:	2a65      	cmp	r2, #101	; 0x65
 800aa58:	d001      	beq.n	800aa5e <_strtod_l+0x17e>
 800aa5a:	2a45      	cmp	r2, #69	; 0x45
 800aa5c:	d113      	bne.n	800aa86 <_strtod_l+0x1a6>
 800aa5e:	b91e      	cbnz	r6, 800aa68 <_strtod_l+0x188>
 800aa60:	9a04      	ldr	r2, [sp, #16]
 800aa62:	4302      	orrs	r2, r0
 800aa64:	d094      	beq.n	800a990 <_strtod_l+0xb0>
 800aa66:	2600      	movs	r6, #0
 800aa68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800aa6a:	1c6a      	adds	r2, r5, #1
 800aa6c:	9215      	str	r2, [sp, #84]	; 0x54
 800aa6e:	786a      	ldrb	r2, [r5, #1]
 800aa70:	2a2b      	cmp	r2, #43	; 0x2b
 800aa72:	d074      	beq.n	800ab5e <_strtod_l+0x27e>
 800aa74:	2a2d      	cmp	r2, #45	; 0x2d
 800aa76:	d078      	beq.n	800ab6a <_strtod_l+0x28a>
 800aa78:	f04f 0c00 	mov.w	ip, #0
 800aa7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aa80:	2909      	cmp	r1, #9
 800aa82:	d97f      	bls.n	800ab84 <_strtod_l+0x2a4>
 800aa84:	9515      	str	r5, [sp, #84]	; 0x54
 800aa86:	2700      	movs	r7, #0
 800aa88:	e09e      	b.n	800abc8 <_strtod_l+0x2e8>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e7c8      	b.n	800aa20 <_strtod_l+0x140>
 800aa8e:	f1bb 0f08 	cmp.w	fp, #8
 800aa92:	bfd8      	it	le
 800aa94:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800aa96:	f100 0001 	add.w	r0, r0, #1
 800aa9a:	bfda      	itte	le
 800aa9c:	fb02 3301 	mlale	r3, r2, r1, r3
 800aaa0:	9309      	strle	r3, [sp, #36]	; 0x24
 800aaa2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800aaa6:	f10b 0b01 	add.w	fp, fp, #1
 800aaaa:	9015      	str	r0, [sp, #84]	; 0x54
 800aaac:	e7c1      	b.n	800aa32 <_strtod_l+0x152>
 800aaae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	9215      	str	r2, [sp, #84]	; 0x54
 800aab4:	785a      	ldrb	r2, [r3, #1]
 800aab6:	f1bb 0f00 	cmp.w	fp, #0
 800aaba:	d037      	beq.n	800ab2c <_strtod_l+0x24c>
 800aabc:	9005      	str	r0, [sp, #20]
 800aabe:	465e      	mov	r6, fp
 800aac0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aac4:	2b09      	cmp	r3, #9
 800aac6:	d912      	bls.n	800aaee <_strtod_l+0x20e>
 800aac8:	2301      	movs	r3, #1
 800aaca:	e7c4      	b.n	800aa56 <_strtod_l+0x176>
 800aacc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aace:	1c5a      	adds	r2, r3, #1
 800aad0:	9215      	str	r2, [sp, #84]	; 0x54
 800aad2:	785a      	ldrb	r2, [r3, #1]
 800aad4:	3001      	adds	r0, #1
 800aad6:	2a30      	cmp	r2, #48	; 0x30
 800aad8:	d0f8      	beq.n	800aacc <_strtod_l+0x1ec>
 800aada:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aade:	2b08      	cmp	r3, #8
 800aae0:	f200 84c1 	bhi.w	800b466 <_strtod_l+0xb86>
 800aae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aae6:	9005      	str	r0, [sp, #20]
 800aae8:	2000      	movs	r0, #0
 800aaea:	930b      	str	r3, [sp, #44]	; 0x2c
 800aaec:	4606      	mov	r6, r0
 800aaee:	3a30      	subs	r2, #48	; 0x30
 800aaf0:	f100 0301 	add.w	r3, r0, #1
 800aaf4:	d014      	beq.n	800ab20 <_strtod_l+0x240>
 800aaf6:	9905      	ldr	r1, [sp, #20]
 800aaf8:	4419      	add	r1, r3
 800aafa:	9105      	str	r1, [sp, #20]
 800aafc:	4633      	mov	r3, r6
 800aafe:	eb00 0c06 	add.w	ip, r0, r6
 800ab02:	210a      	movs	r1, #10
 800ab04:	4563      	cmp	r3, ip
 800ab06:	d113      	bne.n	800ab30 <_strtod_l+0x250>
 800ab08:	1833      	adds	r3, r6, r0
 800ab0a:	2b08      	cmp	r3, #8
 800ab0c:	f106 0601 	add.w	r6, r6, #1
 800ab10:	4406      	add	r6, r0
 800ab12:	dc1a      	bgt.n	800ab4a <_strtod_l+0x26a>
 800ab14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab16:	230a      	movs	r3, #10
 800ab18:	fb03 2301 	mla	r3, r3, r1, r2
 800ab1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1e:	2300      	movs	r3, #0
 800ab20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ab22:	1c51      	adds	r1, r2, #1
 800ab24:	9115      	str	r1, [sp, #84]	; 0x54
 800ab26:	7852      	ldrb	r2, [r2, #1]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	e7c9      	b.n	800aac0 <_strtod_l+0x1e0>
 800ab2c:	4658      	mov	r0, fp
 800ab2e:	e7d2      	b.n	800aad6 <_strtod_l+0x1f6>
 800ab30:	2b08      	cmp	r3, #8
 800ab32:	f103 0301 	add.w	r3, r3, #1
 800ab36:	dc03      	bgt.n	800ab40 <_strtod_l+0x260>
 800ab38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab3a:	434f      	muls	r7, r1
 800ab3c:	9709      	str	r7, [sp, #36]	; 0x24
 800ab3e:	e7e1      	b.n	800ab04 <_strtod_l+0x224>
 800ab40:	2b10      	cmp	r3, #16
 800ab42:	bfd8      	it	le
 800ab44:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ab48:	e7dc      	b.n	800ab04 <_strtod_l+0x224>
 800ab4a:	2e10      	cmp	r6, #16
 800ab4c:	bfdc      	itt	le
 800ab4e:	230a      	movle	r3, #10
 800ab50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ab54:	e7e3      	b.n	800ab1e <_strtod_l+0x23e>
 800ab56:	2300      	movs	r3, #0
 800ab58:	9305      	str	r3, [sp, #20]
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e780      	b.n	800aa60 <_strtod_l+0x180>
 800ab5e:	f04f 0c00 	mov.w	ip, #0
 800ab62:	1caa      	adds	r2, r5, #2
 800ab64:	9215      	str	r2, [sp, #84]	; 0x54
 800ab66:	78aa      	ldrb	r2, [r5, #2]
 800ab68:	e788      	b.n	800aa7c <_strtod_l+0x19c>
 800ab6a:	f04f 0c01 	mov.w	ip, #1
 800ab6e:	e7f8      	b.n	800ab62 <_strtod_l+0x282>
 800ab70:	0800ca78 	.word	0x0800ca78
 800ab74:	0800ca74 	.word	0x0800ca74
 800ab78:	7ff00000 	.word	0x7ff00000
 800ab7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ab7e:	1c51      	adds	r1, r2, #1
 800ab80:	9115      	str	r1, [sp, #84]	; 0x54
 800ab82:	7852      	ldrb	r2, [r2, #1]
 800ab84:	2a30      	cmp	r2, #48	; 0x30
 800ab86:	d0f9      	beq.n	800ab7c <_strtod_l+0x29c>
 800ab88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ab8c:	2908      	cmp	r1, #8
 800ab8e:	f63f af7a 	bhi.w	800aa86 <_strtod_l+0x1a6>
 800ab92:	3a30      	subs	r2, #48	; 0x30
 800ab94:	9208      	str	r2, [sp, #32]
 800ab96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ab98:	920c      	str	r2, [sp, #48]	; 0x30
 800ab9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ab9c:	1c57      	adds	r7, r2, #1
 800ab9e:	9715      	str	r7, [sp, #84]	; 0x54
 800aba0:	7852      	ldrb	r2, [r2, #1]
 800aba2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aba6:	f1be 0f09 	cmp.w	lr, #9
 800abaa:	d938      	bls.n	800ac1e <_strtod_l+0x33e>
 800abac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abae:	1a7f      	subs	r7, r7, r1
 800abb0:	2f08      	cmp	r7, #8
 800abb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800abb6:	dc03      	bgt.n	800abc0 <_strtod_l+0x2e0>
 800abb8:	9908      	ldr	r1, [sp, #32]
 800abba:	428f      	cmp	r7, r1
 800abbc:	bfa8      	it	ge
 800abbe:	460f      	movge	r7, r1
 800abc0:	f1bc 0f00 	cmp.w	ip, #0
 800abc4:	d000      	beq.n	800abc8 <_strtod_l+0x2e8>
 800abc6:	427f      	negs	r7, r7
 800abc8:	2e00      	cmp	r6, #0
 800abca:	d14f      	bne.n	800ac6c <_strtod_l+0x38c>
 800abcc:	9904      	ldr	r1, [sp, #16]
 800abce:	4301      	orrs	r1, r0
 800abd0:	f47f aec1 	bne.w	800a956 <_strtod_l+0x76>
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f47f aedb 	bne.w	800a990 <_strtod_l+0xb0>
 800abda:	2a69      	cmp	r2, #105	; 0x69
 800abdc:	d029      	beq.n	800ac32 <_strtod_l+0x352>
 800abde:	dc26      	bgt.n	800ac2e <_strtod_l+0x34e>
 800abe0:	2a49      	cmp	r2, #73	; 0x49
 800abe2:	d026      	beq.n	800ac32 <_strtod_l+0x352>
 800abe4:	2a4e      	cmp	r2, #78	; 0x4e
 800abe6:	f47f aed3 	bne.w	800a990 <_strtod_l+0xb0>
 800abea:	499b      	ldr	r1, [pc, #620]	; (800ae58 <_strtod_l+0x578>)
 800abec:	a815      	add	r0, sp, #84	; 0x54
 800abee:	f001 fbff 	bl	800c3f0 <__match>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	f43f aecc 	beq.w	800a990 <_strtod_l+0xb0>
 800abf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2b28      	cmp	r3, #40	; 0x28
 800abfe:	d12f      	bne.n	800ac60 <_strtod_l+0x380>
 800ac00:	4996      	ldr	r1, [pc, #600]	; (800ae5c <_strtod_l+0x57c>)
 800ac02:	aa18      	add	r2, sp, #96	; 0x60
 800ac04:	a815      	add	r0, sp, #84	; 0x54
 800ac06:	f001 fc07 	bl	800c418 <__hexnan>
 800ac0a:	2805      	cmp	r0, #5
 800ac0c:	d128      	bne.n	800ac60 <_strtod_l+0x380>
 800ac0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ac18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ac1c:	e69b      	b.n	800a956 <_strtod_l+0x76>
 800ac1e:	9f08      	ldr	r7, [sp, #32]
 800ac20:	210a      	movs	r1, #10
 800ac22:	fb01 2107 	mla	r1, r1, r7, r2
 800ac26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ac2a:	9208      	str	r2, [sp, #32]
 800ac2c:	e7b5      	b.n	800ab9a <_strtod_l+0x2ba>
 800ac2e:	2a6e      	cmp	r2, #110	; 0x6e
 800ac30:	e7d9      	b.n	800abe6 <_strtod_l+0x306>
 800ac32:	498b      	ldr	r1, [pc, #556]	; (800ae60 <_strtod_l+0x580>)
 800ac34:	a815      	add	r0, sp, #84	; 0x54
 800ac36:	f001 fbdb 	bl	800c3f0 <__match>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	f43f aea8 	beq.w	800a990 <_strtod_l+0xb0>
 800ac40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac42:	4988      	ldr	r1, [pc, #544]	; (800ae64 <_strtod_l+0x584>)
 800ac44:	3b01      	subs	r3, #1
 800ac46:	a815      	add	r0, sp, #84	; 0x54
 800ac48:	9315      	str	r3, [sp, #84]	; 0x54
 800ac4a:	f001 fbd1 	bl	800c3f0 <__match>
 800ac4e:	b910      	cbnz	r0, 800ac56 <_strtod_l+0x376>
 800ac50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac52:	3301      	adds	r3, #1
 800ac54:	9315      	str	r3, [sp, #84]	; 0x54
 800ac56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ae74 <_strtod_l+0x594>
 800ac5a:	f04f 0800 	mov.w	r8, #0
 800ac5e:	e67a      	b.n	800a956 <_strtod_l+0x76>
 800ac60:	4881      	ldr	r0, [pc, #516]	; (800ae68 <_strtod_l+0x588>)
 800ac62:	f001 f8e1 	bl	800be28 <nan>
 800ac66:	ec59 8b10 	vmov	r8, r9, d0
 800ac6a:	e674      	b.n	800a956 <_strtod_l+0x76>
 800ac6c:	9b05      	ldr	r3, [sp, #20]
 800ac6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac70:	1afb      	subs	r3, r7, r3
 800ac72:	f1bb 0f00 	cmp.w	fp, #0
 800ac76:	bf08      	it	eq
 800ac78:	46b3      	moveq	fp, r6
 800ac7a:	2e10      	cmp	r6, #16
 800ac7c:	9308      	str	r3, [sp, #32]
 800ac7e:	4635      	mov	r5, r6
 800ac80:	bfa8      	it	ge
 800ac82:	2510      	movge	r5, #16
 800ac84:	f7f5 fc3e 	bl	8000504 <__aeabi_ui2d>
 800ac88:	2e09      	cmp	r6, #9
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	4689      	mov	r9, r1
 800ac8e:	dd13      	ble.n	800acb8 <_strtod_l+0x3d8>
 800ac90:	4b76      	ldr	r3, [pc, #472]	; (800ae6c <_strtod_l+0x58c>)
 800ac92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ac96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ac9a:	f7f5 fcad 	bl	80005f8 <__aeabi_dmul>
 800ac9e:	4680      	mov	r8, r0
 800aca0:	4650      	mov	r0, sl
 800aca2:	4689      	mov	r9, r1
 800aca4:	f7f5 fc2e 	bl	8000504 <__aeabi_ui2d>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4640      	mov	r0, r8
 800acae:	4649      	mov	r1, r9
 800acb0:	f7f5 faec 	bl	800028c <__adddf3>
 800acb4:	4680      	mov	r8, r0
 800acb6:	4689      	mov	r9, r1
 800acb8:	2e0f      	cmp	r6, #15
 800acba:	dc38      	bgt.n	800ad2e <_strtod_l+0x44e>
 800acbc:	9b08      	ldr	r3, [sp, #32]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f43f ae49 	beq.w	800a956 <_strtod_l+0x76>
 800acc4:	dd24      	ble.n	800ad10 <_strtod_l+0x430>
 800acc6:	2b16      	cmp	r3, #22
 800acc8:	dc0b      	bgt.n	800ace2 <_strtod_l+0x402>
 800acca:	4968      	ldr	r1, [pc, #416]	; (800ae6c <_strtod_l+0x58c>)
 800accc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acd4:	4642      	mov	r2, r8
 800acd6:	464b      	mov	r3, r9
 800acd8:	f7f5 fc8e 	bl	80005f8 <__aeabi_dmul>
 800acdc:	4680      	mov	r8, r0
 800acde:	4689      	mov	r9, r1
 800ace0:	e639      	b.n	800a956 <_strtod_l+0x76>
 800ace2:	9a08      	ldr	r2, [sp, #32]
 800ace4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ace8:	4293      	cmp	r3, r2
 800acea:	db20      	blt.n	800ad2e <_strtod_l+0x44e>
 800acec:	4c5f      	ldr	r4, [pc, #380]	; (800ae6c <_strtod_l+0x58c>)
 800acee:	f1c6 060f 	rsb	r6, r6, #15
 800acf2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800acf6:	4642      	mov	r2, r8
 800acf8:	464b      	mov	r3, r9
 800acfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acfe:	f7f5 fc7b 	bl	80005f8 <__aeabi_dmul>
 800ad02:	9b08      	ldr	r3, [sp, #32]
 800ad04:	1b9e      	subs	r6, r3, r6
 800ad06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ad0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ad0e:	e7e3      	b.n	800acd8 <_strtod_l+0x3f8>
 800ad10:	9b08      	ldr	r3, [sp, #32]
 800ad12:	3316      	adds	r3, #22
 800ad14:	db0b      	blt.n	800ad2e <_strtod_l+0x44e>
 800ad16:	9b05      	ldr	r3, [sp, #20]
 800ad18:	1bdf      	subs	r7, r3, r7
 800ad1a:	4b54      	ldr	r3, [pc, #336]	; (800ae6c <_strtod_l+0x58c>)
 800ad1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ad20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad24:	4640      	mov	r0, r8
 800ad26:	4649      	mov	r1, r9
 800ad28:	f7f5 fd90 	bl	800084c <__aeabi_ddiv>
 800ad2c:	e7d6      	b.n	800acdc <_strtod_l+0x3fc>
 800ad2e:	9b08      	ldr	r3, [sp, #32]
 800ad30:	1b75      	subs	r5, r6, r5
 800ad32:	441d      	add	r5, r3
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	dd70      	ble.n	800ae1a <_strtod_l+0x53a>
 800ad38:	f015 030f 	ands.w	r3, r5, #15
 800ad3c:	d00a      	beq.n	800ad54 <_strtod_l+0x474>
 800ad3e:	494b      	ldr	r1, [pc, #300]	; (800ae6c <_strtod_l+0x58c>)
 800ad40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad44:	4642      	mov	r2, r8
 800ad46:	464b      	mov	r3, r9
 800ad48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4c:	f7f5 fc54 	bl	80005f8 <__aeabi_dmul>
 800ad50:	4680      	mov	r8, r0
 800ad52:	4689      	mov	r9, r1
 800ad54:	f035 050f 	bics.w	r5, r5, #15
 800ad58:	d04d      	beq.n	800adf6 <_strtod_l+0x516>
 800ad5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ad5e:	dd22      	ble.n	800ada6 <_strtod_l+0x4c6>
 800ad60:	2500      	movs	r5, #0
 800ad62:	46ab      	mov	fp, r5
 800ad64:	9509      	str	r5, [sp, #36]	; 0x24
 800ad66:	9505      	str	r5, [sp, #20]
 800ad68:	2322      	movs	r3, #34	; 0x22
 800ad6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ae74 <_strtod_l+0x594>
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	f04f 0800 	mov.w	r8, #0
 800ad74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f43f aded 	beq.w	800a956 <_strtod_l+0x76>
 800ad7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f7ff f924 	bl	8009fcc <_Bfree>
 800ad84:	9905      	ldr	r1, [sp, #20]
 800ad86:	4620      	mov	r0, r4
 800ad88:	f7ff f920 	bl	8009fcc <_Bfree>
 800ad8c:	4659      	mov	r1, fp
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7ff f91c 	bl	8009fcc <_Bfree>
 800ad94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad96:	4620      	mov	r0, r4
 800ad98:	f7ff f918 	bl	8009fcc <_Bfree>
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f7ff f914 	bl	8009fcc <_Bfree>
 800ada4:	e5d7      	b.n	800a956 <_strtod_l+0x76>
 800ada6:	4b32      	ldr	r3, [pc, #200]	; (800ae70 <_strtod_l+0x590>)
 800ada8:	9304      	str	r3, [sp, #16]
 800adaa:	2300      	movs	r3, #0
 800adac:	112d      	asrs	r5, r5, #4
 800adae:	4640      	mov	r0, r8
 800adb0:	4649      	mov	r1, r9
 800adb2:	469a      	mov	sl, r3
 800adb4:	2d01      	cmp	r5, #1
 800adb6:	dc21      	bgt.n	800adfc <_strtod_l+0x51c>
 800adb8:	b10b      	cbz	r3, 800adbe <_strtod_l+0x4de>
 800adba:	4680      	mov	r8, r0
 800adbc:	4689      	mov	r9, r1
 800adbe:	492c      	ldr	r1, [pc, #176]	; (800ae70 <_strtod_l+0x590>)
 800adc0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800adc4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800adc8:	4642      	mov	r2, r8
 800adca:	464b      	mov	r3, r9
 800adcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800add0:	f7f5 fc12 	bl	80005f8 <__aeabi_dmul>
 800add4:	4b27      	ldr	r3, [pc, #156]	; (800ae74 <_strtod_l+0x594>)
 800add6:	460a      	mov	r2, r1
 800add8:	400b      	ands	r3, r1
 800adda:	4927      	ldr	r1, [pc, #156]	; (800ae78 <_strtod_l+0x598>)
 800addc:	428b      	cmp	r3, r1
 800adde:	4680      	mov	r8, r0
 800ade0:	d8be      	bhi.n	800ad60 <_strtod_l+0x480>
 800ade2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ade6:	428b      	cmp	r3, r1
 800ade8:	bf86      	itte	hi
 800adea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ae7c <_strtod_l+0x59c>
 800adee:	f04f 38ff 	movhi.w	r8, #4294967295
 800adf2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800adf6:	2300      	movs	r3, #0
 800adf8:	9304      	str	r3, [sp, #16]
 800adfa:	e07b      	b.n	800aef4 <_strtod_l+0x614>
 800adfc:	07ea      	lsls	r2, r5, #31
 800adfe:	d505      	bpl.n	800ae0c <_strtod_l+0x52c>
 800ae00:	9b04      	ldr	r3, [sp, #16]
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	f7f5 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	9a04      	ldr	r2, [sp, #16]
 800ae0e:	3208      	adds	r2, #8
 800ae10:	f10a 0a01 	add.w	sl, sl, #1
 800ae14:	106d      	asrs	r5, r5, #1
 800ae16:	9204      	str	r2, [sp, #16]
 800ae18:	e7cc      	b.n	800adb4 <_strtod_l+0x4d4>
 800ae1a:	d0ec      	beq.n	800adf6 <_strtod_l+0x516>
 800ae1c:	426d      	negs	r5, r5
 800ae1e:	f015 020f 	ands.w	r2, r5, #15
 800ae22:	d00a      	beq.n	800ae3a <_strtod_l+0x55a>
 800ae24:	4b11      	ldr	r3, [pc, #68]	; (800ae6c <_strtod_l+0x58c>)
 800ae26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	f7f5 fd0b 	bl	800084c <__aeabi_ddiv>
 800ae36:	4680      	mov	r8, r0
 800ae38:	4689      	mov	r9, r1
 800ae3a:	112d      	asrs	r5, r5, #4
 800ae3c:	d0db      	beq.n	800adf6 <_strtod_l+0x516>
 800ae3e:	2d1f      	cmp	r5, #31
 800ae40:	dd1e      	ble.n	800ae80 <_strtod_l+0x5a0>
 800ae42:	2500      	movs	r5, #0
 800ae44:	46ab      	mov	fp, r5
 800ae46:	9509      	str	r5, [sp, #36]	; 0x24
 800ae48:	9505      	str	r5, [sp, #20]
 800ae4a:	2322      	movs	r3, #34	; 0x22
 800ae4c:	f04f 0800 	mov.w	r8, #0
 800ae50:	f04f 0900 	mov.w	r9, #0
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	e78d      	b.n	800ad74 <_strtod_l+0x494>
 800ae58:	0800c861 	.word	0x0800c861
 800ae5c:	0800ca8c 	.word	0x0800ca8c
 800ae60:	0800c859 	.word	0x0800c859
 800ae64:	0800c890 	.word	0x0800c890
 800ae68:	0800cc1d 	.word	0x0800cc1d
 800ae6c:	0800c9a0 	.word	0x0800c9a0
 800ae70:	0800c978 	.word	0x0800c978
 800ae74:	7ff00000 	.word	0x7ff00000
 800ae78:	7ca00000 	.word	0x7ca00000
 800ae7c:	7fefffff 	.word	0x7fefffff
 800ae80:	f015 0310 	ands.w	r3, r5, #16
 800ae84:	bf18      	it	ne
 800ae86:	236a      	movne	r3, #106	; 0x6a
 800ae88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b22c <_strtod_l+0x94c>
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	4640      	mov	r0, r8
 800ae90:	4649      	mov	r1, r9
 800ae92:	2300      	movs	r3, #0
 800ae94:	07ea      	lsls	r2, r5, #31
 800ae96:	d504      	bpl.n	800aea2 <_strtod_l+0x5c2>
 800ae98:	e9da 2300 	ldrd	r2, r3, [sl]
 800ae9c:	f7f5 fbac 	bl	80005f8 <__aeabi_dmul>
 800aea0:	2301      	movs	r3, #1
 800aea2:	106d      	asrs	r5, r5, #1
 800aea4:	f10a 0a08 	add.w	sl, sl, #8
 800aea8:	d1f4      	bne.n	800ae94 <_strtod_l+0x5b4>
 800aeaa:	b10b      	cbz	r3, 800aeb0 <_strtod_l+0x5d0>
 800aeac:	4680      	mov	r8, r0
 800aeae:	4689      	mov	r9, r1
 800aeb0:	9b04      	ldr	r3, [sp, #16]
 800aeb2:	b1bb      	cbz	r3, 800aee4 <_strtod_l+0x604>
 800aeb4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800aeb8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	4649      	mov	r1, r9
 800aec0:	dd10      	ble.n	800aee4 <_strtod_l+0x604>
 800aec2:	2b1f      	cmp	r3, #31
 800aec4:	f340 811e 	ble.w	800b104 <_strtod_l+0x824>
 800aec8:	2b34      	cmp	r3, #52	; 0x34
 800aeca:	bfde      	ittt	le
 800aecc:	f04f 33ff 	movle.w	r3, #4294967295
 800aed0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aed4:	4093      	lslle	r3, r2
 800aed6:	f04f 0800 	mov.w	r8, #0
 800aeda:	bfcc      	ite	gt
 800aedc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aee0:	ea03 0901 	andle.w	r9, r3, r1
 800aee4:	2200      	movs	r2, #0
 800aee6:	2300      	movs	r3, #0
 800aee8:	4640      	mov	r0, r8
 800aeea:	4649      	mov	r1, r9
 800aeec:	f7f5 fdec 	bl	8000ac8 <__aeabi_dcmpeq>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d1a6      	bne.n	800ae42 <_strtod_l+0x562>
 800aef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aefa:	4633      	mov	r3, r6
 800aefc:	465a      	mov	r2, fp
 800aefe:	4620      	mov	r0, r4
 800af00:	f7ff f8cc 	bl	800a09c <__s2b>
 800af04:	9009      	str	r0, [sp, #36]	; 0x24
 800af06:	2800      	cmp	r0, #0
 800af08:	f43f af2a 	beq.w	800ad60 <_strtod_l+0x480>
 800af0c:	9a08      	ldr	r2, [sp, #32]
 800af0e:	9b05      	ldr	r3, [sp, #20]
 800af10:	2a00      	cmp	r2, #0
 800af12:	eba3 0307 	sub.w	r3, r3, r7
 800af16:	bfa8      	it	ge
 800af18:	2300      	movge	r3, #0
 800af1a:	930c      	str	r3, [sp, #48]	; 0x30
 800af1c:	2500      	movs	r5, #0
 800af1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af22:	9312      	str	r3, [sp, #72]	; 0x48
 800af24:	46ab      	mov	fp, r5
 800af26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af28:	4620      	mov	r0, r4
 800af2a:	6859      	ldr	r1, [r3, #4]
 800af2c:	f7ff f80e 	bl	8009f4c <_Balloc>
 800af30:	9005      	str	r0, [sp, #20]
 800af32:	2800      	cmp	r0, #0
 800af34:	f43f af18 	beq.w	800ad68 <_strtod_l+0x488>
 800af38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3a:	691a      	ldr	r2, [r3, #16]
 800af3c:	3202      	adds	r2, #2
 800af3e:	f103 010c 	add.w	r1, r3, #12
 800af42:	0092      	lsls	r2, r2, #2
 800af44:	300c      	adds	r0, #12
 800af46:	f000 ff61 	bl	800be0c <memcpy>
 800af4a:	ec49 8b10 	vmov	d0, r8, r9
 800af4e:	aa18      	add	r2, sp, #96	; 0x60
 800af50:	a917      	add	r1, sp, #92	; 0x5c
 800af52:	4620      	mov	r0, r4
 800af54:	f7ff fbd6 	bl	800a704 <__d2b>
 800af58:	ec49 8b18 	vmov	d8, r8, r9
 800af5c:	9016      	str	r0, [sp, #88]	; 0x58
 800af5e:	2800      	cmp	r0, #0
 800af60:	f43f af02 	beq.w	800ad68 <_strtod_l+0x488>
 800af64:	2101      	movs	r1, #1
 800af66:	4620      	mov	r0, r4
 800af68:	f7ff f930 	bl	800a1cc <__i2b>
 800af6c:	4683      	mov	fp, r0
 800af6e:	2800      	cmp	r0, #0
 800af70:	f43f aefa 	beq.w	800ad68 <_strtod_l+0x488>
 800af74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800af76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af78:	2e00      	cmp	r6, #0
 800af7a:	bfab      	itete	ge
 800af7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800af7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800af80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800af82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800af86:	bfac      	ite	ge
 800af88:	eb06 0a03 	addge.w	sl, r6, r3
 800af8c:	1b9f      	sublt	r7, r3, r6
 800af8e:	9b04      	ldr	r3, [sp, #16]
 800af90:	1af6      	subs	r6, r6, r3
 800af92:	4416      	add	r6, r2
 800af94:	4ba0      	ldr	r3, [pc, #640]	; (800b218 <_strtod_l+0x938>)
 800af96:	3e01      	subs	r6, #1
 800af98:	429e      	cmp	r6, r3
 800af9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af9e:	f280 80c4 	bge.w	800b12a <_strtod_l+0x84a>
 800afa2:	1b9b      	subs	r3, r3, r6
 800afa4:	2b1f      	cmp	r3, #31
 800afa6:	eba2 0203 	sub.w	r2, r2, r3
 800afaa:	f04f 0101 	mov.w	r1, #1
 800afae:	f300 80b0 	bgt.w	800b112 <_strtod_l+0x832>
 800afb2:	fa01 f303 	lsl.w	r3, r1, r3
 800afb6:	930e      	str	r3, [sp, #56]	; 0x38
 800afb8:	2300      	movs	r3, #0
 800afba:	930d      	str	r3, [sp, #52]	; 0x34
 800afbc:	eb0a 0602 	add.w	r6, sl, r2
 800afc0:	9b04      	ldr	r3, [sp, #16]
 800afc2:	45b2      	cmp	sl, r6
 800afc4:	4417      	add	r7, r2
 800afc6:	441f      	add	r7, r3
 800afc8:	4653      	mov	r3, sl
 800afca:	bfa8      	it	ge
 800afcc:	4633      	movge	r3, r6
 800afce:	42bb      	cmp	r3, r7
 800afd0:	bfa8      	it	ge
 800afd2:	463b      	movge	r3, r7
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bfc2      	ittt	gt
 800afd8:	1af6      	subgt	r6, r6, r3
 800afda:	1aff      	subgt	r7, r7, r3
 800afdc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800afe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dd17      	ble.n	800b016 <_strtod_l+0x736>
 800afe6:	4659      	mov	r1, fp
 800afe8:	461a      	mov	r2, r3
 800afea:	4620      	mov	r0, r4
 800afec:	f7ff f9ae 	bl	800a34c <__pow5mult>
 800aff0:	4683      	mov	fp, r0
 800aff2:	2800      	cmp	r0, #0
 800aff4:	f43f aeb8 	beq.w	800ad68 <_strtod_l+0x488>
 800aff8:	4601      	mov	r1, r0
 800affa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800affc:	4620      	mov	r0, r4
 800affe:	f7ff f8fb 	bl	800a1f8 <__multiply>
 800b002:	900b      	str	r0, [sp, #44]	; 0x2c
 800b004:	2800      	cmp	r0, #0
 800b006:	f43f aeaf 	beq.w	800ad68 <_strtod_l+0x488>
 800b00a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b00c:	4620      	mov	r0, r4
 800b00e:	f7fe ffdd 	bl	8009fcc <_Bfree>
 800b012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b014:	9316      	str	r3, [sp, #88]	; 0x58
 800b016:	2e00      	cmp	r6, #0
 800b018:	f300 808c 	bgt.w	800b134 <_strtod_l+0x854>
 800b01c:	9b08      	ldr	r3, [sp, #32]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	dd08      	ble.n	800b034 <_strtod_l+0x754>
 800b022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b024:	9905      	ldr	r1, [sp, #20]
 800b026:	4620      	mov	r0, r4
 800b028:	f7ff f990 	bl	800a34c <__pow5mult>
 800b02c:	9005      	str	r0, [sp, #20]
 800b02e:	2800      	cmp	r0, #0
 800b030:	f43f ae9a 	beq.w	800ad68 <_strtod_l+0x488>
 800b034:	2f00      	cmp	r7, #0
 800b036:	dd08      	ble.n	800b04a <_strtod_l+0x76a>
 800b038:	9905      	ldr	r1, [sp, #20]
 800b03a:	463a      	mov	r2, r7
 800b03c:	4620      	mov	r0, r4
 800b03e:	f7ff f9df 	bl	800a400 <__lshift>
 800b042:	9005      	str	r0, [sp, #20]
 800b044:	2800      	cmp	r0, #0
 800b046:	f43f ae8f 	beq.w	800ad68 <_strtod_l+0x488>
 800b04a:	f1ba 0f00 	cmp.w	sl, #0
 800b04e:	dd08      	ble.n	800b062 <_strtod_l+0x782>
 800b050:	4659      	mov	r1, fp
 800b052:	4652      	mov	r2, sl
 800b054:	4620      	mov	r0, r4
 800b056:	f7ff f9d3 	bl	800a400 <__lshift>
 800b05a:	4683      	mov	fp, r0
 800b05c:	2800      	cmp	r0, #0
 800b05e:	f43f ae83 	beq.w	800ad68 <_strtod_l+0x488>
 800b062:	9a05      	ldr	r2, [sp, #20]
 800b064:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b066:	4620      	mov	r0, r4
 800b068:	f7ff fa52 	bl	800a510 <__mdiff>
 800b06c:	4605      	mov	r5, r0
 800b06e:	2800      	cmp	r0, #0
 800b070:	f43f ae7a 	beq.w	800ad68 <_strtod_l+0x488>
 800b074:	68c3      	ldr	r3, [r0, #12]
 800b076:	930b      	str	r3, [sp, #44]	; 0x2c
 800b078:	2300      	movs	r3, #0
 800b07a:	60c3      	str	r3, [r0, #12]
 800b07c:	4659      	mov	r1, fp
 800b07e:	f7ff fa2b 	bl	800a4d8 <__mcmp>
 800b082:	2800      	cmp	r0, #0
 800b084:	da60      	bge.n	800b148 <_strtod_l+0x868>
 800b086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b088:	ea53 0308 	orrs.w	r3, r3, r8
 800b08c:	f040 8084 	bne.w	800b198 <_strtod_l+0x8b8>
 800b090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b094:	2b00      	cmp	r3, #0
 800b096:	d17f      	bne.n	800b198 <_strtod_l+0x8b8>
 800b098:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b09c:	0d1b      	lsrs	r3, r3, #20
 800b09e:	051b      	lsls	r3, r3, #20
 800b0a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b0a4:	d978      	bls.n	800b198 <_strtod_l+0x8b8>
 800b0a6:	696b      	ldr	r3, [r5, #20]
 800b0a8:	b913      	cbnz	r3, 800b0b0 <_strtod_l+0x7d0>
 800b0aa:	692b      	ldr	r3, [r5, #16]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	dd73      	ble.n	800b198 <_strtod_l+0x8b8>
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7ff f9a3 	bl	800a400 <__lshift>
 800b0ba:	4659      	mov	r1, fp
 800b0bc:	4605      	mov	r5, r0
 800b0be:	f7ff fa0b 	bl	800a4d8 <__mcmp>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	dd68      	ble.n	800b198 <_strtod_l+0x8b8>
 800b0c6:	9904      	ldr	r1, [sp, #16]
 800b0c8:	4a54      	ldr	r2, [pc, #336]	; (800b21c <_strtod_l+0x93c>)
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	f000 8084 	beq.w	800b1da <_strtod_l+0x8fa>
 800b0d2:	ea02 0109 	and.w	r1, r2, r9
 800b0d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b0da:	dc7e      	bgt.n	800b1da <_strtod_l+0x8fa>
 800b0dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b0e0:	f77f aeb3 	ble.w	800ae4a <_strtod_l+0x56a>
 800b0e4:	4b4e      	ldr	r3, [pc, #312]	; (800b220 <_strtod_l+0x940>)
 800b0e6:	4640      	mov	r0, r8
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f7f5 fa84 	bl	80005f8 <__aeabi_dmul>
 800b0f0:	4b4a      	ldr	r3, [pc, #296]	; (800b21c <_strtod_l+0x93c>)
 800b0f2:	400b      	ands	r3, r1
 800b0f4:	4680      	mov	r8, r0
 800b0f6:	4689      	mov	r9, r1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f47f ae3f 	bne.w	800ad7c <_strtod_l+0x49c>
 800b0fe:	2322      	movs	r3, #34	; 0x22
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	e63b      	b.n	800ad7c <_strtod_l+0x49c>
 800b104:	f04f 32ff 	mov.w	r2, #4294967295
 800b108:	fa02 f303 	lsl.w	r3, r2, r3
 800b10c:	ea03 0808 	and.w	r8, r3, r8
 800b110:	e6e8      	b.n	800aee4 <_strtod_l+0x604>
 800b112:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b116:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b11a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b11e:	36e2      	adds	r6, #226	; 0xe2
 800b120:	fa01 f306 	lsl.w	r3, r1, r6
 800b124:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b128:	e748      	b.n	800afbc <_strtod_l+0x6dc>
 800b12a:	2100      	movs	r1, #0
 800b12c:	2301      	movs	r3, #1
 800b12e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b132:	e743      	b.n	800afbc <_strtod_l+0x6dc>
 800b134:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b136:	4632      	mov	r2, r6
 800b138:	4620      	mov	r0, r4
 800b13a:	f7ff f961 	bl	800a400 <__lshift>
 800b13e:	9016      	str	r0, [sp, #88]	; 0x58
 800b140:	2800      	cmp	r0, #0
 800b142:	f47f af6b 	bne.w	800b01c <_strtod_l+0x73c>
 800b146:	e60f      	b.n	800ad68 <_strtod_l+0x488>
 800b148:	46ca      	mov	sl, r9
 800b14a:	d171      	bne.n	800b230 <_strtod_l+0x950>
 800b14c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b14e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b152:	b352      	cbz	r2, 800b1aa <_strtod_l+0x8ca>
 800b154:	4a33      	ldr	r2, [pc, #204]	; (800b224 <_strtod_l+0x944>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d12a      	bne.n	800b1b0 <_strtod_l+0x8d0>
 800b15a:	9b04      	ldr	r3, [sp, #16]
 800b15c:	4641      	mov	r1, r8
 800b15e:	b1fb      	cbz	r3, 800b1a0 <_strtod_l+0x8c0>
 800b160:	4b2e      	ldr	r3, [pc, #184]	; (800b21c <_strtod_l+0x93c>)
 800b162:	ea09 0303 	and.w	r3, r9, r3
 800b166:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b16a:	f04f 32ff 	mov.w	r2, #4294967295
 800b16e:	d81a      	bhi.n	800b1a6 <_strtod_l+0x8c6>
 800b170:	0d1b      	lsrs	r3, r3, #20
 800b172:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b176:	fa02 f303 	lsl.w	r3, r2, r3
 800b17a:	4299      	cmp	r1, r3
 800b17c:	d118      	bne.n	800b1b0 <_strtod_l+0x8d0>
 800b17e:	4b2a      	ldr	r3, [pc, #168]	; (800b228 <_strtod_l+0x948>)
 800b180:	459a      	cmp	sl, r3
 800b182:	d102      	bne.n	800b18a <_strtod_l+0x8aa>
 800b184:	3101      	adds	r1, #1
 800b186:	f43f adef 	beq.w	800ad68 <_strtod_l+0x488>
 800b18a:	4b24      	ldr	r3, [pc, #144]	; (800b21c <_strtod_l+0x93c>)
 800b18c:	ea0a 0303 	and.w	r3, sl, r3
 800b190:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b194:	f04f 0800 	mov.w	r8, #0
 800b198:	9b04      	ldr	r3, [sp, #16]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1a2      	bne.n	800b0e4 <_strtod_l+0x804>
 800b19e:	e5ed      	b.n	800ad7c <_strtod_l+0x49c>
 800b1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a4:	e7e9      	b.n	800b17a <_strtod_l+0x89a>
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	e7e7      	b.n	800b17a <_strtod_l+0x89a>
 800b1aa:	ea53 0308 	orrs.w	r3, r3, r8
 800b1ae:	d08a      	beq.n	800b0c6 <_strtod_l+0x7e6>
 800b1b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1b2:	b1e3      	cbz	r3, 800b1ee <_strtod_l+0x90e>
 800b1b4:	ea13 0f0a 	tst.w	r3, sl
 800b1b8:	d0ee      	beq.n	800b198 <_strtod_l+0x8b8>
 800b1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1bc:	9a04      	ldr	r2, [sp, #16]
 800b1be:	4640      	mov	r0, r8
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	b1c3      	cbz	r3, 800b1f6 <_strtod_l+0x916>
 800b1c4:	f7ff fb6f 	bl	800a8a6 <sulp>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	ec51 0b18 	vmov	r0, r1, d8
 800b1d0:	f7f5 f85c 	bl	800028c <__adddf3>
 800b1d4:	4680      	mov	r8, r0
 800b1d6:	4689      	mov	r9, r1
 800b1d8:	e7de      	b.n	800b198 <_strtod_l+0x8b8>
 800b1da:	4013      	ands	r3, r2
 800b1dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b1e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b1e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b1e8:	f04f 38ff 	mov.w	r8, #4294967295
 800b1ec:	e7d4      	b.n	800b198 <_strtod_l+0x8b8>
 800b1ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1f0:	ea13 0f08 	tst.w	r3, r8
 800b1f4:	e7e0      	b.n	800b1b8 <_strtod_l+0x8d8>
 800b1f6:	f7ff fb56 	bl	800a8a6 <sulp>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	ec51 0b18 	vmov	r0, r1, d8
 800b202:	f7f5 f841 	bl	8000288 <__aeabi_dsub>
 800b206:	2200      	movs	r2, #0
 800b208:	2300      	movs	r3, #0
 800b20a:	4680      	mov	r8, r0
 800b20c:	4689      	mov	r9, r1
 800b20e:	f7f5 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b212:	2800      	cmp	r0, #0
 800b214:	d0c0      	beq.n	800b198 <_strtod_l+0x8b8>
 800b216:	e618      	b.n	800ae4a <_strtod_l+0x56a>
 800b218:	fffffc02 	.word	0xfffffc02
 800b21c:	7ff00000 	.word	0x7ff00000
 800b220:	39500000 	.word	0x39500000
 800b224:	000fffff 	.word	0x000fffff
 800b228:	7fefffff 	.word	0x7fefffff
 800b22c:	0800caa0 	.word	0x0800caa0
 800b230:	4659      	mov	r1, fp
 800b232:	4628      	mov	r0, r5
 800b234:	f7ff fac0 	bl	800a7b8 <__ratio>
 800b238:	ec57 6b10 	vmov	r6, r7, d0
 800b23c:	ee10 0a10 	vmov	r0, s0
 800b240:	2200      	movs	r2, #0
 800b242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b246:	4639      	mov	r1, r7
 800b248:	f7f5 fc52 	bl	8000af0 <__aeabi_dcmple>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d071      	beq.n	800b334 <_strtod_l+0xa54>
 800b250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b252:	2b00      	cmp	r3, #0
 800b254:	d17c      	bne.n	800b350 <_strtod_l+0xa70>
 800b256:	f1b8 0f00 	cmp.w	r8, #0
 800b25a:	d15a      	bne.n	800b312 <_strtod_l+0xa32>
 800b25c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b260:	2b00      	cmp	r3, #0
 800b262:	d15d      	bne.n	800b320 <_strtod_l+0xa40>
 800b264:	4b90      	ldr	r3, [pc, #576]	; (800b4a8 <_strtod_l+0xbc8>)
 800b266:	2200      	movs	r2, #0
 800b268:	4630      	mov	r0, r6
 800b26a:	4639      	mov	r1, r7
 800b26c:	f7f5 fc36 	bl	8000adc <__aeabi_dcmplt>
 800b270:	2800      	cmp	r0, #0
 800b272:	d15c      	bne.n	800b32e <_strtod_l+0xa4e>
 800b274:	4630      	mov	r0, r6
 800b276:	4639      	mov	r1, r7
 800b278:	4b8c      	ldr	r3, [pc, #560]	; (800b4ac <_strtod_l+0xbcc>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	f7f5 f9bc 	bl	80005f8 <__aeabi_dmul>
 800b280:	4606      	mov	r6, r0
 800b282:	460f      	mov	r7, r1
 800b284:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b288:	9606      	str	r6, [sp, #24]
 800b28a:	9307      	str	r3, [sp, #28]
 800b28c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b290:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b294:	4b86      	ldr	r3, [pc, #536]	; (800b4b0 <_strtod_l+0xbd0>)
 800b296:	ea0a 0303 	and.w	r3, sl, r3
 800b29a:	930d      	str	r3, [sp, #52]	; 0x34
 800b29c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b29e:	4b85      	ldr	r3, [pc, #532]	; (800b4b4 <_strtod_l+0xbd4>)
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	f040 8090 	bne.w	800b3c6 <_strtod_l+0xae6>
 800b2a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b2aa:	ec49 8b10 	vmov	d0, r8, r9
 800b2ae:	f7ff f9b9 	bl	800a624 <__ulp>
 800b2b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2b6:	ec51 0b10 	vmov	r0, r1, d0
 800b2ba:	f7f5 f99d 	bl	80005f8 <__aeabi_dmul>
 800b2be:	4642      	mov	r2, r8
 800b2c0:	464b      	mov	r3, r9
 800b2c2:	f7f4 ffe3 	bl	800028c <__adddf3>
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4979      	ldr	r1, [pc, #484]	; (800b4b0 <_strtod_l+0xbd0>)
 800b2ca:	4a7b      	ldr	r2, [pc, #492]	; (800b4b8 <_strtod_l+0xbd8>)
 800b2cc:	4019      	ands	r1, r3
 800b2ce:	4291      	cmp	r1, r2
 800b2d0:	4680      	mov	r8, r0
 800b2d2:	d944      	bls.n	800b35e <_strtod_l+0xa7e>
 800b2d4:	ee18 2a90 	vmov	r2, s17
 800b2d8:	4b78      	ldr	r3, [pc, #480]	; (800b4bc <_strtod_l+0xbdc>)
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d104      	bne.n	800b2e8 <_strtod_l+0xa08>
 800b2de:	ee18 3a10 	vmov	r3, s16
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	f43f ad40 	beq.w	800ad68 <_strtod_l+0x488>
 800b2e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b4bc <_strtod_l+0xbdc>
 800b2ec:	f04f 38ff 	mov.w	r8, #4294967295
 800b2f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	f7fe fe6a 	bl	8009fcc <_Bfree>
 800b2f8:	9905      	ldr	r1, [sp, #20]
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f7fe fe66 	bl	8009fcc <_Bfree>
 800b300:	4659      	mov	r1, fp
 800b302:	4620      	mov	r0, r4
 800b304:	f7fe fe62 	bl	8009fcc <_Bfree>
 800b308:	4629      	mov	r1, r5
 800b30a:	4620      	mov	r0, r4
 800b30c:	f7fe fe5e 	bl	8009fcc <_Bfree>
 800b310:	e609      	b.n	800af26 <_strtod_l+0x646>
 800b312:	f1b8 0f01 	cmp.w	r8, #1
 800b316:	d103      	bne.n	800b320 <_strtod_l+0xa40>
 800b318:	f1b9 0f00 	cmp.w	r9, #0
 800b31c:	f43f ad95 	beq.w	800ae4a <_strtod_l+0x56a>
 800b320:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b478 <_strtod_l+0xb98>
 800b324:	4f60      	ldr	r7, [pc, #384]	; (800b4a8 <_strtod_l+0xbc8>)
 800b326:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b32a:	2600      	movs	r6, #0
 800b32c:	e7ae      	b.n	800b28c <_strtod_l+0x9ac>
 800b32e:	4f5f      	ldr	r7, [pc, #380]	; (800b4ac <_strtod_l+0xbcc>)
 800b330:	2600      	movs	r6, #0
 800b332:	e7a7      	b.n	800b284 <_strtod_l+0x9a4>
 800b334:	4b5d      	ldr	r3, [pc, #372]	; (800b4ac <_strtod_l+0xbcc>)
 800b336:	4630      	mov	r0, r6
 800b338:	4639      	mov	r1, r7
 800b33a:	2200      	movs	r2, #0
 800b33c:	f7f5 f95c 	bl	80005f8 <__aeabi_dmul>
 800b340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b342:	4606      	mov	r6, r0
 800b344:	460f      	mov	r7, r1
 800b346:	2b00      	cmp	r3, #0
 800b348:	d09c      	beq.n	800b284 <_strtod_l+0x9a4>
 800b34a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b34e:	e79d      	b.n	800b28c <_strtod_l+0x9ac>
 800b350:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b480 <_strtod_l+0xba0>
 800b354:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b358:	ec57 6b17 	vmov	r6, r7, d7
 800b35c:	e796      	b.n	800b28c <_strtod_l+0x9ac>
 800b35e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b362:	9b04      	ldr	r3, [sp, #16]
 800b364:	46ca      	mov	sl, r9
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1c2      	bne.n	800b2f0 <_strtod_l+0xa10>
 800b36a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b36e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b370:	0d1b      	lsrs	r3, r3, #20
 800b372:	051b      	lsls	r3, r3, #20
 800b374:	429a      	cmp	r2, r3
 800b376:	d1bb      	bne.n	800b2f0 <_strtod_l+0xa10>
 800b378:	4630      	mov	r0, r6
 800b37a:	4639      	mov	r1, r7
 800b37c:	f7f5 fc9c 	bl	8000cb8 <__aeabi_d2lz>
 800b380:	f7f5 f90c 	bl	800059c <__aeabi_l2d>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4630      	mov	r0, r6
 800b38a:	4639      	mov	r1, r7
 800b38c:	f7f4 ff7c 	bl	8000288 <__aeabi_dsub>
 800b390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b392:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b396:	ea43 0308 	orr.w	r3, r3, r8
 800b39a:	4313      	orrs	r3, r2
 800b39c:	4606      	mov	r6, r0
 800b39e:	460f      	mov	r7, r1
 800b3a0:	d054      	beq.n	800b44c <_strtod_l+0xb6c>
 800b3a2:	a339      	add	r3, pc, #228	; (adr r3, 800b488 <_strtod_l+0xba8>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f7f5 fb98 	bl	8000adc <__aeabi_dcmplt>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	f47f ace5 	bne.w	800ad7c <_strtod_l+0x49c>
 800b3b2:	a337      	add	r3, pc, #220	; (adr r3, 800b490 <_strtod_l+0xbb0>)
 800b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	f7f5 fbac 	bl	8000b18 <__aeabi_dcmpgt>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d095      	beq.n	800b2f0 <_strtod_l+0xa10>
 800b3c4:	e4da      	b.n	800ad7c <_strtod_l+0x49c>
 800b3c6:	9b04      	ldr	r3, [sp, #16]
 800b3c8:	b333      	cbz	r3, 800b418 <_strtod_l+0xb38>
 800b3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b3d0:	d822      	bhi.n	800b418 <_strtod_l+0xb38>
 800b3d2:	a331      	add	r3, pc, #196	; (adr r3, 800b498 <_strtod_l+0xbb8>)
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	4630      	mov	r0, r6
 800b3da:	4639      	mov	r1, r7
 800b3dc:	f7f5 fb88 	bl	8000af0 <__aeabi_dcmple>
 800b3e0:	b1a0      	cbz	r0, 800b40c <_strtod_l+0xb2c>
 800b3e2:	4639      	mov	r1, r7
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f7f5 fbdf 	bl	8000ba8 <__aeabi_d2uiz>
 800b3ea:	2801      	cmp	r0, #1
 800b3ec:	bf38      	it	cc
 800b3ee:	2001      	movcc	r0, #1
 800b3f0:	f7f5 f888 	bl	8000504 <__aeabi_ui2d>
 800b3f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	bb23      	cbnz	r3, 800b446 <_strtod_l+0xb66>
 800b3fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b400:	9010      	str	r0, [sp, #64]	; 0x40
 800b402:	9311      	str	r3, [sp, #68]	; 0x44
 800b404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b408:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b40c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b40e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b410:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b414:	1a9b      	subs	r3, r3, r2
 800b416:	930f      	str	r3, [sp, #60]	; 0x3c
 800b418:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b41c:	eeb0 0a48 	vmov.f32	s0, s16
 800b420:	eef0 0a68 	vmov.f32	s1, s17
 800b424:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b428:	f7ff f8fc 	bl	800a624 <__ulp>
 800b42c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b430:	ec53 2b10 	vmov	r2, r3, d0
 800b434:	f7f5 f8e0 	bl	80005f8 <__aeabi_dmul>
 800b438:	ec53 2b18 	vmov	r2, r3, d8
 800b43c:	f7f4 ff26 	bl	800028c <__adddf3>
 800b440:	4680      	mov	r8, r0
 800b442:	4689      	mov	r9, r1
 800b444:	e78d      	b.n	800b362 <_strtod_l+0xa82>
 800b446:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b44a:	e7db      	b.n	800b404 <_strtod_l+0xb24>
 800b44c:	a314      	add	r3, pc, #80	; (adr r3, 800b4a0 <_strtod_l+0xbc0>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f7f5 fb43 	bl	8000adc <__aeabi_dcmplt>
 800b456:	e7b3      	b.n	800b3c0 <_strtod_l+0xae0>
 800b458:	2300      	movs	r3, #0
 800b45a:	930a      	str	r3, [sp, #40]	; 0x28
 800b45c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b45e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	f7ff ba7c 	b.w	800a95e <_strtod_l+0x7e>
 800b466:	2a65      	cmp	r2, #101	; 0x65
 800b468:	f43f ab75 	beq.w	800ab56 <_strtod_l+0x276>
 800b46c:	2a45      	cmp	r2, #69	; 0x45
 800b46e:	f43f ab72 	beq.w	800ab56 <_strtod_l+0x276>
 800b472:	2301      	movs	r3, #1
 800b474:	f7ff bbaa 	b.w	800abcc <_strtod_l+0x2ec>
 800b478:	00000000 	.word	0x00000000
 800b47c:	bff00000 	.word	0xbff00000
 800b480:	00000000 	.word	0x00000000
 800b484:	3ff00000 	.word	0x3ff00000
 800b488:	94a03595 	.word	0x94a03595
 800b48c:	3fdfffff 	.word	0x3fdfffff
 800b490:	35afe535 	.word	0x35afe535
 800b494:	3fe00000 	.word	0x3fe00000
 800b498:	ffc00000 	.word	0xffc00000
 800b49c:	41dfffff 	.word	0x41dfffff
 800b4a0:	94a03595 	.word	0x94a03595
 800b4a4:	3fcfffff 	.word	0x3fcfffff
 800b4a8:	3ff00000 	.word	0x3ff00000
 800b4ac:	3fe00000 	.word	0x3fe00000
 800b4b0:	7ff00000 	.word	0x7ff00000
 800b4b4:	7fe00000 	.word	0x7fe00000
 800b4b8:	7c9fffff 	.word	0x7c9fffff
 800b4bc:	7fefffff 	.word	0x7fefffff

0800b4c0 <_strtod_r>:
 800b4c0:	4b01      	ldr	r3, [pc, #4]	; (800b4c8 <_strtod_r+0x8>)
 800b4c2:	f7ff ba0d 	b.w	800a8e0 <_strtod_l>
 800b4c6:	bf00      	nop
 800b4c8:	20000068 	.word	0x20000068

0800b4cc <_strtol_l.constprop.0>:
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d2:	d001      	beq.n	800b4d8 <_strtol_l.constprop.0+0xc>
 800b4d4:	2b24      	cmp	r3, #36	; 0x24
 800b4d6:	d906      	bls.n	800b4e6 <_strtol_l.constprop.0+0x1a>
 800b4d8:	f7fd fd8a 	bl	8008ff0 <__errno>
 800b4dc:	2316      	movs	r3, #22
 800b4de:	6003      	str	r3, [r0, #0]
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b5cc <_strtol_l.constprop.0+0x100>
 800b4ea:	460d      	mov	r5, r1
 800b4ec:	462e      	mov	r6, r5
 800b4ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b4f6:	f017 0708 	ands.w	r7, r7, #8
 800b4fa:	d1f7      	bne.n	800b4ec <_strtol_l.constprop.0+0x20>
 800b4fc:	2c2d      	cmp	r4, #45	; 0x2d
 800b4fe:	d132      	bne.n	800b566 <_strtol_l.constprop.0+0x9a>
 800b500:	782c      	ldrb	r4, [r5, #0]
 800b502:	2701      	movs	r7, #1
 800b504:	1cb5      	adds	r5, r6, #2
 800b506:	2b00      	cmp	r3, #0
 800b508:	d05b      	beq.n	800b5c2 <_strtol_l.constprop.0+0xf6>
 800b50a:	2b10      	cmp	r3, #16
 800b50c:	d109      	bne.n	800b522 <_strtol_l.constprop.0+0x56>
 800b50e:	2c30      	cmp	r4, #48	; 0x30
 800b510:	d107      	bne.n	800b522 <_strtol_l.constprop.0+0x56>
 800b512:	782c      	ldrb	r4, [r5, #0]
 800b514:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b518:	2c58      	cmp	r4, #88	; 0x58
 800b51a:	d14d      	bne.n	800b5b8 <_strtol_l.constprop.0+0xec>
 800b51c:	786c      	ldrb	r4, [r5, #1]
 800b51e:	2310      	movs	r3, #16
 800b520:	3502      	adds	r5, #2
 800b522:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b526:	f108 38ff 	add.w	r8, r8, #4294967295
 800b52a:	f04f 0e00 	mov.w	lr, #0
 800b52e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b532:	4676      	mov	r6, lr
 800b534:	fb03 8a19 	mls	sl, r3, r9, r8
 800b538:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b53c:	f1bc 0f09 	cmp.w	ip, #9
 800b540:	d816      	bhi.n	800b570 <_strtol_l.constprop.0+0xa4>
 800b542:	4664      	mov	r4, ip
 800b544:	42a3      	cmp	r3, r4
 800b546:	dd24      	ble.n	800b592 <_strtol_l.constprop.0+0xc6>
 800b548:	f1be 3fff 	cmp.w	lr, #4294967295
 800b54c:	d008      	beq.n	800b560 <_strtol_l.constprop.0+0x94>
 800b54e:	45b1      	cmp	r9, r6
 800b550:	d31c      	bcc.n	800b58c <_strtol_l.constprop.0+0xc0>
 800b552:	d101      	bne.n	800b558 <_strtol_l.constprop.0+0x8c>
 800b554:	45a2      	cmp	sl, r4
 800b556:	db19      	blt.n	800b58c <_strtol_l.constprop.0+0xc0>
 800b558:	fb06 4603 	mla	r6, r6, r3, r4
 800b55c:	f04f 0e01 	mov.w	lr, #1
 800b560:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b564:	e7e8      	b.n	800b538 <_strtol_l.constprop.0+0x6c>
 800b566:	2c2b      	cmp	r4, #43	; 0x2b
 800b568:	bf04      	itt	eq
 800b56a:	782c      	ldrbeq	r4, [r5, #0]
 800b56c:	1cb5      	addeq	r5, r6, #2
 800b56e:	e7ca      	b.n	800b506 <_strtol_l.constprop.0+0x3a>
 800b570:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b574:	f1bc 0f19 	cmp.w	ip, #25
 800b578:	d801      	bhi.n	800b57e <_strtol_l.constprop.0+0xb2>
 800b57a:	3c37      	subs	r4, #55	; 0x37
 800b57c:	e7e2      	b.n	800b544 <_strtol_l.constprop.0+0x78>
 800b57e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b582:	f1bc 0f19 	cmp.w	ip, #25
 800b586:	d804      	bhi.n	800b592 <_strtol_l.constprop.0+0xc6>
 800b588:	3c57      	subs	r4, #87	; 0x57
 800b58a:	e7db      	b.n	800b544 <_strtol_l.constprop.0+0x78>
 800b58c:	f04f 3eff 	mov.w	lr, #4294967295
 800b590:	e7e6      	b.n	800b560 <_strtol_l.constprop.0+0x94>
 800b592:	f1be 3fff 	cmp.w	lr, #4294967295
 800b596:	d105      	bne.n	800b5a4 <_strtol_l.constprop.0+0xd8>
 800b598:	2322      	movs	r3, #34	; 0x22
 800b59a:	6003      	str	r3, [r0, #0]
 800b59c:	4646      	mov	r6, r8
 800b59e:	b942      	cbnz	r2, 800b5b2 <_strtol_l.constprop.0+0xe6>
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	e79e      	b.n	800b4e2 <_strtol_l.constprop.0+0x16>
 800b5a4:	b107      	cbz	r7, 800b5a8 <_strtol_l.constprop.0+0xdc>
 800b5a6:	4276      	negs	r6, r6
 800b5a8:	2a00      	cmp	r2, #0
 800b5aa:	d0f9      	beq.n	800b5a0 <_strtol_l.constprop.0+0xd4>
 800b5ac:	f1be 0f00 	cmp.w	lr, #0
 800b5b0:	d000      	beq.n	800b5b4 <_strtol_l.constprop.0+0xe8>
 800b5b2:	1e69      	subs	r1, r5, #1
 800b5b4:	6011      	str	r1, [r2, #0]
 800b5b6:	e7f3      	b.n	800b5a0 <_strtol_l.constprop.0+0xd4>
 800b5b8:	2430      	movs	r4, #48	; 0x30
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1b1      	bne.n	800b522 <_strtol_l.constprop.0+0x56>
 800b5be:	2308      	movs	r3, #8
 800b5c0:	e7af      	b.n	800b522 <_strtol_l.constprop.0+0x56>
 800b5c2:	2c30      	cmp	r4, #48	; 0x30
 800b5c4:	d0a5      	beq.n	800b512 <_strtol_l.constprop.0+0x46>
 800b5c6:	230a      	movs	r3, #10
 800b5c8:	e7ab      	b.n	800b522 <_strtol_l.constprop.0+0x56>
 800b5ca:	bf00      	nop
 800b5cc:	0800cac9 	.word	0x0800cac9

0800b5d0 <_strtol_r>:
 800b5d0:	f7ff bf7c 	b.w	800b4cc <_strtol_l.constprop.0>

0800b5d4 <__ssputs_r>:
 800b5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d8:	688e      	ldr	r6, [r1, #8]
 800b5da:	461f      	mov	r7, r3
 800b5dc:	42be      	cmp	r6, r7
 800b5de:	680b      	ldr	r3, [r1, #0]
 800b5e0:	4682      	mov	sl, r0
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	4690      	mov	r8, r2
 800b5e6:	d82c      	bhi.n	800b642 <__ssputs_r+0x6e>
 800b5e8:	898a      	ldrh	r2, [r1, #12]
 800b5ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5ee:	d026      	beq.n	800b63e <__ssputs_r+0x6a>
 800b5f0:	6965      	ldr	r5, [r4, #20]
 800b5f2:	6909      	ldr	r1, [r1, #16]
 800b5f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5f8:	eba3 0901 	sub.w	r9, r3, r1
 800b5fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b600:	1c7b      	adds	r3, r7, #1
 800b602:	444b      	add	r3, r9
 800b604:	106d      	asrs	r5, r5, #1
 800b606:	429d      	cmp	r5, r3
 800b608:	bf38      	it	cc
 800b60a:	461d      	movcc	r5, r3
 800b60c:	0553      	lsls	r3, r2, #21
 800b60e:	d527      	bpl.n	800b660 <__ssputs_r+0x8c>
 800b610:	4629      	mov	r1, r5
 800b612:	f7fe fc0f 	bl	8009e34 <_malloc_r>
 800b616:	4606      	mov	r6, r0
 800b618:	b360      	cbz	r0, 800b674 <__ssputs_r+0xa0>
 800b61a:	6921      	ldr	r1, [r4, #16]
 800b61c:	464a      	mov	r2, r9
 800b61e:	f000 fbf5 	bl	800be0c <memcpy>
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b62c:	81a3      	strh	r3, [r4, #12]
 800b62e:	6126      	str	r6, [r4, #16]
 800b630:	6165      	str	r5, [r4, #20]
 800b632:	444e      	add	r6, r9
 800b634:	eba5 0509 	sub.w	r5, r5, r9
 800b638:	6026      	str	r6, [r4, #0]
 800b63a:	60a5      	str	r5, [r4, #8]
 800b63c:	463e      	mov	r6, r7
 800b63e:	42be      	cmp	r6, r7
 800b640:	d900      	bls.n	800b644 <__ssputs_r+0x70>
 800b642:	463e      	mov	r6, r7
 800b644:	6820      	ldr	r0, [r4, #0]
 800b646:	4632      	mov	r2, r6
 800b648:	4641      	mov	r1, r8
 800b64a:	f000 fba3 	bl	800bd94 <memmove>
 800b64e:	68a3      	ldr	r3, [r4, #8]
 800b650:	1b9b      	subs	r3, r3, r6
 800b652:	60a3      	str	r3, [r4, #8]
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	4433      	add	r3, r6
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	2000      	movs	r0, #0
 800b65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b660:	462a      	mov	r2, r5
 800b662:	f000 ff86 	bl	800c572 <_realloc_r>
 800b666:	4606      	mov	r6, r0
 800b668:	2800      	cmp	r0, #0
 800b66a:	d1e0      	bne.n	800b62e <__ssputs_r+0x5a>
 800b66c:	6921      	ldr	r1, [r4, #16]
 800b66e:	4650      	mov	r0, sl
 800b670:	f7fe fb6c 	bl	8009d4c <_free_r>
 800b674:	230c      	movs	r3, #12
 800b676:	f8ca 3000 	str.w	r3, [sl]
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b680:	81a3      	strh	r3, [r4, #12]
 800b682:	f04f 30ff 	mov.w	r0, #4294967295
 800b686:	e7e9      	b.n	800b65c <__ssputs_r+0x88>

0800b688 <_svfiprintf_r>:
 800b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68c:	4698      	mov	r8, r3
 800b68e:	898b      	ldrh	r3, [r1, #12]
 800b690:	061b      	lsls	r3, r3, #24
 800b692:	b09d      	sub	sp, #116	; 0x74
 800b694:	4607      	mov	r7, r0
 800b696:	460d      	mov	r5, r1
 800b698:	4614      	mov	r4, r2
 800b69a:	d50e      	bpl.n	800b6ba <_svfiprintf_r+0x32>
 800b69c:	690b      	ldr	r3, [r1, #16]
 800b69e:	b963      	cbnz	r3, 800b6ba <_svfiprintf_r+0x32>
 800b6a0:	2140      	movs	r1, #64	; 0x40
 800b6a2:	f7fe fbc7 	bl	8009e34 <_malloc_r>
 800b6a6:	6028      	str	r0, [r5, #0]
 800b6a8:	6128      	str	r0, [r5, #16]
 800b6aa:	b920      	cbnz	r0, 800b6b6 <_svfiprintf_r+0x2e>
 800b6ac:	230c      	movs	r3, #12
 800b6ae:	603b      	str	r3, [r7, #0]
 800b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b4:	e0d0      	b.n	800b858 <_svfiprintf_r+0x1d0>
 800b6b6:	2340      	movs	r3, #64	; 0x40
 800b6b8:	616b      	str	r3, [r5, #20]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b6be:	2320      	movs	r3, #32
 800b6c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6c8:	2330      	movs	r3, #48	; 0x30
 800b6ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b870 <_svfiprintf_r+0x1e8>
 800b6ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6d2:	f04f 0901 	mov.w	r9, #1
 800b6d6:	4623      	mov	r3, r4
 800b6d8:	469a      	mov	sl, r3
 800b6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6de:	b10a      	cbz	r2, 800b6e4 <_svfiprintf_r+0x5c>
 800b6e0:	2a25      	cmp	r2, #37	; 0x25
 800b6e2:	d1f9      	bne.n	800b6d8 <_svfiprintf_r+0x50>
 800b6e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b6e8:	d00b      	beq.n	800b702 <_svfiprintf_r+0x7a>
 800b6ea:	465b      	mov	r3, fp
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	f7ff ff6f 	bl	800b5d4 <__ssputs_r>
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	f000 80a9 	beq.w	800b84e <_svfiprintf_r+0x1c6>
 800b6fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6fe:	445a      	add	r2, fp
 800b700:	9209      	str	r2, [sp, #36]	; 0x24
 800b702:	f89a 3000 	ldrb.w	r3, [sl]
 800b706:	2b00      	cmp	r3, #0
 800b708:	f000 80a1 	beq.w	800b84e <_svfiprintf_r+0x1c6>
 800b70c:	2300      	movs	r3, #0
 800b70e:	f04f 32ff 	mov.w	r2, #4294967295
 800b712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b716:	f10a 0a01 	add.w	sl, sl, #1
 800b71a:	9304      	str	r3, [sp, #16]
 800b71c:	9307      	str	r3, [sp, #28]
 800b71e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b722:	931a      	str	r3, [sp, #104]	; 0x68
 800b724:	4654      	mov	r4, sl
 800b726:	2205      	movs	r2, #5
 800b728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72c:	4850      	ldr	r0, [pc, #320]	; (800b870 <_svfiprintf_r+0x1e8>)
 800b72e:	f7f4 fd4f 	bl	80001d0 <memchr>
 800b732:	9a04      	ldr	r2, [sp, #16]
 800b734:	b9d8      	cbnz	r0, 800b76e <_svfiprintf_r+0xe6>
 800b736:	06d0      	lsls	r0, r2, #27
 800b738:	bf44      	itt	mi
 800b73a:	2320      	movmi	r3, #32
 800b73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b740:	0711      	lsls	r1, r2, #28
 800b742:	bf44      	itt	mi
 800b744:	232b      	movmi	r3, #43	; 0x2b
 800b746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b74a:	f89a 3000 	ldrb.w	r3, [sl]
 800b74e:	2b2a      	cmp	r3, #42	; 0x2a
 800b750:	d015      	beq.n	800b77e <_svfiprintf_r+0xf6>
 800b752:	9a07      	ldr	r2, [sp, #28]
 800b754:	4654      	mov	r4, sl
 800b756:	2000      	movs	r0, #0
 800b758:	f04f 0c0a 	mov.w	ip, #10
 800b75c:	4621      	mov	r1, r4
 800b75e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b762:	3b30      	subs	r3, #48	; 0x30
 800b764:	2b09      	cmp	r3, #9
 800b766:	d94d      	bls.n	800b804 <_svfiprintf_r+0x17c>
 800b768:	b1b0      	cbz	r0, 800b798 <_svfiprintf_r+0x110>
 800b76a:	9207      	str	r2, [sp, #28]
 800b76c:	e014      	b.n	800b798 <_svfiprintf_r+0x110>
 800b76e:	eba0 0308 	sub.w	r3, r0, r8
 800b772:	fa09 f303 	lsl.w	r3, r9, r3
 800b776:	4313      	orrs	r3, r2
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	46a2      	mov	sl, r4
 800b77c:	e7d2      	b.n	800b724 <_svfiprintf_r+0x9c>
 800b77e:	9b03      	ldr	r3, [sp, #12]
 800b780:	1d19      	adds	r1, r3, #4
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	9103      	str	r1, [sp, #12]
 800b786:	2b00      	cmp	r3, #0
 800b788:	bfbb      	ittet	lt
 800b78a:	425b      	neglt	r3, r3
 800b78c:	f042 0202 	orrlt.w	r2, r2, #2
 800b790:	9307      	strge	r3, [sp, #28]
 800b792:	9307      	strlt	r3, [sp, #28]
 800b794:	bfb8      	it	lt
 800b796:	9204      	strlt	r2, [sp, #16]
 800b798:	7823      	ldrb	r3, [r4, #0]
 800b79a:	2b2e      	cmp	r3, #46	; 0x2e
 800b79c:	d10c      	bne.n	800b7b8 <_svfiprintf_r+0x130>
 800b79e:	7863      	ldrb	r3, [r4, #1]
 800b7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a2:	d134      	bne.n	800b80e <_svfiprintf_r+0x186>
 800b7a4:	9b03      	ldr	r3, [sp, #12]
 800b7a6:	1d1a      	adds	r2, r3, #4
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	9203      	str	r2, [sp, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	bfb8      	it	lt
 800b7b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7b4:	3402      	adds	r4, #2
 800b7b6:	9305      	str	r3, [sp, #20]
 800b7b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b880 <_svfiprintf_r+0x1f8>
 800b7bc:	7821      	ldrb	r1, [r4, #0]
 800b7be:	2203      	movs	r2, #3
 800b7c0:	4650      	mov	r0, sl
 800b7c2:	f7f4 fd05 	bl	80001d0 <memchr>
 800b7c6:	b138      	cbz	r0, 800b7d8 <_svfiprintf_r+0x150>
 800b7c8:	9b04      	ldr	r3, [sp, #16]
 800b7ca:	eba0 000a 	sub.w	r0, r0, sl
 800b7ce:	2240      	movs	r2, #64	; 0x40
 800b7d0:	4082      	lsls	r2, r0
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	3401      	adds	r4, #1
 800b7d6:	9304      	str	r3, [sp, #16]
 800b7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7dc:	4825      	ldr	r0, [pc, #148]	; (800b874 <_svfiprintf_r+0x1ec>)
 800b7de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7e2:	2206      	movs	r2, #6
 800b7e4:	f7f4 fcf4 	bl	80001d0 <memchr>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d038      	beq.n	800b85e <_svfiprintf_r+0x1d6>
 800b7ec:	4b22      	ldr	r3, [pc, #136]	; (800b878 <_svfiprintf_r+0x1f0>)
 800b7ee:	bb1b      	cbnz	r3, 800b838 <_svfiprintf_r+0x1b0>
 800b7f0:	9b03      	ldr	r3, [sp, #12]
 800b7f2:	3307      	adds	r3, #7
 800b7f4:	f023 0307 	bic.w	r3, r3, #7
 800b7f8:	3308      	adds	r3, #8
 800b7fa:	9303      	str	r3, [sp, #12]
 800b7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7fe:	4433      	add	r3, r6
 800b800:	9309      	str	r3, [sp, #36]	; 0x24
 800b802:	e768      	b.n	800b6d6 <_svfiprintf_r+0x4e>
 800b804:	fb0c 3202 	mla	r2, ip, r2, r3
 800b808:	460c      	mov	r4, r1
 800b80a:	2001      	movs	r0, #1
 800b80c:	e7a6      	b.n	800b75c <_svfiprintf_r+0xd4>
 800b80e:	2300      	movs	r3, #0
 800b810:	3401      	adds	r4, #1
 800b812:	9305      	str	r3, [sp, #20]
 800b814:	4619      	mov	r1, r3
 800b816:	f04f 0c0a 	mov.w	ip, #10
 800b81a:	4620      	mov	r0, r4
 800b81c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b820:	3a30      	subs	r2, #48	; 0x30
 800b822:	2a09      	cmp	r2, #9
 800b824:	d903      	bls.n	800b82e <_svfiprintf_r+0x1a6>
 800b826:	2b00      	cmp	r3, #0
 800b828:	d0c6      	beq.n	800b7b8 <_svfiprintf_r+0x130>
 800b82a:	9105      	str	r1, [sp, #20]
 800b82c:	e7c4      	b.n	800b7b8 <_svfiprintf_r+0x130>
 800b82e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b832:	4604      	mov	r4, r0
 800b834:	2301      	movs	r3, #1
 800b836:	e7f0      	b.n	800b81a <_svfiprintf_r+0x192>
 800b838:	ab03      	add	r3, sp, #12
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	462a      	mov	r2, r5
 800b83e:	4b0f      	ldr	r3, [pc, #60]	; (800b87c <_svfiprintf_r+0x1f4>)
 800b840:	a904      	add	r1, sp, #16
 800b842:	4638      	mov	r0, r7
 800b844:	f7fc fc74 	bl	8008130 <_printf_float>
 800b848:	1c42      	adds	r2, r0, #1
 800b84a:	4606      	mov	r6, r0
 800b84c:	d1d6      	bne.n	800b7fc <_svfiprintf_r+0x174>
 800b84e:	89ab      	ldrh	r3, [r5, #12]
 800b850:	065b      	lsls	r3, r3, #25
 800b852:	f53f af2d 	bmi.w	800b6b0 <_svfiprintf_r+0x28>
 800b856:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b858:	b01d      	add	sp, #116	; 0x74
 800b85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85e:	ab03      	add	r3, sp, #12
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	462a      	mov	r2, r5
 800b864:	4b05      	ldr	r3, [pc, #20]	; (800b87c <_svfiprintf_r+0x1f4>)
 800b866:	a904      	add	r1, sp, #16
 800b868:	4638      	mov	r0, r7
 800b86a:	f7fc ff05 	bl	8008678 <_printf_i>
 800b86e:	e7eb      	b.n	800b848 <_svfiprintf_r+0x1c0>
 800b870:	0800cbc9 	.word	0x0800cbc9
 800b874:	0800cbd3 	.word	0x0800cbd3
 800b878:	08008131 	.word	0x08008131
 800b87c:	0800b5d5 	.word	0x0800b5d5
 800b880:	0800cbcf 	.word	0x0800cbcf

0800b884 <__sfputc_r>:
 800b884:	6893      	ldr	r3, [r2, #8]
 800b886:	3b01      	subs	r3, #1
 800b888:	2b00      	cmp	r3, #0
 800b88a:	b410      	push	{r4}
 800b88c:	6093      	str	r3, [r2, #8]
 800b88e:	da08      	bge.n	800b8a2 <__sfputc_r+0x1e>
 800b890:	6994      	ldr	r4, [r2, #24]
 800b892:	42a3      	cmp	r3, r4
 800b894:	db01      	blt.n	800b89a <__sfputc_r+0x16>
 800b896:	290a      	cmp	r1, #10
 800b898:	d103      	bne.n	800b8a2 <__sfputc_r+0x1e>
 800b89a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b89e:	f000 b9e3 	b.w	800bc68 <__swbuf_r>
 800b8a2:	6813      	ldr	r3, [r2, #0]
 800b8a4:	1c58      	adds	r0, r3, #1
 800b8a6:	6010      	str	r0, [r2, #0]
 800b8a8:	7019      	strb	r1, [r3, #0]
 800b8aa:	4608      	mov	r0, r1
 800b8ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <__sfputs_r>:
 800b8b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	460f      	mov	r7, r1
 800b8b8:	4614      	mov	r4, r2
 800b8ba:	18d5      	adds	r5, r2, r3
 800b8bc:	42ac      	cmp	r4, r5
 800b8be:	d101      	bne.n	800b8c4 <__sfputs_r+0x12>
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	e007      	b.n	800b8d4 <__sfputs_r+0x22>
 800b8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c8:	463a      	mov	r2, r7
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f7ff ffda 	bl	800b884 <__sfputc_r>
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	d1f3      	bne.n	800b8bc <__sfputs_r+0xa>
 800b8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8d8 <_vfiprintf_r>:
 800b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	460d      	mov	r5, r1
 800b8de:	b09d      	sub	sp, #116	; 0x74
 800b8e0:	4614      	mov	r4, r2
 800b8e2:	4698      	mov	r8, r3
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	b118      	cbz	r0, 800b8f0 <_vfiprintf_r+0x18>
 800b8e8:	6a03      	ldr	r3, [r0, #32]
 800b8ea:	b90b      	cbnz	r3, 800b8f0 <_vfiprintf_r+0x18>
 800b8ec:	f7fd fa82 	bl	8008df4 <__sinit>
 800b8f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8f2:	07d9      	lsls	r1, r3, #31
 800b8f4:	d405      	bmi.n	800b902 <_vfiprintf_r+0x2a>
 800b8f6:	89ab      	ldrh	r3, [r5, #12]
 800b8f8:	059a      	lsls	r2, r3, #22
 800b8fa:	d402      	bmi.n	800b902 <_vfiprintf_r+0x2a>
 800b8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8fe:	f7fd fba2 	bl	8009046 <__retarget_lock_acquire_recursive>
 800b902:	89ab      	ldrh	r3, [r5, #12]
 800b904:	071b      	lsls	r3, r3, #28
 800b906:	d501      	bpl.n	800b90c <_vfiprintf_r+0x34>
 800b908:	692b      	ldr	r3, [r5, #16]
 800b90a:	b99b      	cbnz	r3, 800b934 <_vfiprintf_r+0x5c>
 800b90c:	4629      	mov	r1, r5
 800b90e:	4630      	mov	r0, r6
 800b910:	f000 f9e8 	bl	800bce4 <__swsetup_r>
 800b914:	b170      	cbz	r0, 800b934 <_vfiprintf_r+0x5c>
 800b916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b918:	07dc      	lsls	r4, r3, #31
 800b91a:	d504      	bpl.n	800b926 <_vfiprintf_r+0x4e>
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	b01d      	add	sp, #116	; 0x74
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b926:	89ab      	ldrh	r3, [r5, #12]
 800b928:	0598      	lsls	r0, r3, #22
 800b92a:	d4f7      	bmi.n	800b91c <_vfiprintf_r+0x44>
 800b92c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b92e:	f7fd fb8b 	bl	8009048 <__retarget_lock_release_recursive>
 800b932:	e7f3      	b.n	800b91c <_vfiprintf_r+0x44>
 800b934:	2300      	movs	r3, #0
 800b936:	9309      	str	r3, [sp, #36]	; 0x24
 800b938:	2320      	movs	r3, #32
 800b93a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b93e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b942:	2330      	movs	r3, #48	; 0x30
 800b944:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800baf8 <_vfiprintf_r+0x220>
 800b948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b94c:	f04f 0901 	mov.w	r9, #1
 800b950:	4623      	mov	r3, r4
 800b952:	469a      	mov	sl, r3
 800b954:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b958:	b10a      	cbz	r2, 800b95e <_vfiprintf_r+0x86>
 800b95a:	2a25      	cmp	r2, #37	; 0x25
 800b95c:	d1f9      	bne.n	800b952 <_vfiprintf_r+0x7a>
 800b95e:	ebba 0b04 	subs.w	fp, sl, r4
 800b962:	d00b      	beq.n	800b97c <_vfiprintf_r+0xa4>
 800b964:	465b      	mov	r3, fp
 800b966:	4622      	mov	r2, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7ff ffa1 	bl	800b8b2 <__sfputs_r>
 800b970:	3001      	adds	r0, #1
 800b972:	f000 80a9 	beq.w	800bac8 <_vfiprintf_r+0x1f0>
 800b976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b978:	445a      	add	r2, fp
 800b97a:	9209      	str	r2, [sp, #36]	; 0x24
 800b97c:	f89a 3000 	ldrb.w	r3, [sl]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 80a1 	beq.w	800bac8 <_vfiprintf_r+0x1f0>
 800b986:	2300      	movs	r3, #0
 800b988:	f04f 32ff 	mov.w	r2, #4294967295
 800b98c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b990:	f10a 0a01 	add.w	sl, sl, #1
 800b994:	9304      	str	r3, [sp, #16]
 800b996:	9307      	str	r3, [sp, #28]
 800b998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b99c:	931a      	str	r3, [sp, #104]	; 0x68
 800b99e:	4654      	mov	r4, sl
 800b9a0:	2205      	movs	r2, #5
 800b9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a6:	4854      	ldr	r0, [pc, #336]	; (800baf8 <_vfiprintf_r+0x220>)
 800b9a8:	f7f4 fc12 	bl	80001d0 <memchr>
 800b9ac:	9a04      	ldr	r2, [sp, #16]
 800b9ae:	b9d8      	cbnz	r0, 800b9e8 <_vfiprintf_r+0x110>
 800b9b0:	06d1      	lsls	r1, r2, #27
 800b9b2:	bf44      	itt	mi
 800b9b4:	2320      	movmi	r3, #32
 800b9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ba:	0713      	lsls	r3, r2, #28
 800b9bc:	bf44      	itt	mi
 800b9be:	232b      	movmi	r3, #43	; 0x2b
 800b9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ca:	d015      	beq.n	800b9f8 <_vfiprintf_r+0x120>
 800b9cc:	9a07      	ldr	r2, [sp, #28]
 800b9ce:	4654      	mov	r4, sl
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	f04f 0c0a 	mov.w	ip, #10
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9dc:	3b30      	subs	r3, #48	; 0x30
 800b9de:	2b09      	cmp	r3, #9
 800b9e0:	d94d      	bls.n	800ba7e <_vfiprintf_r+0x1a6>
 800b9e2:	b1b0      	cbz	r0, 800ba12 <_vfiprintf_r+0x13a>
 800b9e4:	9207      	str	r2, [sp, #28]
 800b9e6:	e014      	b.n	800ba12 <_vfiprintf_r+0x13a>
 800b9e8:	eba0 0308 	sub.w	r3, r0, r8
 800b9ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	9304      	str	r3, [sp, #16]
 800b9f4:	46a2      	mov	sl, r4
 800b9f6:	e7d2      	b.n	800b99e <_vfiprintf_r+0xc6>
 800b9f8:	9b03      	ldr	r3, [sp, #12]
 800b9fa:	1d19      	adds	r1, r3, #4
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	9103      	str	r1, [sp, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	bfbb      	ittet	lt
 800ba04:	425b      	neglt	r3, r3
 800ba06:	f042 0202 	orrlt.w	r2, r2, #2
 800ba0a:	9307      	strge	r3, [sp, #28]
 800ba0c:	9307      	strlt	r3, [sp, #28]
 800ba0e:	bfb8      	it	lt
 800ba10:	9204      	strlt	r2, [sp, #16]
 800ba12:	7823      	ldrb	r3, [r4, #0]
 800ba14:	2b2e      	cmp	r3, #46	; 0x2e
 800ba16:	d10c      	bne.n	800ba32 <_vfiprintf_r+0x15a>
 800ba18:	7863      	ldrb	r3, [r4, #1]
 800ba1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba1c:	d134      	bne.n	800ba88 <_vfiprintf_r+0x1b0>
 800ba1e:	9b03      	ldr	r3, [sp, #12]
 800ba20:	1d1a      	adds	r2, r3, #4
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	9203      	str	r2, [sp, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bfb8      	it	lt
 800ba2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba2e:	3402      	adds	r4, #2
 800ba30:	9305      	str	r3, [sp, #20]
 800ba32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb08 <_vfiprintf_r+0x230>
 800ba36:	7821      	ldrb	r1, [r4, #0]
 800ba38:	2203      	movs	r2, #3
 800ba3a:	4650      	mov	r0, sl
 800ba3c:	f7f4 fbc8 	bl	80001d0 <memchr>
 800ba40:	b138      	cbz	r0, 800ba52 <_vfiprintf_r+0x17a>
 800ba42:	9b04      	ldr	r3, [sp, #16]
 800ba44:	eba0 000a 	sub.w	r0, r0, sl
 800ba48:	2240      	movs	r2, #64	; 0x40
 800ba4a:	4082      	lsls	r2, r0
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	3401      	adds	r4, #1
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba56:	4829      	ldr	r0, [pc, #164]	; (800bafc <_vfiprintf_r+0x224>)
 800ba58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba5c:	2206      	movs	r2, #6
 800ba5e:	f7f4 fbb7 	bl	80001d0 <memchr>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d03f      	beq.n	800bae6 <_vfiprintf_r+0x20e>
 800ba66:	4b26      	ldr	r3, [pc, #152]	; (800bb00 <_vfiprintf_r+0x228>)
 800ba68:	bb1b      	cbnz	r3, 800bab2 <_vfiprintf_r+0x1da>
 800ba6a:	9b03      	ldr	r3, [sp, #12]
 800ba6c:	3307      	adds	r3, #7
 800ba6e:	f023 0307 	bic.w	r3, r3, #7
 800ba72:	3308      	adds	r3, #8
 800ba74:	9303      	str	r3, [sp, #12]
 800ba76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba78:	443b      	add	r3, r7
 800ba7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba7c:	e768      	b.n	800b950 <_vfiprintf_r+0x78>
 800ba7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba82:	460c      	mov	r4, r1
 800ba84:	2001      	movs	r0, #1
 800ba86:	e7a6      	b.n	800b9d6 <_vfiprintf_r+0xfe>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	3401      	adds	r4, #1
 800ba8c:	9305      	str	r3, [sp, #20]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	f04f 0c0a 	mov.w	ip, #10
 800ba94:	4620      	mov	r0, r4
 800ba96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba9a:	3a30      	subs	r2, #48	; 0x30
 800ba9c:	2a09      	cmp	r2, #9
 800ba9e:	d903      	bls.n	800baa8 <_vfiprintf_r+0x1d0>
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d0c6      	beq.n	800ba32 <_vfiprintf_r+0x15a>
 800baa4:	9105      	str	r1, [sp, #20]
 800baa6:	e7c4      	b.n	800ba32 <_vfiprintf_r+0x15a>
 800baa8:	fb0c 2101 	mla	r1, ip, r1, r2
 800baac:	4604      	mov	r4, r0
 800baae:	2301      	movs	r3, #1
 800bab0:	e7f0      	b.n	800ba94 <_vfiprintf_r+0x1bc>
 800bab2:	ab03      	add	r3, sp, #12
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	462a      	mov	r2, r5
 800bab8:	4b12      	ldr	r3, [pc, #72]	; (800bb04 <_vfiprintf_r+0x22c>)
 800baba:	a904      	add	r1, sp, #16
 800babc:	4630      	mov	r0, r6
 800babe:	f7fc fb37 	bl	8008130 <_printf_float>
 800bac2:	4607      	mov	r7, r0
 800bac4:	1c78      	adds	r0, r7, #1
 800bac6:	d1d6      	bne.n	800ba76 <_vfiprintf_r+0x19e>
 800bac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baca:	07d9      	lsls	r1, r3, #31
 800bacc:	d405      	bmi.n	800bada <_vfiprintf_r+0x202>
 800bace:	89ab      	ldrh	r3, [r5, #12]
 800bad0:	059a      	lsls	r2, r3, #22
 800bad2:	d402      	bmi.n	800bada <_vfiprintf_r+0x202>
 800bad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bad6:	f7fd fab7 	bl	8009048 <__retarget_lock_release_recursive>
 800bada:	89ab      	ldrh	r3, [r5, #12]
 800badc:	065b      	lsls	r3, r3, #25
 800bade:	f53f af1d 	bmi.w	800b91c <_vfiprintf_r+0x44>
 800bae2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bae4:	e71c      	b.n	800b920 <_vfiprintf_r+0x48>
 800bae6:	ab03      	add	r3, sp, #12
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	462a      	mov	r2, r5
 800baec:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <_vfiprintf_r+0x22c>)
 800baee:	a904      	add	r1, sp, #16
 800baf0:	4630      	mov	r0, r6
 800baf2:	f7fc fdc1 	bl	8008678 <_printf_i>
 800baf6:	e7e4      	b.n	800bac2 <_vfiprintf_r+0x1ea>
 800baf8:	0800cbc9 	.word	0x0800cbc9
 800bafc:	0800cbd3 	.word	0x0800cbd3
 800bb00:	08008131 	.word	0x08008131
 800bb04:	0800b8b3 	.word	0x0800b8b3
 800bb08:	0800cbcf 	.word	0x0800cbcf

0800bb0c <__sflush_r>:
 800bb0c:	898a      	ldrh	r2, [r1, #12]
 800bb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb12:	4605      	mov	r5, r0
 800bb14:	0710      	lsls	r0, r2, #28
 800bb16:	460c      	mov	r4, r1
 800bb18:	d458      	bmi.n	800bbcc <__sflush_r+0xc0>
 800bb1a:	684b      	ldr	r3, [r1, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dc05      	bgt.n	800bb2c <__sflush_r+0x20>
 800bb20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	dc02      	bgt.n	800bb2c <__sflush_r+0x20>
 800bb26:	2000      	movs	r0, #0
 800bb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb2e:	2e00      	cmp	r6, #0
 800bb30:	d0f9      	beq.n	800bb26 <__sflush_r+0x1a>
 800bb32:	2300      	movs	r3, #0
 800bb34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb38:	682f      	ldr	r7, [r5, #0]
 800bb3a:	6a21      	ldr	r1, [r4, #32]
 800bb3c:	602b      	str	r3, [r5, #0]
 800bb3e:	d032      	beq.n	800bba6 <__sflush_r+0x9a>
 800bb40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	075a      	lsls	r2, r3, #29
 800bb46:	d505      	bpl.n	800bb54 <__sflush_r+0x48>
 800bb48:	6863      	ldr	r3, [r4, #4]
 800bb4a:	1ac0      	subs	r0, r0, r3
 800bb4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb4e:	b10b      	cbz	r3, 800bb54 <__sflush_r+0x48>
 800bb50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb52:	1ac0      	subs	r0, r0, r3
 800bb54:	2300      	movs	r3, #0
 800bb56:	4602      	mov	r2, r0
 800bb58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb5a:	6a21      	ldr	r1, [r4, #32]
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	47b0      	blx	r6
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	89a3      	ldrh	r3, [r4, #12]
 800bb64:	d106      	bne.n	800bb74 <__sflush_r+0x68>
 800bb66:	6829      	ldr	r1, [r5, #0]
 800bb68:	291d      	cmp	r1, #29
 800bb6a:	d82b      	bhi.n	800bbc4 <__sflush_r+0xb8>
 800bb6c:	4a29      	ldr	r2, [pc, #164]	; (800bc14 <__sflush_r+0x108>)
 800bb6e:	410a      	asrs	r2, r1
 800bb70:	07d6      	lsls	r6, r2, #31
 800bb72:	d427      	bmi.n	800bbc4 <__sflush_r+0xb8>
 800bb74:	2200      	movs	r2, #0
 800bb76:	6062      	str	r2, [r4, #4]
 800bb78:	04d9      	lsls	r1, r3, #19
 800bb7a:	6922      	ldr	r2, [r4, #16]
 800bb7c:	6022      	str	r2, [r4, #0]
 800bb7e:	d504      	bpl.n	800bb8a <__sflush_r+0x7e>
 800bb80:	1c42      	adds	r2, r0, #1
 800bb82:	d101      	bne.n	800bb88 <__sflush_r+0x7c>
 800bb84:	682b      	ldr	r3, [r5, #0]
 800bb86:	b903      	cbnz	r3, 800bb8a <__sflush_r+0x7e>
 800bb88:	6560      	str	r0, [r4, #84]	; 0x54
 800bb8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb8c:	602f      	str	r7, [r5, #0]
 800bb8e:	2900      	cmp	r1, #0
 800bb90:	d0c9      	beq.n	800bb26 <__sflush_r+0x1a>
 800bb92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb96:	4299      	cmp	r1, r3
 800bb98:	d002      	beq.n	800bba0 <__sflush_r+0x94>
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	f7fe f8d6 	bl	8009d4c <_free_r>
 800bba0:	2000      	movs	r0, #0
 800bba2:	6360      	str	r0, [r4, #52]	; 0x34
 800bba4:	e7c0      	b.n	800bb28 <__sflush_r+0x1c>
 800bba6:	2301      	movs	r3, #1
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b0      	blx	r6
 800bbac:	1c41      	adds	r1, r0, #1
 800bbae:	d1c8      	bne.n	800bb42 <__sflush_r+0x36>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d0c5      	beq.n	800bb42 <__sflush_r+0x36>
 800bbb6:	2b1d      	cmp	r3, #29
 800bbb8:	d001      	beq.n	800bbbe <__sflush_r+0xb2>
 800bbba:	2b16      	cmp	r3, #22
 800bbbc:	d101      	bne.n	800bbc2 <__sflush_r+0xb6>
 800bbbe:	602f      	str	r7, [r5, #0]
 800bbc0:	e7b1      	b.n	800bb26 <__sflush_r+0x1a>
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	e7ad      	b.n	800bb28 <__sflush_r+0x1c>
 800bbcc:	690f      	ldr	r7, [r1, #16]
 800bbce:	2f00      	cmp	r7, #0
 800bbd0:	d0a9      	beq.n	800bb26 <__sflush_r+0x1a>
 800bbd2:	0793      	lsls	r3, r2, #30
 800bbd4:	680e      	ldr	r6, [r1, #0]
 800bbd6:	bf08      	it	eq
 800bbd8:	694b      	ldreq	r3, [r1, #20]
 800bbda:	600f      	str	r7, [r1, #0]
 800bbdc:	bf18      	it	ne
 800bbde:	2300      	movne	r3, #0
 800bbe0:	eba6 0807 	sub.w	r8, r6, r7
 800bbe4:	608b      	str	r3, [r1, #8]
 800bbe6:	f1b8 0f00 	cmp.w	r8, #0
 800bbea:	dd9c      	ble.n	800bb26 <__sflush_r+0x1a>
 800bbec:	6a21      	ldr	r1, [r4, #32]
 800bbee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbf0:	4643      	mov	r3, r8
 800bbf2:	463a      	mov	r2, r7
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	47b0      	blx	r6
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	dc06      	bgt.n	800bc0a <__sflush_r+0xfe>
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc02:	81a3      	strh	r3, [r4, #12]
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	e78e      	b.n	800bb28 <__sflush_r+0x1c>
 800bc0a:	4407      	add	r7, r0
 800bc0c:	eba8 0800 	sub.w	r8, r8, r0
 800bc10:	e7e9      	b.n	800bbe6 <__sflush_r+0xda>
 800bc12:	bf00      	nop
 800bc14:	dfbffffe 	.word	0xdfbffffe

0800bc18 <_fflush_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	690b      	ldr	r3, [r1, #16]
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	b913      	cbnz	r3, 800bc28 <_fflush_r+0x10>
 800bc22:	2500      	movs	r5, #0
 800bc24:	4628      	mov	r0, r5
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	b118      	cbz	r0, 800bc32 <_fflush_r+0x1a>
 800bc2a:	6a03      	ldr	r3, [r0, #32]
 800bc2c:	b90b      	cbnz	r3, 800bc32 <_fflush_r+0x1a>
 800bc2e:	f7fd f8e1 	bl	8008df4 <__sinit>
 800bc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d0f3      	beq.n	800bc22 <_fflush_r+0xa>
 800bc3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc3c:	07d0      	lsls	r0, r2, #31
 800bc3e:	d404      	bmi.n	800bc4a <_fflush_r+0x32>
 800bc40:	0599      	lsls	r1, r3, #22
 800bc42:	d402      	bmi.n	800bc4a <_fflush_r+0x32>
 800bc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc46:	f7fd f9fe 	bl	8009046 <__retarget_lock_acquire_recursive>
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	f7ff ff5d 	bl	800bb0c <__sflush_r>
 800bc52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc54:	07da      	lsls	r2, r3, #31
 800bc56:	4605      	mov	r5, r0
 800bc58:	d4e4      	bmi.n	800bc24 <_fflush_r+0xc>
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	059b      	lsls	r3, r3, #22
 800bc5e:	d4e1      	bmi.n	800bc24 <_fflush_r+0xc>
 800bc60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc62:	f7fd f9f1 	bl	8009048 <__retarget_lock_release_recursive>
 800bc66:	e7dd      	b.n	800bc24 <_fflush_r+0xc>

0800bc68 <__swbuf_r>:
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6a:	460e      	mov	r6, r1
 800bc6c:	4614      	mov	r4, r2
 800bc6e:	4605      	mov	r5, r0
 800bc70:	b118      	cbz	r0, 800bc7a <__swbuf_r+0x12>
 800bc72:	6a03      	ldr	r3, [r0, #32]
 800bc74:	b90b      	cbnz	r3, 800bc7a <__swbuf_r+0x12>
 800bc76:	f7fd f8bd 	bl	8008df4 <__sinit>
 800bc7a:	69a3      	ldr	r3, [r4, #24]
 800bc7c:	60a3      	str	r3, [r4, #8]
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	071a      	lsls	r2, r3, #28
 800bc82:	d525      	bpl.n	800bcd0 <__swbuf_r+0x68>
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	b31b      	cbz	r3, 800bcd0 <__swbuf_r+0x68>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	6922      	ldr	r2, [r4, #16]
 800bc8c:	1a98      	subs	r0, r3, r2
 800bc8e:	6963      	ldr	r3, [r4, #20]
 800bc90:	b2f6      	uxtb	r6, r6
 800bc92:	4283      	cmp	r3, r0
 800bc94:	4637      	mov	r7, r6
 800bc96:	dc04      	bgt.n	800bca2 <__swbuf_r+0x3a>
 800bc98:	4621      	mov	r1, r4
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f7ff ffbc 	bl	800bc18 <_fflush_r>
 800bca0:	b9e0      	cbnz	r0, 800bcdc <__swbuf_r+0x74>
 800bca2:	68a3      	ldr	r3, [r4, #8]
 800bca4:	3b01      	subs	r3, #1
 800bca6:	60a3      	str	r3, [r4, #8]
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	1c5a      	adds	r2, r3, #1
 800bcac:	6022      	str	r2, [r4, #0]
 800bcae:	701e      	strb	r6, [r3, #0]
 800bcb0:	6962      	ldr	r2, [r4, #20]
 800bcb2:	1c43      	adds	r3, r0, #1
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d004      	beq.n	800bcc2 <__swbuf_r+0x5a>
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	07db      	lsls	r3, r3, #31
 800bcbc:	d506      	bpl.n	800bccc <__swbuf_r+0x64>
 800bcbe:	2e0a      	cmp	r6, #10
 800bcc0:	d104      	bne.n	800bccc <__swbuf_r+0x64>
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	f7ff ffa7 	bl	800bc18 <_fflush_r>
 800bcca:	b938      	cbnz	r0, 800bcdc <__swbuf_r+0x74>
 800bccc:	4638      	mov	r0, r7
 800bcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	f000 f806 	bl	800bce4 <__swsetup_r>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d0d5      	beq.n	800bc88 <__swbuf_r+0x20>
 800bcdc:	f04f 37ff 	mov.w	r7, #4294967295
 800bce0:	e7f4      	b.n	800bccc <__swbuf_r+0x64>
	...

0800bce4 <__swsetup_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	4b2a      	ldr	r3, [pc, #168]	; (800bd90 <__swsetup_r+0xac>)
 800bce8:	4605      	mov	r5, r0
 800bcea:	6818      	ldr	r0, [r3, #0]
 800bcec:	460c      	mov	r4, r1
 800bcee:	b118      	cbz	r0, 800bcf8 <__swsetup_r+0x14>
 800bcf0:	6a03      	ldr	r3, [r0, #32]
 800bcf2:	b90b      	cbnz	r3, 800bcf8 <__swsetup_r+0x14>
 800bcf4:	f7fd f87e 	bl	8008df4 <__sinit>
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcfe:	0718      	lsls	r0, r3, #28
 800bd00:	d422      	bmi.n	800bd48 <__swsetup_r+0x64>
 800bd02:	06d9      	lsls	r1, r3, #27
 800bd04:	d407      	bmi.n	800bd16 <__swsetup_r+0x32>
 800bd06:	2309      	movs	r3, #9
 800bd08:	602b      	str	r3, [r5, #0]
 800bd0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd0e:	81a3      	strh	r3, [r4, #12]
 800bd10:	f04f 30ff 	mov.w	r0, #4294967295
 800bd14:	e034      	b.n	800bd80 <__swsetup_r+0x9c>
 800bd16:	0758      	lsls	r0, r3, #29
 800bd18:	d512      	bpl.n	800bd40 <__swsetup_r+0x5c>
 800bd1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd1c:	b141      	cbz	r1, 800bd30 <__swsetup_r+0x4c>
 800bd1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd22:	4299      	cmp	r1, r3
 800bd24:	d002      	beq.n	800bd2c <__swsetup_r+0x48>
 800bd26:	4628      	mov	r0, r5
 800bd28:	f7fe f810 	bl	8009d4c <_free_r>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	6363      	str	r3, [r4, #52]	; 0x34
 800bd30:	89a3      	ldrh	r3, [r4, #12]
 800bd32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd36:	81a3      	strh	r3, [r4, #12]
 800bd38:	2300      	movs	r3, #0
 800bd3a:	6063      	str	r3, [r4, #4]
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	6023      	str	r3, [r4, #0]
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	f043 0308 	orr.w	r3, r3, #8
 800bd46:	81a3      	strh	r3, [r4, #12]
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	b94b      	cbnz	r3, 800bd60 <__swsetup_r+0x7c>
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd56:	d003      	beq.n	800bd60 <__swsetup_r+0x7c>
 800bd58:	4621      	mov	r1, r4
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f000 fc7e 	bl	800c65c <__smakebuf_r>
 800bd60:	89a0      	ldrh	r0, [r4, #12]
 800bd62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd66:	f010 0301 	ands.w	r3, r0, #1
 800bd6a:	d00a      	beq.n	800bd82 <__swsetup_r+0x9e>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	60a3      	str	r3, [r4, #8]
 800bd70:	6963      	ldr	r3, [r4, #20]
 800bd72:	425b      	negs	r3, r3
 800bd74:	61a3      	str	r3, [r4, #24]
 800bd76:	6923      	ldr	r3, [r4, #16]
 800bd78:	b943      	cbnz	r3, 800bd8c <__swsetup_r+0xa8>
 800bd7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd7e:	d1c4      	bne.n	800bd0a <__swsetup_r+0x26>
 800bd80:	bd38      	pop	{r3, r4, r5, pc}
 800bd82:	0781      	lsls	r1, r0, #30
 800bd84:	bf58      	it	pl
 800bd86:	6963      	ldrpl	r3, [r4, #20]
 800bd88:	60a3      	str	r3, [r4, #8]
 800bd8a:	e7f4      	b.n	800bd76 <__swsetup_r+0x92>
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	e7f7      	b.n	800bd80 <__swsetup_r+0x9c>
 800bd90:	20000064 	.word	0x20000064

0800bd94 <memmove>:
 800bd94:	4288      	cmp	r0, r1
 800bd96:	b510      	push	{r4, lr}
 800bd98:	eb01 0402 	add.w	r4, r1, r2
 800bd9c:	d902      	bls.n	800bda4 <memmove+0x10>
 800bd9e:	4284      	cmp	r4, r0
 800bda0:	4623      	mov	r3, r4
 800bda2:	d807      	bhi.n	800bdb4 <memmove+0x20>
 800bda4:	1e43      	subs	r3, r0, #1
 800bda6:	42a1      	cmp	r1, r4
 800bda8:	d008      	beq.n	800bdbc <memmove+0x28>
 800bdaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdb2:	e7f8      	b.n	800bda6 <memmove+0x12>
 800bdb4:	4402      	add	r2, r0
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	428a      	cmp	r2, r1
 800bdba:	d100      	bne.n	800bdbe <memmove+0x2a>
 800bdbc:	bd10      	pop	{r4, pc}
 800bdbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdc6:	e7f7      	b.n	800bdb8 <memmove+0x24>

0800bdc8 <strncmp>:
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	b16a      	cbz	r2, 800bde8 <strncmp+0x20>
 800bdcc:	3901      	subs	r1, #1
 800bdce:	1884      	adds	r4, r0, r2
 800bdd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d103      	bne.n	800bde4 <strncmp+0x1c>
 800bddc:	42a0      	cmp	r0, r4
 800bdde:	d001      	beq.n	800bde4 <strncmp+0x1c>
 800bde0:	2a00      	cmp	r2, #0
 800bde2:	d1f5      	bne.n	800bdd0 <strncmp+0x8>
 800bde4:	1ad0      	subs	r0, r2, r3
 800bde6:	bd10      	pop	{r4, pc}
 800bde8:	4610      	mov	r0, r2
 800bdea:	e7fc      	b.n	800bde6 <strncmp+0x1e>

0800bdec <_sbrk_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	4d06      	ldr	r5, [pc, #24]	; (800be08 <_sbrk_r+0x1c>)
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	4608      	mov	r0, r1
 800bdf6:	602b      	str	r3, [r5, #0]
 800bdf8:	f7f5 ff98 	bl	8001d2c <_sbrk>
 800bdfc:	1c43      	adds	r3, r0, #1
 800bdfe:	d102      	bne.n	800be06 <_sbrk_r+0x1a>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	b103      	cbz	r3, 800be06 <_sbrk_r+0x1a>
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	bd38      	pop	{r3, r4, r5, pc}
 800be08:	20000618 	.word	0x20000618

0800be0c <memcpy>:
 800be0c:	440a      	add	r2, r1
 800be0e:	4291      	cmp	r1, r2
 800be10:	f100 33ff 	add.w	r3, r0, #4294967295
 800be14:	d100      	bne.n	800be18 <memcpy+0xc>
 800be16:	4770      	bx	lr
 800be18:	b510      	push	{r4, lr}
 800be1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be22:	4291      	cmp	r1, r2
 800be24:	d1f9      	bne.n	800be1a <memcpy+0xe>
 800be26:	bd10      	pop	{r4, pc}

0800be28 <nan>:
 800be28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be30 <nan+0x8>
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	00000000 	.word	0x00000000
 800be34:	7ff80000 	.word	0x7ff80000

0800be38 <__assert_func>:
 800be38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be3a:	4614      	mov	r4, r2
 800be3c:	461a      	mov	r2, r3
 800be3e:	4b09      	ldr	r3, [pc, #36]	; (800be64 <__assert_func+0x2c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4605      	mov	r5, r0
 800be44:	68d8      	ldr	r0, [r3, #12]
 800be46:	b14c      	cbz	r4, 800be5c <__assert_func+0x24>
 800be48:	4b07      	ldr	r3, [pc, #28]	; (800be68 <__assert_func+0x30>)
 800be4a:	9100      	str	r1, [sp, #0]
 800be4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be50:	4906      	ldr	r1, [pc, #24]	; (800be6c <__assert_func+0x34>)
 800be52:	462b      	mov	r3, r5
 800be54:	f000 fbca 	bl	800c5ec <fiprintf>
 800be58:	f000 fc5e 	bl	800c718 <abort>
 800be5c:	4b04      	ldr	r3, [pc, #16]	; (800be70 <__assert_func+0x38>)
 800be5e:	461c      	mov	r4, r3
 800be60:	e7f3      	b.n	800be4a <__assert_func+0x12>
 800be62:	bf00      	nop
 800be64:	20000064 	.word	0x20000064
 800be68:	0800cbe2 	.word	0x0800cbe2
 800be6c:	0800cbef 	.word	0x0800cbef
 800be70:	0800cc1d 	.word	0x0800cc1d

0800be74 <_calloc_r>:
 800be74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be76:	fba1 2402 	umull	r2, r4, r1, r2
 800be7a:	b94c      	cbnz	r4, 800be90 <_calloc_r+0x1c>
 800be7c:	4611      	mov	r1, r2
 800be7e:	9201      	str	r2, [sp, #4]
 800be80:	f7fd ffd8 	bl	8009e34 <_malloc_r>
 800be84:	9a01      	ldr	r2, [sp, #4]
 800be86:	4605      	mov	r5, r0
 800be88:	b930      	cbnz	r0, 800be98 <_calloc_r+0x24>
 800be8a:	4628      	mov	r0, r5
 800be8c:	b003      	add	sp, #12
 800be8e:	bd30      	pop	{r4, r5, pc}
 800be90:	220c      	movs	r2, #12
 800be92:	6002      	str	r2, [r0, #0]
 800be94:	2500      	movs	r5, #0
 800be96:	e7f8      	b.n	800be8a <_calloc_r+0x16>
 800be98:	4621      	mov	r1, r4
 800be9a:	f7fd f856 	bl	8008f4a <memset>
 800be9e:	e7f4      	b.n	800be8a <_calloc_r+0x16>

0800bea0 <rshift>:
 800bea0:	6903      	ldr	r3, [r0, #16]
 800bea2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bea6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800beaa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800beae:	f100 0414 	add.w	r4, r0, #20
 800beb2:	dd45      	ble.n	800bf40 <rshift+0xa0>
 800beb4:	f011 011f 	ands.w	r1, r1, #31
 800beb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bebc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bec0:	d10c      	bne.n	800bedc <rshift+0x3c>
 800bec2:	f100 0710 	add.w	r7, r0, #16
 800bec6:	4629      	mov	r1, r5
 800bec8:	42b1      	cmp	r1, r6
 800beca:	d334      	bcc.n	800bf36 <rshift+0x96>
 800becc:	1a9b      	subs	r3, r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	1eea      	subs	r2, r5, #3
 800bed2:	4296      	cmp	r6, r2
 800bed4:	bf38      	it	cc
 800bed6:	2300      	movcc	r3, #0
 800bed8:	4423      	add	r3, r4
 800beda:	e015      	b.n	800bf08 <rshift+0x68>
 800bedc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bee0:	f1c1 0820 	rsb	r8, r1, #32
 800bee4:	40cf      	lsrs	r7, r1
 800bee6:	f105 0e04 	add.w	lr, r5, #4
 800beea:	46a1      	mov	r9, r4
 800beec:	4576      	cmp	r6, lr
 800beee:	46f4      	mov	ip, lr
 800bef0:	d815      	bhi.n	800bf1e <rshift+0x7e>
 800bef2:	1a9a      	subs	r2, r3, r2
 800bef4:	0092      	lsls	r2, r2, #2
 800bef6:	3a04      	subs	r2, #4
 800bef8:	3501      	adds	r5, #1
 800befa:	42ae      	cmp	r6, r5
 800befc:	bf38      	it	cc
 800befe:	2200      	movcc	r2, #0
 800bf00:	18a3      	adds	r3, r4, r2
 800bf02:	50a7      	str	r7, [r4, r2]
 800bf04:	b107      	cbz	r7, 800bf08 <rshift+0x68>
 800bf06:	3304      	adds	r3, #4
 800bf08:	1b1a      	subs	r2, r3, r4
 800bf0a:	42a3      	cmp	r3, r4
 800bf0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf10:	bf08      	it	eq
 800bf12:	2300      	moveq	r3, #0
 800bf14:	6102      	str	r2, [r0, #16]
 800bf16:	bf08      	it	eq
 800bf18:	6143      	streq	r3, [r0, #20]
 800bf1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf1e:	f8dc c000 	ldr.w	ip, [ip]
 800bf22:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf26:	ea4c 0707 	orr.w	r7, ip, r7
 800bf2a:	f849 7b04 	str.w	r7, [r9], #4
 800bf2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf32:	40cf      	lsrs	r7, r1
 800bf34:	e7da      	b.n	800beec <rshift+0x4c>
 800bf36:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf3a:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf3e:	e7c3      	b.n	800bec8 <rshift+0x28>
 800bf40:	4623      	mov	r3, r4
 800bf42:	e7e1      	b.n	800bf08 <rshift+0x68>

0800bf44 <__hexdig_fun>:
 800bf44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bf48:	2b09      	cmp	r3, #9
 800bf4a:	d802      	bhi.n	800bf52 <__hexdig_fun+0xe>
 800bf4c:	3820      	subs	r0, #32
 800bf4e:	b2c0      	uxtb	r0, r0
 800bf50:	4770      	bx	lr
 800bf52:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bf56:	2b05      	cmp	r3, #5
 800bf58:	d801      	bhi.n	800bf5e <__hexdig_fun+0x1a>
 800bf5a:	3847      	subs	r0, #71	; 0x47
 800bf5c:	e7f7      	b.n	800bf4e <__hexdig_fun+0xa>
 800bf5e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bf62:	2b05      	cmp	r3, #5
 800bf64:	d801      	bhi.n	800bf6a <__hexdig_fun+0x26>
 800bf66:	3827      	subs	r0, #39	; 0x27
 800bf68:	e7f1      	b.n	800bf4e <__hexdig_fun+0xa>
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	4770      	bx	lr
	...

0800bf70 <__gethex>:
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	4617      	mov	r7, r2
 800bf76:	680a      	ldr	r2, [r1, #0]
 800bf78:	b085      	sub	sp, #20
 800bf7a:	f102 0b02 	add.w	fp, r2, #2
 800bf7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bf82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bf86:	4681      	mov	r9, r0
 800bf88:	468a      	mov	sl, r1
 800bf8a:	9302      	str	r3, [sp, #8]
 800bf8c:	32fe      	adds	r2, #254	; 0xfe
 800bf8e:	eb02 030b 	add.w	r3, r2, fp
 800bf92:	46d8      	mov	r8, fp
 800bf94:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bf98:	9301      	str	r3, [sp, #4]
 800bf9a:	2830      	cmp	r0, #48	; 0x30
 800bf9c:	d0f7      	beq.n	800bf8e <__gethex+0x1e>
 800bf9e:	f7ff ffd1 	bl	800bf44 <__hexdig_fun>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d138      	bne.n	800c01a <__gethex+0xaa>
 800bfa8:	49a7      	ldr	r1, [pc, #668]	; (800c248 <__gethex+0x2d8>)
 800bfaa:	2201      	movs	r2, #1
 800bfac:	4640      	mov	r0, r8
 800bfae:	f7ff ff0b 	bl	800bdc8 <strncmp>
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d169      	bne.n	800c08c <__gethex+0x11c>
 800bfb8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bfbc:	465d      	mov	r5, fp
 800bfbe:	f7ff ffc1 	bl	800bf44 <__hexdig_fun>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d064      	beq.n	800c090 <__gethex+0x120>
 800bfc6:	465a      	mov	r2, fp
 800bfc8:	7810      	ldrb	r0, [r2, #0]
 800bfca:	2830      	cmp	r0, #48	; 0x30
 800bfcc:	4690      	mov	r8, r2
 800bfce:	f102 0201 	add.w	r2, r2, #1
 800bfd2:	d0f9      	beq.n	800bfc8 <__gethex+0x58>
 800bfd4:	f7ff ffb6 	bl	800bf44 <__hexdig_fun>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	fab0 f480 	clz	r4, r0
 800bfde:	0964      	lsrs	r4, r4, #5
 800bfe0:	465e      	mov	r6, fp
 800bfe2:	9301      	str	r3, [sp, #4]
 800bfe4:	4642      	mov	r2, r8
 800bfe6:	4615      	mov	r5, r2
 800bfe8:	3201      	adds	r2, #1
 800bfea:	7828      	ldrb	r0, [r5, #0]
 800bfec:	f7ff ffaa 	bl	800bf44 <__hexdig_fun>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d1f8      	bne.n	800bfe6 <__gethex+0x76>
 800bff4:	4994      	ldr	r1, [pc, #592]	; (800c248 <__gethex+0x2d8>)
 800bff6:	2201      	movs	r2, #1
 800bff8:	4628      	mov	r0, r5
 800bffa:	f7ff fee5 	bl	800bdc8 <strncmp>
 800bffe:	b978      	cbnz	r0, 800c020 <__gethex+0xb0>
 800c000:	b946      	cbnz	r6, 800c014 <__gethex+0xa4>
 800c002:	1c6e      	adds	r6, r5, #1
 800c004:	4632      	mov	r2, r6
 800c006:	4615      	mov	r5, r2
 800c008:	3201      	adds	r2, #1
 800c00a:	7828      	ldrb	r0, [r5, #0]
 800c00c:	f7ff ff9a 	bl	800bf44 <__hexdig_fun>
 800c010:	2800      	cmp	r0, #0
 800c012:	d1f8      	bne.n	800c006 <__gethex+0x96>
 800c014:	1b73      	subs	r3, r6, r5
 800c016:	009e      	lsls	r6, r3, #2
 800c018:	e004      	b.n	800c024 <__gethex+0xb4>
 800c01a:	2400      	movs	r4, #0
 800c01c:	4626      	mov	r6, r4
 800c01e:	e7e1      	b.n	800bfe4 <__gethex+0x74>
 800c020:	2e00      	cmp	r6, #0
 800c022:	d1f7      	bne.n	800c014 <__gethex+0xa4>
 800c024:	782b      	ldrb	r3, [r5, #0]
 800c026:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c02a:	2b50      	cmp	r3, #80	; 0x50
 800c02c:	d13d      	bne.n	800c0aa <__gethex+0x13a>
 800c02e:	786b      	ldrb	r3, [r5, #1]
 800c030:	2b2b      	cmp	r3, #43	; 0x2b
 800c032:	d02f      	beq.n	800c094 <__gethex+0x124>
 800c034:	2b2d      	cmp	r3, #45	; 0x2d
 800c036:	d031      	beq.n	800c09c <__gethex+0x12c>
 800c038:	1c69      	adds	r1, r5, #1
 800c03a:	f04f 0b00 	mov.w	fp, #0
 800c03e:	7808      	ldrb	r0, [r1, #0]
 800c040:	f7ff ff80 	bl	800bf44 <__hexdig_fun>
 800c044:	1e42      	subs	r2, r0, #1
 800c046:	b2d2      	uxtb	r2, r2
 800c048:	2a18      	cmp	r2, #24
 800c04a:	d82e      	bhi.n	800c0aa <__gethex+0x13a>
 800c04c:	f1a0 0210 	sub.w	r2, r0, #16
 800c050:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c054:	f7ff ff76 	bl	800bf44 <__hexdig_fun>
 800c058:	f100 3cff 	add.w	ip, r0, #4294967295
 800c05c:	fa5f fc8c 	uxtb.w	ip, ip
 800c060:	f1bc 0f18 	cmp.w	ip, #24
 800c064:	d91d      	bls.n	800c0a2 <__gethex+0x132>
 800c066:	f1bb 0f00 	cmp.w	fp, #0
 800c06a:	d000      	beq.n	800c06e <__gethex+0xfe>
 800c06c:	4252      	negs	r2, r2
 800c06e:	4416      	add	r6, r2
 800c070:	f8ca 1000 	str.w	r1, [sl]
 800c074:	b1dc      	cbz	r4, 800c0ae <__gethex+0x13e>
 800c076:	9b01      	ldr	r3, [sp, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	bf14      	ite	ne
 800c07c:	f04f 0800 	movne.w	r8, #0
 800c080:	f04f 0806 	moveq.w	r8, #6
 800c084:	4640      	mov	r0, r8
 800c086:	b005      	add	sp, #20
 800c088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08c:	4645      	mov	r5, r8
 800c08e:	4626      	mov	r6, r4
 800c090:	2401      	movs	r4, #1
 800c092:	e7c7      	b.n	800c024 <__gethex+0xb4>
 800c094:	f04f 0b00 	mov.w	fp, #0
 800c098:	1ca9      	adds	r1, r5, #2
 800c09a:	e7d0      	b.n	800c03e <__gethex+0xce>
 800c09c:	f04f 0b01 	mov.w	fp, #1
 800c0a0:	e7fa      	b.n	800c098 <__gethex+0x128>
 800c0a2:	230a      	movs	r3, #10
 800c0a4:	fb03 0002 	mla	r0, r3, r2, r0
 800c0a8:	e7d0      	b.n	800c04c <__gethex+0xdc>
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	e7e0      	b.n	800c070 <__gethex+0x100>
 800c0ae:	eba5 0308 	sub.w	r3, r5, r8
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	2b07      	cmp	r3, #7
 800c0b8:	dc0a      	bgt.n	800c0d0 <__gethex+0x160>
 800c0ba:	4648      	mov	r0, r9
 800c0bc:	f7fd ff46 	bl	8009f4c <_Balloc>
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	b940      	cbnz	r0, 800c0d6 <__gethex+0x166>
 800c0c4:	4b61      	ldr	r3, [pc, #388]	; (800c24c <__gethex+0x2dc>)
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	21e4      	movs	r1, #228	; 0xe4
 800c0ca:	4861      	ldr	r0, [pc, #388]	; (800c250 <__gethex+0x2e0>)
 800c0cc:	f7ff feb4 	bl	800be38 <__assert_func>
 800c0d0:	3101      	adds	r1, #1
 800c0d2:	105b      	asrs	r3, r3, #1
 800c0d4:	e7ef      	b.n	800c0b6 <__gethex+0x146>
 800c0d6:	f100 0a14 	add.w	sl, r0, #20
 800c0da:	2300      	movs	r3, #0
 800c0dc:	495a      	ldr	r1, [pc, #360]	; (800c248 <__gethex+0x2d8>)
 800c0de:	f8cd a004 	str.w	sl, [sp, #4]
 800c0e2:	469b      	mov	fp, r3
 800c0e4:	45a8      	cmp	r8, r5
 800c0e6:	d342      	bcc.n	800c16e <__gethex+0x1fe>
 800c0e8:	9801      	ldr	r0, [sp, #4]
 800c0ea:	f840 bb04 	str.w	fp, [r0], #4
 800c0ee:	eba0 000a 	sub.w	r0, r0, sl
 800c0f2:	1080      	asrs	r0, r0, #2
 800c0f4:	6120      	str	r0, [r4, #16]
 800c0f6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c0fa:	4658      	mov	r0, fp
 800c0fc:	f7fe f818 	bl	800a130 <__hi0bits>
 800c100:	683d      	ldr	r5, [r7, #0]
 800c102:	eba8 0000 	sub.w	r0, r8, r0
 800c106:	42a8      	cmp	r0, r5
 800c108:	dd59      	ble.n	800c1be <__gethex+0x24e>
 800c10a:	eba0 0805 	sub.w	r8, r0, r5
 800c10e:	4641      	mov	r1, r8
 800c110:	4620      	mov	r0, r4
 800c112:	f7fe fba7 	bl	800a864 <__any_on>
 800c116:	4683      	mov	fp, r0
 800c118:	b1b8      	cbz	r0, 800c14a <__gethex+0x1da>
 800c11a:	f108 33ff 	add.w	r3, r8, #4294967295
 800c11e:	1159      	asrs	r1, r3, #5
 800c120:	f003 021f 	and.w	r2, r3, #31
 800c124:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c128:	f04f 0b01 	mov.w	fp, #1
 800c12c:	fa0b f202 	lsl.w	r2, fp, r2
 800c130:	420a      	tst	r2, r1
 800c132:	d00a      	beq.n	800c14a <__gethex+0x1da>
 800c134:	455b      	cmp	r3, fp
 800c136:	dd06      	ble.n	800c146 <__gethex+0x1d6>
 800c138:	f1a8 0102 	sub.w	r1, r8, #2
 800c13c:	4620      	mov	r0, r4
 800c13e:	f7fe fb91 	bl	800a864 <__any_on>
 800c142:	2800      	cmp	r0, #0
 800c144:	d138      	bne.n	800c1b8 <__gethex+0x248>
 800c146:	f04f 0b02 	mov.w	fp, #2
 800c14a:	4641      	mov	r1, r8
 800c14c:	4620      	mov	r0, r4
 800c14e:	f7ff fea7 	bl	800bea0 <rshift>
 800c152:	4446      	add	r6, r8
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	42b3      	cmp	r3, r6
 800c158:	da41      	bge.n	800c1de <__gethex+0x26e>
 800c15a:	4621      	mov	r1, r4
 800c15c:	4648      	mov	r0, r9
 800c15e:	f7fd ff35 	bl	8009fcc <_Bfree>
 800c162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c164:	2300      	movs	r3, #0
 800c166:	6013      	str	r3, [r2, #0]
 800c168:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c16c:	e78a      	b.n	800c084 <__gethex+0x114>
 800c16e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c172:	2a2e      	cmp	r2, #46	; 0x2e
 800c174:	d014      	beq.n	800c1a0 <__gethex+0x230>
 800c176:	2b20      	cmp	r3, #32
 800c178:	d106      	bne.n	800c188 <__gethex+0x218>
 800c17a:	9b01      	ldr	r3, [sp, #4]
 800c17c:	f843 bb04 	str.w	fp, [r3], #4
 800c180:	f04f 0b00 	mov.w	fp, #0
 800c184:	9301      	str	r3, [sp, #4]
 800c186:	465b      	mov	r3, fp
 800c188:	7828      	ldrb	r0, [r5, #0]
 800c18a:	9303      	str	r3, [sp, #12]
 800c18c:	f7ff feda 	bl	800bf44 <__hexdig_fun>
 800c190:	9b03      	ldr	r3, [sp, #12]
 800c192:	f000 000f 	and.w	r0, r0, #15
 800c196:	4098      	lsls	r0, r3
 800c198:	ea4b 0b00 	orr.w	fp, fp, r0
 800c19c:	3304      	adds	r3, #4
 800c19e:	e7a1      	b.n	800c0e4 <__gethex+0x174>
 800c1a0:	45a8      	cmp	r8, r5
 800c1a2:	d8e8      	bhi.n	800c176 <__gethex+0x206>
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	9303      	str	r3, [sp, #12]
 800c1aa:	f7ff fe0d 	bl	800bdc8 <strncmp>
 800c1ae:	4926      	ldr	r1, [pc, #152]	; (800c248 <__gethex+0x2d8>)
 800c1b0:	9b03      	ldr	r3, [sp, #12]
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d1df      	bne.n	800c176 <__gethex+0x206>
 800c1b6:	e795      	b.n	800c0e4 <__gethex+0x174>
 800c1b8:	f04f 0b03 	mov.w	fp, #3
 800c1bc:	e7c5      	b.n	800c14a <__gethex+0x1da>
 800c1be:	da0b      	bge.n	800c1d8 <__gethex+0x268>
 800c1c0:	eba5 0800 	sub.w	r8, r5, r0
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4642      	mov	r2, r8
 800c1c8:	4648      	mov	r0, r9
 800c1ca:	f7fe f919 	bl	800a400 <__lshift>
 800c1ce:	eba6 0608 	sub.w	r6, r6, r8
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	f100 0a14 	add.w	sl, r0, #20
 800c1d8:	f04f 0b00 	mov.w	fp, #0
 800c1dc:	e7ba      	b.n	800c154 <__gethex+0x1e4>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	42b3      	cmp	r3, r6
 800c1e2:	dd73      	ble.n	800c2cc <__gethex+0x35c>
 800c1e4:	1b9e      	subs	r6, r3, r6
 800c1e6:	42b5      	cmp	r5, r6
 800c1e8:	dc34      	bgt.n	800c254 <__gethex+0x2e4>
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d023      	beq.n	800c238 <__gethex+0x2c8>
 800c1f0:	2b03      	cmp	r3, #3
 800c1f2:	d025      	beq.n	800c240 <__gethex+0x2d0>
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d115      	bne.n	800c224 <__gethex+0x2b4>
 800c1f8:	42b5      	cmp	r5, r6
 800c1fa:	d113      	bne.n	800c224 <__gethex+0x2b4>
 800c1fc:	2d01      	cmp	r5, #1
 800c1fe:	d10b      	bne.n	800c218 <__gethex+0x2a8>
 800c200:	9a02      	ldr	r2, [sp, #8]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	2301      	movs	r3, #1
 800c208:	6123      	str	r3, [r4, #16]
 800c20a:	f8ca 3000 	str.w	r3, [sl]
 800c20e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c210:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c214:	601c      	str	r4, [r3, #0]
 800c216:	e735      	b.n	800c084 <__gethex+0x114>
 800c218:	1e69      	subs	r1, r5, #1
 800c21a:	4620      	mov	r0, r4
 800c21c:	f7fe fb22 	bl	800a864 <__any_on>
 800c220:	2800      	cmp	r0, #0
 800c222:	d1ed      	bne.n	800c200 <__gethex+0x290>
 800c224:	4621      	mov	r1, r4
 800c226:	4648      	mov	r0, r9
 800c228:	f7fd fed0 	bl	8009fcc <_Bfree>
 800c22c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c22e:	2300      	movs	r3, #0
 800c230:	6013      	str	r3, [r2, #0]
 800c232:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c236:	e725      	b.n	800c084 <__gethex+0x114>
 800c238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1f2      	bne.n	800c224 <__gethex+0x2b4>
 800c23e:	e7df      	b.n	800c200 <__gethex+0x290>
 800c240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1dc      	bne.n	800c200 <__gethex+0x290>
 800c246:	e7ed      	b.n	800c224 <__gethex+0x2b4>
 800c248:	0800ca74 	.word	0x0800ca74
 800c24c:	0800c909 	.word	0x0800c909
 800c250:	0800cc1e 	.word	0x0800cc1e
 800c254:	f106 38ff 	add.w	r8, r6, #4294967295
 800c258:	f1bb 0f00 	cmp.w	fp, #0
 800c25c:	d133      	bne.n	800c2c6 <__gethex+0x356>
 800c25e:	f1b8 0f00 	cmp.w	r8, #0
 800c262:	d004      	beq.n	800c26e <__gethex+0x2fe>
 800c264:	4641      	mov	r1, r8
 800c266:	4620      	mov	r0, r4
 800c268:	f7fe fafc 	bl	800a864 <__any_on>
 800c26c:	4683      	mov	fp, r0
 800c26e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c272:	2301      	movs	r3, #1
 800c274:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c278:	f008 081f 	and.w	r8, r8, #31
 800c27c:	fa03 f308 	lsl.w	r3, r3, r8
 800c280:	4213      	tst	r3, r2
 800c282:	4631      	mov	r1, r6
 800c284:	4620      	mov	r0, r4
 800c286:	bf18      	it	ne
 800c288:	f04b 0b02 	orrne.w	fp, fp, #2
 800c28c:	1bad      	subs	r5, r5, r6
 800c28e:	f7ff fe07 	bl	800bea0 <rshift>
 800c292:	687e      	ldr	r6, [r7, #4]
 800c294:	f04f 0802 	mov.w	r8, #2
 800c298:	f1bb 0f00 	cmp.w	fp, #0
 800c29c:	d04a      	beq.n	800c334 <__gethex+0x3c4>
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d016      	beq.n	800c2d2 <__gethex+0x362>
 800c2a4:	2b03      	cmp	r3, #3
 800c2a6:	d018      	beq.n	800c2da <__gethex+0x36a>
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d109      	bne.n	800c2c0 <__gethex+0x350>
 800c2ac:	f01b 0f02 	tst.w	fp, #2
 800c2b0:	d006      	beq.n	800c2c0 <__gethex+0x350>
 800c2b2:	f8da 3000 	ldr.w	r3, [sl]
 800c2b6:	ea4b 0b03 	orr.w	fp, fp, r3
 800c2ba:	f01b 0f01 	tst.w	fp, #1
 800c2be:	d10f      	bne.n	800c2e0 <__gethex+0x370>
 800c2c0:	f048 0810 	orr.w	r8, r8, #16
 800c2c4:	e036      	b.n	800c334 <__gethex+0x3c4>
 800c2c6:	f04f 0b01 	mov.w	fp, #1
 800c2ca:	e7d0      	b.n	800c26e <__gethex+0x2fe>
 800c2cc:	f04f 0801 	mov.w	r8, #1
 800c2d0:	e7e2      	b.n	800c298 <__gethex+0x328>
 800c2d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2d4:	f1c3 0301 	rsb	r3, r3, #1
 800c2d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d0ef      	beq.n	800c2c0 <__gethex+0x350>
 800c2e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c2e4:	f104 0214 	add.w	r2, r4, #20
 800c2e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c2ec:	9301      	str	r3, [sp, #4]
 800c2ee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4694      	mov	ip, r2
 800c2f6:	f852 1b04 	ldr.w	r1, [r2], #4
 800c2fa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c2fe:	d01e      	beq.n	800c33e <__gethex+0x3ce>
 800c300:	3101      	adds	r1, #1
 800c302:	f8cc 1000 	str.w	r1, [ip]
 800c306:	f1b8 0f02 	cmp.w	r8, #2
 800c30a:	f104 0214 	add.w	r2, r4, #20
 800c30e:	d13d      	bne.n	800c38c <__gethex+0x41c>
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	3b01      	subs	r3, #1
 800c314:	42ab      	cmp	r3, r5
 800c316:	d10b      	bne.n	800c330 <__gethex+0x3c0>
 800c318:	1169      	asrs	r1, r5, #5
 800c31a:	2301      	movs	r3, #1
 800c31c:	f005 051f 	and.w	r5, r5, #31
 800c320:	fa03 f505 	lsl.w	r5, r3, r5
 800c324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c328:	421d      	tst	r5, r3
 800c32a:	bf18      	it	ne
 800c32c:	f04f 0801 	movne.w	r8, #1
 800c330:	f048 0820 	orr.w	r8, r8, #32
 800c334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c336:	601c      	str	r4, [r3, #0]
 800c338:	9b02      	ldr	r3, [sp, #8]
 800c33a:	601e      	str	r6, [r3, #0]
 800c33c:	e6a2      	b.n	800c084 <__gethex+0x114>
 800c33e:	4290      	cmp	r0, r2
 800c340:	f842 3c04 	str.w	r3, [r2, #-4]
 800c344:	d8d6      	bhi.n	800c2f4 <__gethex+0x384>
 800c346:	68a2      	ldr	r2, [r4, #8]
 800c348:	4593      	cmp	fp, r2
 800c34a:	db17      	blt.n	800c37c <__gethex+0x40c>
 800c34c:	6861      	ldr	r1, [r4, #4]
 800c34e:	4648      	mov	r0, r9
 800c350:	3101      	adds	r1, #1
 800c352:	f7fd fdfb 	bl	8009f4c <_Balloc>
 800c356:	4682      	mov	sl, r0
 800c358:	b918      	cbnz	r0, 800c362 <__gethex+0x3f2>
 800c35a:	4b1b      	ldr	r3, [pc, #108]	; (800c3c8 <__gethex+0x458>)
 800c35c:	4602      	mov	r2, r0
 800c35e:	2184      	movs	r1, #132	; 0x84
 800c360:	e6b3      	b.n	800c0ca <__gethex+0x15a>
 800c362:	6922      	ldr	r2, [r4, #16]
 800c364:	3202      	adds	r2, #2
 800c366:	f104 010c 	add.w	r1, r4, #12
 800c36a:	0092      	lsls	r2, r2, #2
 800c36c:	300c      	adds	r0, #12
 800c36e:	f7ff fd4d 	bl	800be0c <memcpy>
 800c372:	4621      	mov	r1, r4
 800c374:	4648      	mov	r0, r9
 800c376:	f7fd fe29 	bl	8009fcc <_Bfree>
 800c37a:	4654      	mov	r4, sl
 800c37c:	6922      	ldr	r2, [r4, #16]
 800c37e:	1c51      	adds	r1, r2, #1
 800c380:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c384:	6121      	str	r1, [r4, #16]
 800c386:	2101      	movs	r1, #1
 800c388:	6151      	str	r1, [r2, #20]
 800c38a:	e7bc      	b.n	800c306 <__gethex+0x396>
 800c38c:	6921      	ldr	r1, [r4, #16]
 800c38e:	4559      	cmp	r1, fp
 800c390:	dd0b      	ble.n	800c3aa <__gethex+0x43a>
 800c392:	2101      	movs	r1, #1
 800c394:	4620      	mov	r0, r4
 800c396:	f7ff fd83 	bl	800bea0 <rshift>
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	3601      	adds	r6, #1
 800c39e:	42b3      	cmp	r3, r6
 800c3a0:	f6ff aedb 	blt.w	800c15a <__gethex+0x1ea>
 800c3a4:	f04f 0801 	mov.w	r8, #1
 800c3a8:	e7c2      	b.n	800c330 <__gethex+0x3c0>
 800c3aa:	f015 051f 	ands.w	r5, r5, #31
 800c3ae:	d0f9      	beq.n	800c3a4 <__gethex+0x434>
 800c3b0:	9b01      	ldr	r3, [sp, #4]
 800c3b2:	441a      	add	r2, r3
 800c3b4:	f1c5 0520 	rsb	r5, r5, #32
 800c3b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c3bc:	f7fd feb8 	bl	800a130 <__hi0bits>
 800c3c0:	42a8      	cmp	r0, r5
 800c3c2:	dbe6      	blt.n	800c392 <__gethex+0x422>
 800c3c4:	e7ee      	b.n	800c3a4 <__gethex+0x434>
 800c3c6:	bf00      	nop
 800c3c8:	0800c909 	.word	0x0800c909

0800c3cc <L_shift>:
 800c3cc:	f1c2 0208 	rsb	r2, r2, #8
 800c3d0:	0092      	lsls	r2, r2, #2
 800c3d2:	b570      	push	{r4, r5, r6, lr}
 800c3d4:	f1c2 0620 	rsb	r6, r2, #32
 800c3d8:	6843      	ldr	r3, [r0, #4]
 800c3da:	6804      	ldr	r4, [r0, #0]
 800c3dc:	fa03 f506 	lsl.w	r5, r3, r6
 800c3e0:	432c      	orrs	r4, r5
 800c3e2:	40d3      	lsrs	r3, r2
 800c3e4:	6004      	str	r4, [r0, #0]
 800c3e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c3ea:	4288      	cmp	r0, r1
 800c3ec:	d3f4      	bcc.n	800c3d8 <L_shift+0xc>
 800c3ee:	bd70      	pop	{r4, r5, r6, pc}

0800c3f0 <__match>:
 800c3f0:	b530      	push	{r4, r5, lr}
 800c3f2:	6803      	ldr	r3, [r0, #0]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3fa:	b914      	cbnz	r4, 800c402 <__match+0x12>
 800c3fc:	6003      	str	r3, [r0, #0]
 800c3fe:	2001      	movs	r0, #1
 800c400:	bd30      	pop	{r4, r5, pc}
 800c402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c406:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c40a:	2d19      	cmp	r5, #25
 800c40c:	bf98      	it	ls
 800c40e:	3220      	addls	r2, #32
 800c410:	42a2      	cmp	r2, r4
 800c412:	d0f0      	beq.n	800c3f6 <__match+0x6>
 800c414:	2000      	movs	r0, #0
 800c416:	e7f3      	b.n	800c400 <__match+0x10>

0800c418 <__hexnan>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	680b      	ldr	r3, [r1, #0]
 800c41e:	6801      	ldr	r1, [r0, #0]
 800c420:	115e      	asrs	r6, r3, #5
 800c422:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c426:	f013 031f 	ands.w	r3, r3, #31
 800c42a:	b087      	sub	sp, #28
 800c42c:	bf18      	it	ne
 800c42e:	3604      	addne	r6, #4
 800c430:	2500      	movs	r5, #0
 800c432:	1f37      	subs	r7, r6, #4
 800c434:	4682      	mov	sl, r0
 800c436:	4690      	mov	r8, r2
 800c438:	9301      	str	r3, [sp, #4]
 800c43a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c43e:	46b9      	mov	r9, r7
 800c440:	463c      	mov	r4, r7
 800c442:	9502      	str	r5, [sp, #8]
 800c444:	46ab      	mov	fp, r5
 800c446:	784a      	ldrb	r2, [r1, #1]
 800c448:	1c4b      	adds	r3, r1, #1
 800c44a:	9303      	str	r3, [sp, #12]
 800c44c:	b342      	cbz	r2, 800c4a0 <__hexnan+0x88>
 800c44e:	4610      	mov	r0, r2
 800c450:	9105      	str	r1, [sp, #20]
 800c452:	9204      	str	r2, [sp, #16]
 800c454:	f7ff fd76 	bl	800bf44 <__hexdig_fun>
 800c458:	2800      	cmp	r0, #0
 800c45a:	d14f      	bne.n	800c4fc <__hexnan+0xe4>
 800c45c:	9a04      	ldr	r2, [sp, #16]
 800c45e:	9905      	ldr	r1, [sp, #20]
 800c460:	2a20      	cmp	r2, #32
 800c462:	d818      	bhi.n	800c496 <__hexnan+0x7e>
 800c464:	9b02      	ldr	r3, [sp, #8]
 800c466:	459b      	cmp	fp, r3
 800c468:	dd13      	ble.n	800c492 <__hexnan+0x7a>
 800c46a:	454c      	cmp	r4, r9
 800c46c:	d206      	bcs.n	800c47c <__hexnan+0x64>
 800c46e:	2d07      	cmp	r5, #7
 800c470:	dc04      	bgt.n	800c47c <__hexnan+0x64>
 800c472:	462a      	mov	r2, r5
 800c474:	4649      	mov	r1, r9
 800c476:	4620      	mov	r0, r4
 800c478:	f7ff ffa8 	bl	800c3cc <L_shift>
 800c47c:	4544      	cmp	r4, r8
 800c47e:	d950      	bls.n	800c522 <__hexnan+0x10a>
 800c480:	2300      	movs	r3, #0
 800c482:	f1a4 0904 	sub.w	r9, r4, #4
 800c486:	f844 3c04 	str.w	r3, [r4, #-4]
 800c48a:	f8cd b008 	str.w	fp, [sp, #8]
 800c48e:	464c      	mov	r4, r9
 800c490:	461d      	mov	r5, r3
 800c492:	9903      	ldr	r1, [sp, #12]
 800c494:	e7d7      	b.n	800c446 <__hexnan+0x2e>
 800c496:	2a29      	cmp	r2, #41	; 0x29
 800c498:	d155      	bne.n	800c546 <__hexnan+0x12e>
 800c49a:	3102      	adds	r1, #2
 800c49c:	f8ca 1000 	str.w	r1, [sl]
 800c4a0:	f1bb 0f00 	cmp.w	fp, #0
 800c4a4:	d04f      	beq.n	800c546 <__hexnan+0x12e>
 800c4a6:	454c      	cmp	r4, r9
 800c4a8:	d206      	bcs.n	800c4b8 <__hexnan+0xa0>
 800c4aa:	2d07      	cmp	r5, #7
 800c4ac:	dc04      	bgt.n	800c4b8 <__hexnan+0xa0>
 800c4ae:	462a      	mov	r2, r5
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f7ff ff8a 	bl	800c3cc <L_shift>
 800c4b8:	4544      	cmp	r4, r8
 800c4ba:	d934      	bls.n	800c526 <__hexnan+0x10e>
 800c4bc:	f1a8 0204 	sub.w	r2, r8, #4
 800c4c0:	4623      	mov	r3, r4
 800c4c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c4c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c4ca:	429f      	cmp	r7, r3
 800c4cc:	d2f9      	bcs.n	800c4c2 <__hexnan+0xaa>
 800c4ce:	1b3b      	subs	r3, r7, r4
 800c4d0:	f023 0303 	bic.w	r3, r3, #3
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	3e03      	subs	r6, #3
 800c4d8:	3401      	adds	r4, #1
 800c4da:	42a6      	cmp	r6, r4
 800c4dc:	bf38      	it	cc
 800c4de:	2304      	movcc	r3, #4
 800c4e0:	4443      	add	r3, r8
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f843 2b04 	str.w	r2, [r3], #4
 800c4e8:	429f      	cmp	r7, r3
 800c4ea:	d2fb      	bcs.n	800c4e4 <__hexnan+0xcc>
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	b91b      	cbnz	r3, 800c4f8 <__hexnan+0xe0>
 800c4f0:	4547      	cmp	r7, r8
 800c4f2:	d126      	bne.n	800c542 <__hexnan+0x12a>
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	603b      	str	r3, [r7, #0]
 800c4f8:	2005      	movs	r0, #5
 800c4fa:	e025      	b.n	800c548 <__hexnan+0x130>
 800c4fc:	3501      	adds	r5, #1
 800c4fe:	2d08      	cmp	r5, #8
 800c500:	f10b 0b01 	add.w	fp, fp, #1
 800c504:	dd06      	ble.n	800c514 <__hexnan+0xfc>
 800c506:	4544      	cmp	r4, r8
 800c508:	d9c3      	bls.n	800c492 <__hexnan+0x7a>
 800c50a:	2300      	movs	r3, #0
 800c50c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c510:	2501      	movs	r5, #1
 800c512:	3c04      	subs	r4, #4
 800c514:	6822      	ldr	r2, [r4, #0]
 800c516:	f000 000f 	and.w	r0, r0, #15
 800c51a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c51e:	6020      	str	r0, [r4, #0]
 800c520:	e7b7      	b.n	800c492 <__hexnan+0x7a>
 800c522:	2508      	movs	r5, #8
 800c524:	e7b5      	b.n	800c492 <__hexnan+0x7a>
 800c526:	9b01      	ldr	r3, [sp, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d0df      	beq.n	800c4ec <__hexnan+0xd4>
 800c52c:	f1c3 0320 	rsb	r3, r3, #32
 800c530:	f04f 32ff 	mov.w	r2, #4294967295
 800c534:	40da      	lsrs	r2, r3
 800c536:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c53a:	4013      	ands	r3, r2
 800c53c:	f846 3c04 	str.w	r3, [r6, #-4]
 800c540:	e7d4      	b.n	800c4ec <__hexnan+0xd4>
 800c542:	3f04      	subs	r7, #4
 800c544:	e7d2      	b.n	800c4ec <__hexnan+0xd4>
 800c546:	2004      	movs	r0, #4
 800c548:	b007      	add	sp, #28
 800c54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c54e <__ascii_mbtowc>:
 800c54e:	b082      	sub	sp, #8
 800c550:	b901      	cbnz	r1, 800c554 <__ascii_mbtowc+0x6>
 800c552:	a901      	add	r1, sp, #4
 800c554:	b142      	cbz	r2, 800c568 <__ascii_mbtowc+0x1a>
 800c556:	b14b      	cbz	r3, 800c56c <__ascii_mbtowc+0x1e>
 800c558:	7813      	ldrb	r3, [r2, #0]
 800c55a:	600b      	str	r3, [r1, #0]
 800c55c:	7812      	ldrb	r2, [r2, #0]
 800c55e:	1e10      	subs	r0, r2, #0
 800c560:	bf18      	it	ne
 800c562:	2001      	movne	r0, #1
 800c564:	b002      	add	sp, #8
 800c566:	4770      	bx	lr
 800c568:	4610      	mov	r0, r2
 800c56a:	e7fb      	b.n	800c564 <__ascii_mbtowc+0x16>
 800c56c:	f06f 0001 	mvn.w	r0, #1
 800c570:	e7f8      	b.n	800c564 <__ascii_mbtowc+0x16>

0800c572 <_realloc_r>:
 800c572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c576:	4680      	mov	r8, r0
 800c578:	4614      	mov	r4, r2
 800c57a:	460e      	mov	r6, r1
 800c57c:	b921      	cbnz	r1, 800c588 <_realloc_r+0x16>
 800c57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c582:	4611      	mov	r1, r2
 800c584:	f7fd bc56 	b.w	8009e34 <_malloc_r>
 800c588:	b92a      	cbnz	r2, 800c596 <_realloc_r+0x24>
 800c58a:	f7fd fbdf 	bl	8009d4c <_free_r>
 800c58e:	4625      	mov	r5, r4
 800c590:	4628      	mov	r0, r5
 800c592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c596:	f000 f8c6 	bl	800c726 <_malloc_usable_size_r>
 800c59a:	4284      	cmp	r4, r0
 800c59c:	4607      	mov	r7, r0
 800c59e:	d802      	bhi.n	800c5a6 <_realloc_r+0x34>
 800c5a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5a4:	d812      	bhi.n	800c5cc <_realloc_r+0x5a>
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4640      	mov	r0, r8
 800c5aa:	f7fd fc43 	bl	8009e34 <_malloc_r>
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d0ed      	beq.n	800c590 <_realloc_r+0x1e>
 800c5b4:	42bc      	cmp	r4, r7
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	bf28      	it	cs
 800c5bc:	463a      	movcs	r2, r7
 800c5be:	f7ff fc25 	bl	800be0c <memcpy>
 800c5c2:	4631      	mov	r1, r6
 800c5c4:	4640      	mov	r0, r8
 800c5c6:	f7fd fbc1 	bl	8009d4c <_free_r>
 800c5ca:	e7e1      	b.n	800c590 <_realloc_r+0x1e>
 800c5cc:	4635      	mov	r5, r6
 800c5ce:	e7df      	b.n	800c590 <_realloc_r+0x1e>

0800c5d0 <__ascii_wctomb>:
 800c5d0:	b149      	cbz	r1, 800c5e6 <__ascii_wctomb+0x16>
 800c5d2:	2aff      	cmp	r2, #255	; 0xff
 800c5d4:	bf85      	ittet	hi
 800c5d6:	238a      	movhi	r3, #138	; 0x8a
 800c5d8:	6003      	strhi	r3, [r0, #0]
 800c5da:	700a      	strbls	r2, [r1, #0]
 800c5dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800c5e0:	bf98      	it	ls
 800c5e2:	2001      	movls	r0, #1
 800c5e4:	4770      	bx	lr
 800c5e6:	4608      	mov	r0, r1
 800c5e8:	4770      	bx	lr
	...

0800c5ec <fiprintf>:
 800c5ec:	b40e      	push	{r1, r2, r3}
 800c5ee:	b503      	push	{r0, r1, lr}
 800c5f0:	4601      	mov	r1, r0
 800c5f2:	ab03      	add	r3, sp, #12
 800c5f4:	4805      	ldr	r0, [pc, #20]	; (800c60c <fiprintf+0x20>)
 800c5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5fa:	6800      	ldr	r0, [r0, #0]
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	f7ff f96b 	bl	800b8d8 <_vfiprintf_r>
 800c602:	b002      	add	sp, #8
 800c604:	f85d eb04 	ldr.w	lr, [sp], #4
 800c608:	b003      	add	sp, #12
 800c60a:	4770      	bx	lr
 800c60c:	20000064 	.word	0x20000064

0800c610 <__swhatbuf_r>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	460c      	mov	r4, r1
 800c614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c618:	2900      	cmp	r1, #0
 800c61a:	b096      	sub	sp, #88	; 0x58
 800c61c:	4615      	mov	r5, r2
 800c61e:	461e      	mov	r6, r3
 800c620:	da0d      	bge.n	800c63e <__swhatbuf_r+0x2e>
 800c622:	89a3      	ldrh	r3, [r4, #12]
 800c624:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c628:	f04f 0100 	mov.w	r1, #0
 800c62c:	bf0c      	ite	eq
 800c62e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c632:	2340      	movne	r3, #64	; 0x40
 800c634:	2000      	movs	r0, #0
 800c636:	6031      	str	r1, [r6, #0]
 800c638:	602b      	str	r3, [r5, #0]
 800c63a:	b016      	add	sp, #88	; 0x58
 800c63c:	bd70      	pop	{r4, r5, r6, pc}
 800c63e:	466a      	mov	r2, sp
 800c640:	f000 f848 	bl	800c6d4 <_fstat_r>
 800c644:	2800      	cmp	r0, #0
 800c646:	dbec      	blt.n	800c622 <__swhatbuf_r+0x12>
 800c648:	9901      	ldr	r1, [sp, #4]
 800c64a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c64e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c652:	4259      	negs	r1, r3
 800c654:	4159      	adcs	r1, r3
 800c656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c65a:	e7eb      	b.n	800c634 <__swhatbuf_r+0x24>

0800c65c <__smakebuf_r>:
 800c65c:	898b      	ldrh	r3, [r1, #12]
 800c65e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c660:	079d      	lsls	r5, r3, #30
 800c662:	4606      	mov	r6, r0
 800c664:	460c      	mov	r4, r1
 800c666:	d507      	bpl.n	800c678 <__smakebuf_r+0x1c>
 800c668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	6123      	str	r3, [r4, #16]
 800c670:	2301      	movs	r3, #1
 800c672:	6163      	str	r3, [r4, #20]
 800c674:	b002      	add	sp, #8
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	ab01      	add	r3, sp, #4
 800c67a:	466a      	mov	r2, sp
 800c67c:	f7ff ffc8 	bl	800c610 <__swhatbuf_r>
 800c680:	9900      	ldr	r1, [sp, #0]
 800c682:	4605      	mov	r5, r0
 800c684:	4630      	mov	r0, r6
 800c686:	f7fd fbd5 	bl	8009e34 <_malloc_r>
 800c68a:	b948      	cbnz	r0, 800c6a0 <__smakebuf_r+0x44>
 800c68c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c690:	059a      	lsls	r2, r3, #22
 800c692:	d4ef      	bmi.n	800c674 <__smakebuf_r+0x18>
 800c694:	f023 0303 	bic.w	r3, r3, #3
 800c698:	f043 0302 	orr.w	r3, r3, #2
 800c69c:	81a3      	strh	r3, [r4, #12]
 800c69e:	e7e3      	b.n	800c668 <__smakebuf_r+0xc>
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	6020      	str	r0, [r4, #0]
 800c6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a8:	81a3      	strh	r3, [r4, #12]
 800c6aa:	9b00      	ldr	r3, [sp, #0]
 800c6ac:	6163      	str	r3, [r4, #20]
 800c6ae:	9b01      	ldr	r3, [sp, #4]
 800c6b0:	6120      	str	r0, [r4, #16]
 800c6b2:	b15b      	cbz	r3, 800c6cc <__smakebuf_r+0x70>
 800c6b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	f000 f81d 	bl	800c6f8 <_isatty_r>
 800c6be:	b128      	cbz	r0, 800c6cc <__smakebuf_r+0x70>
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	f023 0303 	bic.w	r3, r3, #3
 800c6c6:	f043 0301 	orr.w	r3, r3, #1
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	89a3      	ldrh	r3, [r4, #12]
 800c6ce:	431d      	orrs	r5, r3
 800c6d0:	81a5      	strh	r5, [r4, #12]
 800c6d2:	e7cf      	b.n	800c674 <__smakebuf_r+0x18>

0800c6d4 <_fstat_r>:
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	4d07      	ldr	r5, [pc, #28]	; (800c6f4 <_fstat_r+0x20>)
 800c6d8:	2300      	movs	r3, #0
 800c6da:	4604      	mov	r4, r0
 800c6dc:	4608      	mov	r0, r1
 800c6de:	4611      	mov	r1, r2
 800c6e0:	602b      	str	r3, [r5, #0]
 800c6e2:	f7f5 fafb 	bl	8001cdc <_fstat>
 800c6e6:	1c43      	adds	r3, r0, #1
 800c6e8:	d102      	bne.n	800c6f0 <_fstat_r+0x1c>
 800c6ea:	682b      	ldr	r3, [r5, #0]
 800c6ec:	b103      	cbz	r3, 800c6f0 <_fstat_r+0x1c>
 800c6ee:	6023      	str	r3, [r4, #0]
 800c6f0:	bd38      	pop	{r3, r4, r5, pc}
 800c6f2:	bf00      	nop
 800c6f4:	20000618 	.word	0x20000618

0800c6f8 <_isatty_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	4d06      	ldr	r5, [pc, #24]	; (800c714 <_isatty_r+0x1c>)
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	4604      	mov	r4, r0
 800c700:	4608      	mov	r0, r1
 800c702:	602b      	str	r3, [r5, #0]
 800c704:	f7f5 fafa 	bl	8001cfc <_isatty>
 800c708:	1c43      	adds	r3, r0, #1
 800c70a:	d102      	bne.n	800c712 <_isatty_r+0x1a>
 800c70c:	682b      	ldr	r3, [r5, #0]
 800c70e:	b103      	cbz	r3, 800c712 <_isatty_r+0x1a>
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	bd38      	pop	{r3, r4, r5, pc}
 800c714:	20000618 	.word	0x20000618

0800c718 <abort>:
 800c718:	b508      	push	{r3, lr}
 800c71a:	2006      	movs	r0, #6
 800c71c:	f000 f834 	bl	800c788 <raise>
 800c720:	2001      	movs	r0, #1
 800c722:	f7f5 fa87 	bl	8001c34 <_exit>

0800c726 <_malloc_usable_size_r>:
 800c726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c72a:	1f18      	subs	r0, r3, #4
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	bfbc      	itt	lt
 800c730:	580b      	ldrlt	r3, [r1, r0]
 800c732:	18c0      	addlt	r0, r0, r3
 800c734:	4770      	bx	lr

0800c736 <_raise_r>:
 800c736:	291f      	cmp	r1, #31
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4604      	mov	r4, r0
 800c73c:	460d      	mov	r5, r1
 800c73e:	d904      	bls.n	800c74a <_raise_r+0x14>
 800c740:	2316      	movs	r3, #22
 800c742:	6003      	str	r3, [r0, #0]
 800c744:	f04f 30ff 	mov.w	r0, #4294967295
 800c748:	bd38      	pop	{r3, r4, r5, pc}
 800c74a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c74c:	b112      	cbz	r2, 800c754 <_raise_r+0x1e>
 800c74e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c752:	b94b      	cbnz	r3, 800c768 <_raise_r+0x32>
 800c754:	4620      	mov	r0, r4
 800c756:	f000 f831 	bl	800c7bc <_getpid_r>
 800c75a:	462a      	mov	r2, r5
 800c75c:	4601      	mov	r1, r0
 800c75e:	4620      	mov	r0, r4
 800c760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c764:	f000 b818 	b.w	800c798 <_kill_r>
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d00a      	beq.n	800c782 <_raise_r+0x4c>
 800c76c:	1c59      	adds	r1, r3, #1
 800c76e:	d103      	bne.n	800c778 <_raise_r+0x42>
 800c770:	2316      	movs	r3, #22
 800c772:	6003      	str	r3, [r0, #0]
 800c774:	2001      	movs	r0, #1
 800c776:	e7e7      	b.n	800c748 <_raise_r+0x12>
 800c778:	2400      	movs	r4, #0
 800c77a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c77e:	4628      	mov	r0, r5
 800c780:	4798      	blx	r3
 800c782:	2000      	movs	r0, #0
 800c784:	e7e0      	b.n	800c748 <_raise_r+0x12>
	...

0800c788 <raise>:
 800c788:	4b02      	ldr	r3, [pc, #8]	; (800c794 <raise+0xc>)
 800c78a:	4601      	mov	r1, r0
 800c78c:	6818      	ldr	r0, [r3, #0]
 800c78e:	f7ff bfd2 	b.w	800c736 <_raise_r>
 800c792:	bf00      	nop
 800c794:	20000064 	.word	0x20000064

0800c798 <_kill_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4d07      	ldr	r5, [pc, #28]	; (800c7b8 <_kill_r+0x20>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	4604      	mov	r4, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	602b      	str	r3, [r5, #0]
 800c7a6:	f7f5 fa35 	bl	8001c14 <_kill>
 800c7aa:	1c43      	adds	r3, r0, #1
 800c7ac:	d102      	bne.n	800c7b4 <_kill_r+0x1c>
 800c7ae:	682b      	ldr	r3, [r5, #0]
 800c7b0:	b103      	cbz	r3, 800c7b4 <_kill_r+0x1c>
 800c7b2:	6023      	str	r3, [r4, #0]
 800c7b4:	bd38      	pop	{r3, r4, r5, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20000618 	.word	0x20000618

0800c7bc <_getpid_r>:
 800c7bc:	f7f5 ba22 	b.w	8001c04 <_getpid>

0800c7c0 <_init>:
 800c7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c2:	bf00      	nop
 800c7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7c6:	bc08      	pop	{r3}
 800c7c8:	469e      	mov	lr, r3
 800c7ca:	4770      	bx	lr

0800c7cc <_fini>:
 800c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ce:	bf00      	nop
 800c7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d2:	bc08      	pop	{r3}
 800c7d4:	469e      	mov	lr, r3
 800c7d6:	4770      	bx	lr
