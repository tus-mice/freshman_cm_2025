
freshman_CM001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c500  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800c690  0800c690  0001c690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb28  0800cb28  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb28  0800cb28  0001cb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb30  0800cb30  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb30  0800cb30  0001cb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb34  0800cb34  0001cb34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800cb38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  200001d4  0800cd0c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  0800cd0c  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a9da  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b51  00000000  00000000  0003ac21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0003e778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121c  00000000  00000000  0003fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252b2  00000000  00000000  000410f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e332  00000000  00000000  000663a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df4a1  00000000  00000000  000846d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007724  00000000  00000000  00163b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0016b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c678 	.word	0x0800c678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800c678 	.word	0x0800c678

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <lcd_cmd>:
#include "i2c.h"

#define LCD_ADDRESS 0x7c

void lcd_cmd(uint8_t x)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[2] = {0x00, x};
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	733b      	strb	r3, [r7, #12]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	737b      	strb	r3, [r7, #13]

	while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK)
 8001002:	e007      	b.n	8001014 <lcd_cmd+0x24>
	{
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <lcd_cmd+0x48>)
 8001006:	f003 fdbf 	bl	8004b88 <HAL_I2C_GetError>
 800100a:	4603      	mov	r3, r0
 800100c:	2b04      	cmp	r3, #4
 800100e:	d001      	beq.n	8001014 <lcd_cmd+0x24>
		{
			Error_Handler();
 8001010:	f000 fd7d 	bl	8001b0e <Error_Handler>
	while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK)
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2302      	movs	r3, #2
 8001020:	217c      	movs	r1, #124	; 0x7c
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <lcd_cmd+0x48>)
 8001024:	f003 fc98 	bl	8004958 <HAL_I2C_Master_Transmit>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ea      	bne.n	8001004 <lcd_cmd+0x14>
		}
	}
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200002c8 	.word	0x200002c8

0800103c <lcd_data>:

void lcd_data(uint8_t x)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af02      	add	r7, sp, #8
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[2] = {0x40, x};
 8001046:	2340      	movs	r3, #64	; 0x40
 8001048:	733b      	strb	r3, [r7, #12]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK)
 800104e:	e007      	b.n	8001060 <lcd_data+0x24>
	{
		if(HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <lcd_data+0x48>)
 8001052:	f003 fd99 	bl	8004b88 <HAL_I2C_GetError>
 8001056:	4603      	mov	r3, r0
 8001058:	2b04      	cmp	r3, #4
 800105a:	d001      	beq.n	8001060 <lcd_data+0x24>
		{
			Error_Handler();
 800105c:	f000 fd57 	bl	8001b0e <Error_Handler>
	while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK)
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	217c      	movs	r1, #124	; 0x7c
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <lcd_data+0x48>)
 8001070:	f003 fc72 	bl	8004958 <HAL_I2C_Master_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1ea      	bne.n	8001050 <lcd_data+0x14>
		}
	}
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200002c8 	.word	0x200002c8

08001088 <pl_lcd_puts>:

void pl_lcd_puts(const char *s)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	while (*s)lcd_data(*s++);
 8001090:	e006      	b.n	80010a0 <pl_lcd_puts+0x18>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ffce 	bl	800103c <lcd_data>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f4      	bne.n	8001092 <pl_lcd_puts+0xa>
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <pl_lcd_init>:

void pl_lcd_init(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
	lcd_cmd(0x38);
 80010b6:	2038      	movs	r0, #56	; 0x38
 80010b8:	f7ff ff9a 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x39);
 80010bc:	2039      	movs	r0, #57	; 0x39
 80010be:	f7ff ff97 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x14);
 80010c2:	2014      	movs	r0, #20
 80010c4:	f7ff ff94 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x70);
 80010c8:	2070      	movs	r0, #112	; 0x70
 80010ca:	f7ff ff91 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x56);
 80010ce:	2056      	movs	r0, #86	; 0x56
 80010d0:	f7ff ff8e 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x6c);
 80010d4:	206c      	movs	r0, #108	; 0x6c
 80010d6:	f7ff ff8b 	bl	8000ff0 <lcd_cmd>
	HAL_Delay(300);
 80010da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010de:	f001 fa2d 	bl	800253c <HAL_Delay>
	lcd_cmd(0x38);
 80010e2:	2038      	movs	r0, #56	; 0x38
 80010e4:	f7ff ff84 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x0c);
 80010e8:	200c      	movs	r0, #12
 80010ea:	f7ff ff81 	bl	8000ff0 <lcd_cmd>
	lcd_cmd(0x01);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ff7e 	bl	8000ff0 <lcd_cmd>
	HAL_Delay(2);
 80010f4:	2002      	movs	r0, #2
 80010f6:	f001 fa21 	bl	800253c <HAL_Delay>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}

080010fe <pl_lcd_pos>:
{
	lcd_cmd(0x80 | pos);
}

void pl_lcd_pos(uint8_t row, uint8_t col)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	460a      	mov	r2, r1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	4613      	mov	r3, r2
 800110c:	71bb      	strb	r3, [r7, #6]
	lcd_cmd(0x80 | ((row & 0x01) << 6) | col);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	019b      	lsls	r3, r3, #6
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001118:	b2da      	uxtb	r2, r3
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	4313      	orrs	r3, r2
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff62 	bl	8000ff0 <lcd_cmd>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <pl_lcd_clear>:

void pl_lcd_clear()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff ff59 	bl	8000ff0 <lcd_cmd>
	HAL_Delay(2);
 800113e:	2002      	movs	r0, #2
 8001140:	f001 f9fc 	bl	800253c <HAL_Delay>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <pl_callback_getSensor>:
uint16_t g_sensor[4];

float g_V_Batt;

void pl_callback_getSensor(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int i, j;
	HAL_ADC_Stop_DMA(&hadc1);
 800114e:	4870      	ldr	r0, [pc, #448]	; (8001310 <pl_callback_getSensor+0x1c8>)
 8001150:	f001 fe06 	bl	8002d60 <HAL_ADC_Stop_DMA>
	switch (AD_step)
 8001154:	4b6f      	ldr	r3, [pc, #444]	; (8001314 <pl_callback_getSensor+0x1cc>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d044      	beq.n	80011e6 <pl_callback_getSensor+0x9e>
 800115c:	2b02      	cmp	r3, #2
 800115e:	dc69      	bgt.n	8001234 <pl_callback_getSensor+0xec>
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <pl_callback_getSensor+0x22>
 8001164:	2b01      	cmp	r3, #1
 8001166:	d017      	beq.n	8001198 <pl_callback_getSensor+0x50>
 8001168:	e064      	b.n	8001234 <pl_callback_getSensor+0xec>
	{
	case 0:
		HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001170:	4869      	ldr	r0, [pc, #420]	; (8001318 <pl_callback_getSensor+0x1d0>)
 8001172:	f003 fb3d 	bl	80047f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117c:	4866      	ldr	r0, [pc, #408]	; (8001318 <pl_callback_getSensor+0x1d0>)
 800117e:	f003 fb37 	bl	80047f0 <HAL_GPIO_WritePin>

		for (j=0; j <= 500; j ++)
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	e002      	b.n	800118e <pl_callback_getSensor+0x46>
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3301      	adds	r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001194:	ddf8      	ble.n	8001188 <pl_callback_getSensor+0x40>
		{
		}
		break;
 8001196:	e04d      	b.n	8001234 <pl_callback_getSensor+0xec>

	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8001198:	4b60      	ldr	r3, [pc, #384]	; (800131c <pl_callback_getSensor+0x1d4>)
 800119a:	885a      	ldrh	r2, [r3, #2]
 800119c:	4b60      	ldr	r3, [pc, #384]	; (8001320 <pl_callback_getSensor+0x1d8>)
 800119e:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 80011a0:	4b5e      	ldr	r3, [pc, #376]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011a2:	889a      	ldrh	r2, [r3, #4]
 80011a4:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <pl_callback_getSensor+0x1d8>)
 80011a6:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 80011a8:	4b5c      	ldr	r3, [pc, #368]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011aa:	88da      	ldrh	r2, [r3, #6]
 80011ac:	4b5d      	ldr	r3, [pc, #372]	; (8001324 <pl_callback_getSensor+0x1dc>)
 80011ae:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 80011b0:	4b5a      	ldr	r3, [pc, #360]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011b2:	891a      	ldrh	r2, [r3, #8]
 80011b4:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <pl_callback_getSensor+0x1dc>)
 80011b6:	80da      	strh	r2, [r3, #6]

		HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011be:	4856      	ldr	r0, [pc, #344]	; (8001318 <pl_callback_getSensor+0x1d0>)
 80011c0:	f003 fb16 	bl	80047f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	4853      	ldr	r0, [pc, #332]	; (8001318 <pl_callback_getSensor+0x1d0>)
 80011cc:	f003 fb10 	bl	80047f0 <HAL_GPIO_WritePin>

		for (j=0; j <= 500; j++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	e002      	b.n	80011dc <pl_callback_getSensor+0x94>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3301      	adds	r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011e2:	ddf8      	ble.n	80011d6 <pl_callback_getSensor+0x8e>
		{
		}
		break;
 80011e4:	e026      	b.n	8001234 <pl_callback_getSensor+0xec>

	case 2:
		g_sensor_off[0] = g_ADCBuffer[1];
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011e8:	885a      	ldrh	r2, [r3, #2]
 80011ea:	4b4e      	ldr	r3, [pc, #312]	; (8001324 <pl_callback_getSensor+0x1dc>)
 80011ec:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 80011ee:	4b4b      	ldr	r3, [pc, #300]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011f0:	889a      	ldrh	r2, [r3, #4]
 80011f2:	4b4c      	ldr	r3, [pc, #304]	; (8001324 <pl_callback_getSensor+0x1dc>)
 80011f4:	805a      	strh	r2, [r3, #2]
		g_sensor_on[2] = g_ADCBuffer[3];
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <pl_callback_getSensor+0x1d4>)
 80011f8:	88da      	ldrh	r2, [r3, #6]
 80011fa:	4b49      	ldr	r3, [pc, #292]	; (8001320 <pl_callback_getSensor+0x1d8>)
 80011fc:	809a      	strh	r2, [r3, #4]
		g_sensor_on[3] = g_ADCBuffer[4];
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <pl_callback_getSensor+0x1d4>)
 8001200:	891a      	ldrh	r2, [r3, #8]
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <pl_callback_getSensor+0x1d8>)
 8001204:	80da      	strh	r2, [r3, #6]

		HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120c:	4842      	ldr	r0, [pc, #264]	; (8001318 <pl_callback_getSensor+0x1d0>)
 800120e:	f003 faef 	bl	80047f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001218:	483f      	ldr	r0, [pc, #252]	; (8001318 <pl_callback_getSensor+0x1d0>)
 800121a:	f003 fae9 	bl	80047f0 <HAL_GPIO_WritePin>

		for (j=0; j <= 500; j++)
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	e002      	b.n	800122a <pl_callback_getSensor+0xe2>
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	3301      	adds	r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001230:	ddf8      	ble.n	8001224 <pl_callback_getSensor+0xdc>
		{
		}
		break;
 8001232:	bf00      	nop
	}

	V_battAD = g_ADCBuffer[0];
 8001234:	4b39      	ldr	r3, [pc, #228]	; (800131c <pl_callback_getSensor+0x1d4>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	80fb      	strh	r3, [r7, #6]
	g_V_Batt = 3.3 * (float)V_battAD / (float)(4056 - 1) * (100.0 + 22.0) / 22.0;
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ee17 0a90 	vmov	r0, s15
 8001248:	f7ff f97e 	bl	8000548 <__aeabi_f2d>
 800124c:	a32c      	add	r3, pc, #176	; (adr r3, 8001300 <pl_callback_getSensor+0x1b8>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f9d1 	bl	80005f8 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	a32a      	add	r3, pc, #168	; (adr r3, 8001308 <pl_callback_getSensor+0x1c0>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff faf2 	bl	800084c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <pl_callback_getSensor+0x1e0>)
 8001276:	f7ff f9bf 	bl	80005f8 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <pl_callback_getSensor+0x1e4>)
 8001288:	f7ff fae0 	bl	800084c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fca8 	bl	8000be8 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4a25      	ldr	r2, [pc, #148]	; (8001330 <pl_callback_getSensor+0x1e8>)
 800129c:	6013      	str	r3, [r2, #0]
	AD_step ++;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <pl_callback_getSensor+0x1cc>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <pl_callback_getSensor+0x1cc>)
 80012a8:	701a      	strb	r2, [r3, #0]

	if (AD_step != 3)
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <pl_callback_getSensor+0x1cc>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d005      	beq.n	80012be <pl_callback_getSensor+0x176>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 80012b2:	2205      	movs	r2, #5
 80012b4:	4919      	ldr	r1, [pc, #100]	; (800131c <pl_callback_getSensor+0x1d4>)
 80012b6:	4816      	ldr	r0, [pc, #88]	; (8001310 <pl_callback_getSensor+0x1c8>)
 80012b8:	f001 fcce 	bl	8002c58 <HAL_ADC_Start_DMA>
		AD_step = 0;
		for(i=0;i<4;i++){
			g_sensor[i] = g_sensor_on[i] - g_sensor_off[i];
		}
	}
}
 80012bc:	e019      	b.n	80012f2 <pl_callback_getSensor+0x1aa>
		AD_step = 0;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <pl_callback_getSensor+0x1cc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
		for(i=0;i<4;i++){
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	e010      	b.n	80012ec <pl_callback_getSensor+0x1a4>
			g_sensor[i] = g_sensor_on[i] - g_sensor_off[i];
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <pl_callback_getSensor+0x1d8>)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012d2:	4914      	ldr	r1, [pc, #80]	; (8001324 <pl_callback_getSensor+0x1dc>)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b299      	uxth	r1, r3
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <pl_callback_getSensor+0x1ec>)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0;i<4;i++){
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	ddeb      	ble.n	80012ca <pl_callback_getSensor+0x182>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	66666666 	.word	0x66666666
 8001304:	400a6666 	.word	0x400a6666
 8001308:	00000000 	.word	0x00000000
 800130c:	40afae00 	.word	0x40afae00
 8001310:	2000021c 	.word	0x2000021c
 8001314:	200001fa 	.word	0x200001fa
 8001318:	48000800 	.word	0x48000800
 800131c:	200001f0 	.word	0x200001f0
 8001320:	200001fc 	.word	0x200001fc
 8001324:	20000204 	.word	0x20000204
 8001328:	405e8000 	.word	0x405e8000
 800132c:	40360000 	.word	0x40360000
 8001330:	20000214 	.word	0x20000214
 8001334:	2000020c 	.word	0x2000020c

08001338 <pl_interupt_getSensor>:

void pl_interupt_getSensor(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)g_ADCBuffer,
 800133c:	2205      	movs	r2, #5
 800133e:	4903      	ldr	r1, [pc, #12]	; (800134c <pl_interupt_getSensor+0x14>)
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <pl_interupt_getSensor+0x18>)
 8001342:	f001 fc89 	bl	8002c58 <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));


}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001f0 	.word	0x200001f0
 8001350:	2000021c 	.word	0x2000021c

08001354 <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;

void pl_timer_init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	g_timCount = 0;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <pl_timer_init+0x14>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <pl_timer_init+0x18>)
 8001360:	f005 f8ac 	bl	80064bc <HAL_TIM_Base_Start_IT>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000218 	.word	0x20000218
 800136c:	200003b8 	.word	0x200003b8

08001370 <pl_timer_count>:

void pl_timer_count(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	g_timCount ++;
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <pl_timer_count+0x18>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a03      	ldr	r2, [pc, #12]	; (8001388 <pl_timer_count+0x18>)
 800137c:	6013      	str	r3, [r2, #0]
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	20000218 	.word	0x20000218

0800138c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a2:	4b46      	ldr	r3, [pc, #280]	; (80014bc <MX_ADC1_Init+0x130>)
 80013a4:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <MX_ADC1_Init+0x134>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013a8:	4b44      	ldr	r3, [pc, #272]	; (80014bc <MX_ADC1_Init+0x130>)
 80013aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b42      	ldr	r3, [pc, #264]	; (80014bc <MX_ADC1_Init+0x130>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b6:	4b41      	ldr	r3, [pc, #260]	; (80014bc <MX_ADC1_Init+0x130>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013bc:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <MX_ADC1_Init+0x130>)
 80013be:	2201      	movs	r2, #1
 80013c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <MX_ADC1_Init+0x130>)
 80013c4:	2204      	movs	r2, #4
 80013c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <MX_ADC1_Init+0x130>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <MX_ADC1_Init+0x130>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80013d4:	4b39      	ldr	r3, [pc, #228]	; (80014bc <MX_ADC1_Init+0x130>)
 80013d6:	2205      	movs	r2, #5
 80013d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <MX_ADC1_Init+0x130>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <MX_ADC1_Init+0x130>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e8:	4b34      	ldr	r3, [pc, #208]	; (80014bc <MX_ADC1_Init+0x130>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <MX_ADC1_Init+0x130>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013f6:	4b31      	ldr	r3, [pc, #196]	; (80014bc <MX_ADC1_Init+0x130>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <MX_ADC1_Init+0x130>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001404:	482d      	ldr	r0, [pc, #180]	; (80014bc <MX_ADC1_Init+0x130>)
 8001406:	f001 fae5 	bl	80029d4 <HAL_ADC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001410:	f000 fb7d 	bl	8001b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_ADC1_Init+0x138>)
 8001416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001418:	2306      	movs	r3, #6
 800141a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800141c:	2302      	movs	r3, #2
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001420:	237f      	movs	r3, #127	; 0x7f
 8001422:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001424:	2304      	movs	r3, #4
 8001426:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4822      	ldr	r0, [pc, #136]	; (80014bc <MX_ADC1_Init+0x130>)
 8001432:	f001 fec9 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800143c:	f000 fb67 	bl	8001b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_ADC1_Init+0x13c>)
 8001442:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001444:	230c      	movs	r3, #12
 8001446:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	481b      	ldr	r0, [pc, #108]	; (80014bc <MX_ADC1_Init+0x130>)
 800144e:	f001 febb 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001458:	f000 fb59 	bl	8001b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_ADC1_Init+0x140>)
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001460:	2312      	movs	r3, #18
 8001462:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4814      	ldr	r0, [pc, #80]	; (80014bc <MX_ADC1_Init+0x130>)
 800146a:	f001 fead 	bl	80031c8 <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001474:	f000 fb4b 	bl	8001b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_ADC1_Init+0x144>)
 800147a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800147c:	2318      	movs	r3, #24
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4619      	mov	r1, r3
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_ADC1_Init+0x130>)
 8001486:	f001 fe9f 	bl	80031c8 <HAL_ADC_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001490:	f000 fb3d 	bl	8001b0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_ADC1_Init+0x148>)
 8001496:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_ADC1_Init+0x130>)
 80014a4:	f001 fe90 	bl	80031c8 <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80014ae:	f000 fb2e 	bl	8001b0e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000021c 	.word	0x2000021c
 80014c0:	50040000 	.word	0x50040000
 80014c4:	43210000 	.word	0x43210000
 80014c8:	3ef08000 	.word	0x3ef08000
 80014cc:	32601000 	.word	0x32601000
 80014d0:	2e300800 	.word	0x2e300800
 80014d4:	2a000400 	.word	0x2a000400

080014d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0a0      	sub	sp, #128	; 0x80
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	2254      	movs	r2, #84	; 0x54
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f007 fc80 	bl	8008dfe <memset>
  if(adcHandle->Instance==ADC1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a4b      	ldr	r2, [pc, #300]	; (8001630 <HAL_ADC_MspInit+0x158>)
 8001504:	4293      	cmp	r3, r2
 8001506:	f040 808f 	bne.w	8001628 <HAL_ADC_MspInit+0x150>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800150a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800150e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001510:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001514:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001516:	2303      	movs	r3, #3
 8001518:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800151e:	2310      	movs	r3, #16
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001522:	2307      	movs	r3, #7
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800152e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	4618      	mov	r0, r3
 800153a:	f004 fc7f 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001544:	f000 fae3 	bl	8001b0e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001548:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	4a39      	ldr	r2, [pc, #228]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 800154e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001554:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	4a33      	ldr	r2, [pc, #204]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156c:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	4a2d      	ldr	r2, [pc, #180]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_ADC_MspInit+0x15c>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 8001590:	23e0      	movs	r3, #224	; 0xe0
 8001592:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001594:	230b      	movs	r3, #11
 8001596:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f002 ffa1 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 80015aa:	2303      	movs	r3, #3
 80015ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ae:	230b      	movs	r3, #11
 80015b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015ba:	4619      	mov	r1, r3
 80015bc:	481e      	ldr	r0, [pc, #120]	; (8001638 <HAL_ADC_MspInit+0x160>)
 80015be:	f002 ff95 	bl	80044ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015c4:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_ADC_MspInit+0x168>)
 80015c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015fc:	480f      	ldr	r0, [pc, #60]	; (800163c <HAL_ADC_MspInit+0x164>)
 80015fe:	f002 fd3f 	bl	8004080 <HAL_DMA_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001608:	f000 fa81 	bl	8001b0e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_ADC_MspInit+0x164>)
 8001610:	64da      	str	r2, [r3, #76]	; 0x4c
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_ADC_MspInit+0x164>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2012      	movs	r0, #18
 800161e:	f002 fcf8 	bl	8004012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001622:	2012      	movs	r0, #18
 8001624:	f002 fd11 	bl	800404a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001628:	bf00      	nop
 800162a:	3780      	adds	r7, #128	; 0x80
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	50040000 	.word	0x50040000
 8001634:	40021000 	.word	0x40021000
 8001638:	48000400 	.word	0x48000400
 800163c:	20000280 	.word	0x20000280
 8001640:	40020008 	.word	0x40020008

08001644 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 800164c:	f7ff fd7c 	bl	8001148 <pl_callback_getSensor>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_DMA_Init+0x38>)
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <MX_DMA_Init+0x38>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6493      	str	r3, [r2, #72]	; 0x48
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_DMA_Init+0x38>)
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	200b      	movs	r0, #11
 800167c:	f002 fcc9 	bl	8004012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001680:	200b      	movs	r0, #11
 8001682:	f002 fce2 	bl	800404a <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b39      	ldr	r3, [pc, #228]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a38      	ldr	r2, [pc, #224]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a32      	ldr	r2, [pc, #200]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b30      	ldr	r3, [pc, #192]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <MX_GPIO_Init+0xfc>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80016f8:	4826      	ldr	r0, [pc, #152]	; (8001794 <MX_GPIO_Init+0x100>)
 80016fa:	f003 f879 	bl	80047f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f003 f872 	bl	80047f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2138      	movs	r1, #56	; 0x38
 8001710:	4821      	ldr	r0, [pc, #132]	; (8001798 <MX_GPIO_Init+0x104>)
 8001712:	f003 f86d 	bl	80047f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 8001716:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800171a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	4819      	ldr	r0, [pc, #100]	; (8001794 <MX_GPIO_Init+0x100>)
 8001730:	f002 fedc 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 8001734:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f002 fecc 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 8001754:	2338      	movs	r3, #56	; 0x38
 8001756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <MX_GPIO_Init+0x104>)
 800176c:	f002 febe 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 8001770:	23c0      	movs	r3, #192	; 0xc0
 8001772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001778:	2301      	movs	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	4619      	mov	r1, r3
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_GPIO_Init+0x104>)
 8001784:	f002 feb2 	bl	80044ec <HAL_GPIO_Init>

}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	48000800 	.word	0x48000800
 8001798:	48000400 	.word	0x48000400

0800179c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_I2C1_Init+0x74>)
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <MX_I2C1_Init+0x78>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_I2C1_Init+0x74>)
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <MX_I2C1_Init+0x7c>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_I2C1_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_I2C1_Init+0x74>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_I2C1_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_I2C1_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_I2C1_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_I2C1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_I2C1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <MX_I2C1_Init+0x74>)
 80017d8:	f003 f822 	bl	8004820 <HAL_I2C_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017e2:	f000 f994 	bl	8001b0e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4809      	ldr	r0, [pc, #36]	; (8001810 <MX_I2C1_Init+0x74>)
 80017ea:	f003 fbf3 	bl	8004fd4 <HAL_I2CEx_ConfigAnalogFilter>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017f4:	f000 f98b 	bl	8001b0e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_I2C1_Init+0x74>)
 80017fc:	f003 fc35 	bl	800506a <HAL_I2CEx_ConfigDigitalFilter>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001806:	f000 f982 	bl	8001b0e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200002c8 	.word	0x200002c8
 8001814:	40005400 	.word	0x40005400
 8001818:	10909cec 	.word	0x10909cec

0800181c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b09e      	sub	sp, #120	; 0x78
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	2254      	movs	r2, #84	; 0x54
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f007 fade 	bl	8008dfe <memset>
  if(i2cHandle->Instance==I2C1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <HAL_I2C_MspInit+0xa8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d137      	bne.n	80018bc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001850:	2300      	movs	r3, #0
 8001852:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4618      	mov	r0, r3
 800185a:	f004 faef 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001864:	f000 f953 	bl	8001b0e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001880:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001884:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001886:	2312      	movs	r3, #18
 8001888:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	2301      	movs	r3, #1
 800188c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001892:	2304      	movs	r3, #4
 8001894:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f002 fe24 	bl	80044ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 80018aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ae:	6593      	str	r3, [r2, #88]	; 0x58
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_I2C_MspInit+0xac>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018bc:	bf00      	nop
 80018be:	3778      	adds	r7, #120	; 0x78
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40005400 	.word	0x40005400
 80018c8:	40021000 	.word	0x40021000

080018cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80018d2:	f000 fdbe 	bl	8002452 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80018d6:	f000 f8cb 	bl	8001a70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80018da:	f7ff fedb 	bl	8001694 <MX_GPIO_Init>
	MX_DMA_Init();
 80018de:	f7ff febb 	bl	8001658 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80018e2:	f000 fcf3 	bl	80022cc <MX_USART2_UART_Init>
	MX_TIM6_Init();
 80018e6:	f000 fb49 	bl	8001f7c <MX_TIM6_Init>
	MX_TIM15_Init();
 80018ea:	f000 fb7d 	bl	8001fe8 <MX_TIM15_Init>
	MX_I2C1_Init();
 80018ee:	f7ff ff55 	bl	800179c <MX_I2C1_Init>
	MX_ADC1_Init();
 80018f2:	f7ff fd4b 	bl	800138c <MX_ADC1_Init>
	MX_TIM1_Init();
 80018f6:	f000 fa57 	bl	8001da8 <MX_TIM1_Init>
	MX_TIM2_Init();
 80018fa:	f000 fae5 	bl	8001ec8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// HAL_TIM_Base_Start_IT(&htim15);
	// HAL_TIM_PWM_MspInit(&htim15);
	// HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
	HAL_TIM_Base_Start_IT(&htim1);
 80018fe:	4852      	ldr	r0, [pc, #328]	; (8001a48 <main+0x17c>)
 8001900:	f004 fddc 	bl	80064bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_MspInit(&htim1);
 8001904:	4850      	ldr	r0, [pc, #320]	; (8001a48 <main+0x17c>)
 8001906:	f000 fbf5 	bl	80020f4 <HAL_TIM_PWM_MspInit>
	HAL_TIM_Base_Start_IT(&htim2);
 800190a:	4850      	ldr	r0, [pc, #320]	; (8001a4c <main+0x180>)
 800190c:	f004 fdd6 	bl	80064bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_MspInit(&htim2);
 8001910:	484e      	ldr	r0, [pc, #312]	; (8001a4c <main+0x180>)
 8001912:	f000 fbef 	bl	80020f4 <HAL_TIM_PWM_MspInit>

	pl_timer_init();
 8001916:	f7ff fd1d 	bl	8001354 <pl_timer_init>

	pl_lcd_init();
 800191a:	f7ff fbca 	bl	80010b2 <pl_lcd_init>
	pl_lcd_puts("Hello");
 800191e:	484c      	ldr	r0, [pc, #304]	; (8001a50 <main+0x184>)
 8001920:	f7ff fbb2 	bl	8001088 <pl_lcd_puts>
	pl_lcd_pos(1, 0);
 8001924:	2100      	movs	r1, #0
 8001926:	2001      	movs	r0, #1
 8001928:	f7ff fbe9 	bl	80010fe <pl_lcd_pos>
	pl_lcd_puts("  STM32");
 800192c:	4849      	ldr	r0, [pc, #292]	; (8001a54 <main+0x188>)
 800192e:	f7ff fbab 	bl	8001088 <pl_lcd_puts>
	HAL_Delay(500);
 8001932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001936:	f000 fe01 	bl	800253c <HAL_Delay>
	pl_lcd_clear();
 800193a:	f7ff fbfb 	bl	8001134 <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 800193e:	2100      	movs	r1, #0
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fbdc 	bl	80010fe <pl_lcd_pos>
	pl_lcd_puts("Mice");
 8001946:	4844      	ldr	r0, [pc, #272]	; (8001a58 <main+0x18c>)
 8001948:	f7ff fb9e 	bl	8001088 <pl_lcd_puts>

	pl_lcd_clear();
 800194c:	f7ff fbf2 	bl	8001134 <pl_lcd_clear>

	int cnt = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c

	float batf;
	uint16_t bat;
	char batBuffer[17] = { 0 };
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	731a      	strb	r2, [r3, #12]
//	  sprintf(batBuffer, "BAT:%f", batf);
//
//	  pl_lcd_pos(0,0);
//	  pl_lcd_puts(batBuffer);

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) g_ADCBuffer,
 8001966:	2205      	movs	r2, #5
 8001968:	493c      	ldr	r1, [pc, #240]	; (8001a5c <main+0x190>)
 800196a:	483d      	ldr	r0, [pc, #244]	; (8001a60 <main+0x194>)
 800196c:	f001 f974 	bl	8002c58 <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));

		sprintf(batBuffer, "%d", g_ADCBuffer[1]);
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <main+0x190>)
 8001972:	885b      	ldrh	r3, [r3, #2]
 8001974:	461a      	mov	r2, r3
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	493a      	ldr	r1, [pc, #232]	; (8001a64 <main+0x198>)
 800197c:	4618      	mov	r0, r3
 800197e:	f007 f9db 	bl	8008d38 <siprintf>

		pl_lcd_pos(0, 0);
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fbba 	bl	80010fe <pl_lcd_pos>
		pl_lcd_puts(batBuffer);
 800198a:	f107 0318 	add.w	r3, r7, #24
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb7a 	bl	8001088 <pl_lcd_puts>

		char strBuffer[17] = { 0 };
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	731a      	strb	r2, [r3, #12]
		sprintf(strBuffer, "CNT=%04d", cnt);
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019aa:	492f      	ldr	r1, [pc, #188]	; (8001a68 <main+0x19c>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f007 f9c3 	bl	8008d38 <siprintf>
		cnt++;
 80019b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b4:	3301      	adds	r3, #1
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		pl_lcd_pos(1, 0);
 80019b8:	2100      	movs	r1, #0
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff fb9f 	bl	80010fe <pl_lcd_pos>
		pl_lcd_puts(strBuffer);
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fb60 	bl	8001088 <pl_lcd_puts>

		if (HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port, SWITCH_1_Pin) == 0) {
 80019c8:	2140      	movs	r1, #64	; 0x40
 80019ca:	4828      	ldr	r0, [pc, #160]	; (8001a6c <main+0x1a0>)
 80019cc:	f002 fef8 	bl	80047c0 <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1c7      	bne.n	8001966 <main+0x9a>

			HAL_GPIO_WritePin(INTERFACELED_GPIO_Port, INTERFACELED_Pin,
 80019d6:	2201      	movs	r2, #1
 80019d8:	2108      	movs	r1, #8
 80019da:	4824      	ldr	r0, [pc, #144]	; (8001a6c <main+0x1a0>)
 80019dc:	f002 ff08 	bl	80047f0 <HAL_GPIO_WritePin>
								GPIO_PIN_SET);

			HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin,
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f002 ff01 	bl	80047f0 <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
			HAL_GPIO_WritePin(MD_RESET_GPIO_Port, MD_RESET_Pin, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2120      	movs	r1, #32
 80019f2:	481e      	ldr	r0, [pc, #120]	; (8001a6c <main+0x1a0>)
 80019f4:	f002 fefc 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_Delay(3);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 fd9f 	bl	800253c <HAL_Delay>
			HAL_GPIO_WritePin(MD_RESET_GPIO_Port, MD_RESET_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2120      	movs	r1, #32
 8001a02:	481a      	ldr	r0, [pc, #104]	; (8001a6c <main+0x1a0>)
 8001a04:	f002 fef4 	bl	80047f0 <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	480f      	ldr	r0, [pc, #60]	; (8001a48 <main+0x17c>)
 8001a0c:	f004 fe02 	bl	8006614 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a10:	2104      	movs	r1, #4
 8001a12:	480e      	ldr	r0, [pc, #56]	; (8001a4c <main+0x180>)
 8001a14:	f004 fdfe 	bl	8006614 <HAL_TIM_PWM_Start>
			HAL_Delay(5000);
 8001a18:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a1c:	f000 fd8e 	bl	800253c <HAL_Delay>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001a20:	2100      	movs	r1, #0
 8001a22:	4809      	ldr	r0, [pc, #36]	; (8001a48 <main+0x17c>)
 8001a24:	f004 fed4 	bl	80067d0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001a28:	2104      	movs	r1, #4
 8001a2a:	4808      	ldr	r0, [pc, #32]	; (8001a4c <main+0x180>)
 8001a2c:	f004 fed0 	bl	80067d0 <HAL_TIM_PWM_Stop>

			HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin,
 8001a30:	2200      	movs	r2, #0
 8001a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3a:	f002 fed9 	bl	80047f0 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
			HAL_Delay(1000);
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f000 fd7b 	bl	800253c <HAL_Delay>
	while (1) {
 8001a46:	e78e      	b.n	8001966 <main+0x9a>
 8001a48:	20000320 	.word	0x20000320
 8001a4c:	2000036c 	.word	0x2000036c
 8001a50:	0800c690 	.word	0x0800c690
 8001a54:	0800c698 	.word	0x0800c698
 8001a58:	0800c6a0 	.word	0x0800c6a0
 8001a5c:	200001f0 	.word	0x200001f0
 8001a60:	2000021c 	.word	0x2000021c
 8001a64:	0800c6a8 	.word	0x0800c6a8
 8001a68:	0800c6ac 	.word	0x0800c6ac
 8001a6c:	48000400 	.word	0x48000400

08001a70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b096      	sub	sp, #88	; 0x58
 8001a74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	2244      	movs	r2, #68	; 0x44
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f007 f9bd 	bl	8008dfe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a96:	f003 fb43 	bl	8005120 <HAL_PWREx_ControlVoltageScaling>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001aa0:	f000 f835 	bl	8001b0e <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001aa8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001aac:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 3;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001aba:	2328      	movs	r3, #40	; 0x28
 8001abc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001abe:	2307      	movs	r3, #7
 8001ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fb7c 	bl	80051cc <HAL_RCC_OscConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0x6e>
		Error_Handler();
 8001ada:	f000 f818 	bl	8001b0e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ade:	230f      	movs	r3, #15
 8001ae0:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001af2:	463b      	mov	r3, r7
 8001af4:	2104      	movs	r1, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 ff7c 	bl	80059f4 <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0x96>
		Error_Handler();
 8001b02:	f000 f804 	bl	8001b0e <Error_Handler>
	}
}
 8001b06:	bf00      	nop
 8001b08:	3758      	adds	r7, #88	; 0x58
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b12:	b672      	cpsid	i
}
 8001b14:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b16:	e7fe      	b.n	8001b16 <Error_Handler+0x8>

08001b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_MspInit+0x44>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <HAL_MspInit+0x44>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6613      	str	r3, [r2, #96]	; 0x60
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_MspInit+0x44>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_MspInit+0x44>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_MspInit+0x44>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_MspInit+0x44>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <MemManage_Handler+0x4>

08001b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f000 fca6 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <DMA1_Channel1_IRQHandler+0x10>)
 8001bba:	f002 fbb7 	bl	800432c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000280 	.word	0x20000280

08001bc8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <ADC1_IRQHandler+0x10>)
 8001bce:	f001 f928 	bl	8002e22 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000021c 	.word	0x2000021c

08001bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <TIM6_DAC_IRQHandler+0x18>)
 8001be2:	f004 fe7d 	bl	80068e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 8001be6:	f7ff fbc3 	bl	8001370 <pl_timer_count>
  pl_interupt_getSensor();
 8001bea:	f7ff fba5 	bl	8001338 <pl_interupt_getSensor>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200003b8 	.word	0x200003b8

08001bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return 1;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_kill>:

int _kill(int pid, int sig)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c12:	f007 f947 	bl	8008ea4 <__errno>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2216      	movs	r2, #22
 8001c1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_exit>:

void _exit (int status)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ffe7 	bl	8001c08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c3a:	e7fe      	b.n	8001c3a <_exit+0x12>

08001c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e00a      	b.n	8001c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c4e:	f3af 8000 	nop.w
 8001c52:	4601      	mov	r1, r0
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	60ba      	str	r2, [r7, #8]
 8001c5a:	b2ca      	uxtb	r2, r1
 8001c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbf0      	blt.n	8001c4e <_read+0x12>
  }

  return len;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e009      	b.n	8001c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	60ba      	str	r2, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbf1      	blt.n	8001c88 <_write+0x12>
  }
  return len;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_close>:

int _close(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_isatty>:

int _isatty(int file)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <_sbrk+0x5c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <_sbrk+0x60>)
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <_sbrk+0x64>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <_sbrk+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d207      	bcs.n	8001d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d48:	f007 f8ac 	bl	8008ea4 <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	220c      	movs	r2, #12
 8001d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <_sbrk+0x64>)
 8001d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20010000 	.word	0x20010000
 8001d78:	00000400 	.word	0x00000400
 8001d7c:	2000031c 	.word	0x2000031c
 8001d80:	20000628 	.word	0x20000628

08001d84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <SystemInit+0x20>)
 8001d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <SystemInit+0x20>)
 8001d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b096      	sub	sp, #88	; 0x58
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	615a      	str	r2, [r3, #20]
 8001dcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	222c      	movs	r2, #44	; 0x2c
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f007 f812 	bl	8008dfe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dda:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001ddc:	4a39      	ldr	r2, [pc, #228]	; (8001ec4 <MX_TIM1_Init+0x11c>)
 8001dde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001de0:	4b37      	ldr	r3, [pc, #220]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001de2:	2207      	movs	r2, #7
 8001de4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001dec:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001dee:	f242 720f 	movw	r2, #9999	; 0x270f
 8001df2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dfa:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e00:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e06:	482e      	ldr	r0, [pc, #184]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001e08:	f004 fbac 	bl	8006564 <HAL_TIM_PWM_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001e12:	f7ff fe7c 	bl	8001b0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e26:	4619      	mov	r1, r3
 8001e28:	4825      	ldr	r0, [pc, #148]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001e2a:	f005 fabb 	bl	80073a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e34:	f7ff fe6b 	bl	8001b0e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e38:	2360      	movs	r3, #96	; 0x60
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 8001e3c:	f241 3387 	movw	r3, #4999	; 0x1387
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e46:	2300      	movs	r3, #0
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001e60:	f004 fe46 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001e6a:	f7ff fe50 	bl	8001b0e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001ea4:	f005 fae4 	bl	8007470 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001eae:	f7ff fe2e 	bl	8001b0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <MX_TIM1_Init+0x118>)
 8001eb4:	f000 f98a 	bl	80021cc <HAL_TIM_MspPostInit>

}
 8001eb8:	bf00      	nop
 8001eba:	3758      	adds	r7, #88	; 0x58
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000320 	.word	0x20000320
 8001ec4:	40012c00 	.word	0x40012c00

08001ec8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eda:	463b      	mov	r3, r7
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
 8001ee8:	615a      	str	r2, [r3, #20]
 8001eea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <MX_TIM2_Init+0xb0>)
 8001eee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <MX_TIM2_Init+0xb0>)
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <MX_TIM2_Init+0xb0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <MX_TIM2_Init+0xb0>)
 8001f02:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <MX_TIM2_Init+0xb0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <MX_TIM2_Init+0xb0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f14:	4818      	ldr	r0, [pc, #96]	; (8001f78 <MX_TIM2_Init+0xb0>)
 8001f16:	f004 fb25 	bl	8006564 <HAL_TIM_PWM_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001f20:	f7ff fdf5 	bl	8001b0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	4811      	ldr	r0, [pc, #68]	; (8001f78 <MX_TIM2_Init+0xb0>)
 8001f34:	f005 fa36 	bl	80073a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001f3e:	f7ff fde6 	bl	8001b0e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f42:	2360      	movs	r3, #96	; 0x60
 8001f44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8001f46:	f241 3387 	movw	r3, #4999	; 0x1387
 8001f4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f54:	463b      	mov	r3, r7
 8001f56:	2204      	movs	r2, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4807      	ldr	r0, [pc, #28]	; (8001f78 <MX_TIM2_Init+0xb0>)
 8001f5c:	f004 fdc8 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001f66:	f7ff fdd2 	bl	8001b0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f6a:	4803      	ldr	r0, [pc, #12]	; (8001f78 <MX_TIM2_Init+0xb0>)
 8001f6c:	f000 f92e 	bl	80021cc <HAL_TIM_MspPostInit>

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000036c 	.word	0x2000036c

08001f7c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_TIM6_Init+0x64>)
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <MX_TIM6_Init+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <MX_TIM6_Init+0x64>)
 8001f94:	224f      	movs	r2, #79	; 0x4f
 8001f96:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_TIM6_Init+0x64>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <MX_TIM6_Init+0x64>)
 8001fa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fa4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_TIM6_Init+0x64>)
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <MX_TIM6_Init+0x64>)
 8001fae:	f004 fa2d 	bl	800640c <HAL_TIM_Base_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001fb8:	f7ff fda9 	bl	8001b0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_TIM6_Init+0x64>)
 8001fca:	f005 f9eb 	bl	80073a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001fd4:	f7ff fd9b 	bl	8001b0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200003b8 	.word	0x200003b8
 8001fe4:	40001000 	.word	0x40001000

08001fe8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b096      	sub	sp, #88	; 0x58
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]
 800200a:	615a      	str	r2, [r3, #20]
 800200c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	222c      	movs	r2, #44	; 0x2c
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f006 fef2 	bl	8008dfe <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <MX_TIM15_Init+0x104>)
 800201c:	4a34      	ldr	r2, [pc, #208]	; (80020f0 <MX_TIM15_Init+0x108>)
 800201e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8002020:	4b32      	ldr	r3, [pc, #200]	; (80020ec <MX_TIM15_Init+0x104>)
 8002022:	224f      	movs	r2, #79	; 0x4f
 8002024:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	4b31      	ldr	r3, [pc, #196]	; (80020ec <MX_TIM15_Init+0x104>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 800202c:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <MX_TIM15_Init+0x104>)
 800202e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002032:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <MX_TIM15_Init+0x104>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <MX_TIM15_Init+0x104>)
 800203c:	2200      	movs	r2, #0
 800203e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <MX_TIM15_Init+0x104>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002046:	4829      	ldr	r0, [pc, #164]	; (80020ec <MX_TIM15_Init+0x104>)
 8002048:	f004 fa8c 	bl	8006564 <HAL_TIM_PWM_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002052:	f7ff fd5c 	bl	8001b0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800205e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002062:	4619      	mov	r1, r3
 8002064:	4821      	ldr	r0, [pc, #132]	; (80020ec <MX_TIM15_Init+0x104>)
 8002066:	f005 f99d 	bl	80073a4 <HAL_TIMEx_MasterConfigSynchronization>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002070:	f7ff fd4d 	bl	8001b0e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002074:	2360      	movs	r3, #96	; 0x60
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 8002078:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800207e:	2300      	movs	r3, #0
 8002080:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002082:	2300      	movs	r3, #0
 8002084:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002096:	2204      	movs	r2, #4
 8002098:	4619      	mov	r1, r3
 800209a:	4814      	ldr	r0, [pc, #80]	; (80020ec <MX_TIM15_Init+0x104>)
 800209c:	f004 fd28 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80020a6:	f7ff fd32 	bl	8001b0e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	4807      	ldr	r0, [pc, #28]	; (80020ec <MX_TIM15_Init+0x104>)
 80020ce:	f005 f9cf 	bl	8007470 <HAL_TIMEx_ConfigBreakDeadTime>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 80020d8:	f7ff fd19 	bl	8001b0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <MX_TIM15_Init+0x104>)
 80020de:	f000 f875 	bl	80021cc <HAL_TIM_MspPostInit>

}
 80020e2:	bf00      	nop
 80020e4:	3758      	adds	r7, #88	; 0x58
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000404 	.word	0x20000404
 80020f0:	40014000 	.word	0x40014000

080020f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <HAL_TIM_PWM_MspInit+0x80>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10c      	bne.n	8002120 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <HAL_TIM_PWM_MspInit+0x84>)
 8002108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210a:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_TIM_PWM_MspInit+0x84>)
 800210c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002110:	6613      	str	r3, [r2, #96]	; 0x60
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_TIM_PWM_MspInit+0x84>)
 8002114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800211e:	e022      	b.n	8002166 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d10c      	bne.n	8002144 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_TIM_PWM_MspInit+0x84>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_TIM_PWM_MspInit+0x84>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_TIM_PWM_MspInit+0x84>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
}
 8002142:	e010      	b.n	8002166 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM15)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_TIM_PWM_MspInit+0x88>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10b      	bne.n	8002166 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_TIM_PWM_MspInit+0x84>)
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_TIM_PWM_MspInit+0x84>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6613      	str	r3, [r2, #96]	; 0x60
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_TIM_PWM_MspInit+0x84>)
 800215c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
}
 8002166:	bf00      	nop
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40021000 	.word	0x40021000
 800217c:	40014000 	.word	0x40014000

08002180 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_TIM_Base_MspInit+0x44>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d113      	bne.n	80021ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_TIM_Base_MspInit+0x48>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	4a0c      	ldr	r2, [pc, #48]	; (80021c8 <HAL_TIM_Base_MspInit+0x48>)
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	6593      	str	r3, [r2, #88]	; 0x58
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_TIM_Base_MspInit+0x48>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	2036      	movs	r0, #54	; 0x36
 80021b0:	f001 ff2f 	bl	8004012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021b4:	2036      	movs	r0, #54	; 0x36
 80021b6:	f001 ff48 	bl	800404a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40001000 	.word	0x40001000
 80021c8:	40021000 	.word	0x40021000

080021cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a35      	ldr	r2, [pc, #212]	; (80022c0 <HAL_TIM_MspPostInit+0xf4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d11e      	bne.n	800222c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <HAL_TIM_MspPostInit+0xf8>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <HAL_TIM_MspPostInit+0xf8>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_TIM_MspPostInit+0xf8>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 8002206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002218:	2301      	movs	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002226:	f002 f961 	bl	80044ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800222a:	e044      	b.n	80022b6 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d11d      	bne.n	8002272 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_TIM_MspPostInit+0xf8>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <HAL_TIM_MspPostInit+0xf8>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_TIM_MspPostInit+0xf8>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 800224e:	2302      	movs	r3, #2
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800225e:	2301      	movs	r3, #1
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226c:	f002 f93e 	bl	80044ec <HAL_GPIO_Init>
}
 8002270:	e021      	b.n	80022b6 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <HAL_TIM_MspPostInit+0xfc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d11c      	bne.n	80022b6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_TIM_MspPostInit+0xf8>)
 800227e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002280:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_TIM_MspPostInit+0xf8>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_TIM_MspPostInit+0xf8>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 8002294:	2308      	movs	r3, #8
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80022a4:	230e      	movs	r3, #14
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b2:	f002 f91b 	bl	80044ec <HAL_GPIO_Init>
}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40014000 	.word	0x40014000

080022cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022d2:	4a15      	ldr	r2, [pc, #84]	; (8002328 <MX_USART2_UART_Init+0x5c>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_USART2_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_USART2_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_USART2_UART_Init+0x58>)
 8002310:	f005 f944 	bl	800759c <HAL_UART_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800231a:	f7ff fbf8 	bl	8001b0e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000450 	.word	0x20000450
 8002328:	40004400 	.word	0x40004400

0800232c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b09e      	sub	sp, #120	; 0x78
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	2254      	movs	r2, #84	; 0x54
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f006 fd56 	bl	8008dfe <memset>
  if(uartHandle->Instance==USART2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <HAL_UART_MspInit+0xcc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d148      	bne.n	80023ee <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800235c:	2302      	movs	r3, #2
 800235e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002360:	2300      	movs	r3, #0
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fd67 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002374:	f7ff fbcb 	bl	8001b0e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_UART_MspInit+0xd0>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_UART_MspInit+0xd0>)
 800237e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002382:	6593      	str	r3, [r2, #88]	; 0x58
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_UART_MspInit+0xd0>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_UART_MspInit+0xd0>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	4a19      	ldr	r2, [pc, #100]	; (80023fc <HAL_UART_MspInit+0xd0>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_UART_MspInit+0xd0>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80023a8:	2304      	movs	r3, #4
 80023aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b8:	2307      	movs	r3, #7
 80023ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023c0:	4619      	mov	r1, r3
 80023c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c6:	f002 f891 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80023ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80023dc:	2303      	movs	r3, #3
 80023de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80023e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023e4:	4619      	mov	r1, r3
 80023e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ea:	f002 f87f 	bl	80044ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023ee:	bf00      	nop
 80023f0:	3778      	adds	r7, #120	; 0x78
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40004400 	.word	0x40004400
 80023fc:	40021000 	.word	0x40021000

08002400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002404:	f7ff fcbe 	bl	8001d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002408:	480c      	ldr	r0, [pc, #48]	; (800243c <LoopForever+0x6>)
  ldr r1, =_edata
 800240a:	490d      	ldr	r1, [pc, #52]	; (8002440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <LoopForever+0xe>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002410:	e002      	b.n	8002418 <LoopCopyDataInit>

08002412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002416:	3304      	adds	r3, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800241c:	d3f9      	bcc.n	8002412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002420:	4c0a      	ldr	r4, [pc, #40]	; (800244c <LoopForever+0x16>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002424:	e001      	b.n	800242a <LoopFillZerobss>

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002428:	3204      	adds	r2, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800242e:	f006 fd3f 	bl	8008eb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002432:	f7ff fa4b 	bl	80018cc <main>

08002436 <LoopForever>:

LoopForever:
    b LoopForever
 8002436:	e7fe      	b.n	8002436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800243c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002440:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002444:	0800cb38 	.word	0x0800cb38
  ldr r2, =_sbss
 8002448:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800244c:	20000628 	.word	0x20000628

08002450 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <CAN1_RX0_IRQHandler>

08002452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245c:	2003      	movs	r0, #3
 800245e:	f001 fdcd 	bl	8003ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002462:	2000      	movs	r0, #0
 8002464:	f000 f80e 	bl	8002484 <HAL_InitTick>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	e001      	b.n	8002478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002474:	f7ff fb50 	bl	8001b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002478:	79fb      	ldrb	r3, [r7, #7]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_InitTick+0x6c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d023      	beq.n	80024e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <HAL_InitTick+0x70>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <HAL_InitTick+0x6c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f001 fdd9 	bl	8004066 <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d809      	bhi.n	80024d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f001 fda3 	bl	8004012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_InitTick+0x74>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e007      	b.n	80024e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	e004      	b.n	80024e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e001      	b.n	80024e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_IncTick+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_IncTick+0x24>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000008 	.word	0x20000008
 8002520:	200004d8 	.word	0x200004d8

08002524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_GetTick+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	200004d8 	.word	0x200004d8

0800253c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff ffee 	bl	8002524 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d005      	beq.n	8002562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_Delay+0x44>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002562:	bf00      	nop
 8002564:	f7ff ffde 	bl	8002524 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d8f7      	bhi.n	8002564 <HAL_Delay+0x28>
  {
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000008 	.word	0x20000008

08002584 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	609a      	str	r2, [r3, #8]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3360      	adds	r3, #96	; 0x60
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <LL_ADC_SetOffset+0x44>)
 800260e:	4013      	ands	r3, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	4313      	orrs	r3, r2
 800261c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	03fff000 	.word	0x03fff000

08002634 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3360      	adds	r3, #96	; 0x60
 8002642:	461a      	mov	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3360      	adds	r3, #96	; 0x60
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	431a      	orrs	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800268a:	bf00      	nop
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3330      	adds	r3, #48	; 0x30
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	4413      	add	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	211f      	movs	r1, #31
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0e9b      	lsrs	r3, r3, #26
 80026f4:	f003 011f 	and.w	r1, r3, #31
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	431a      	orrs	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800273a:	b480      	push	{r7}
 800273c:	b087      	sub	sp, #28
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3314      	adds	r3, #20
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	0e5b      	lsrs	r3, r3, #25
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	4413      	add	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	0d1b      	lsrs	r3, r3, #20
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	2107      	movs	r1, #7
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	401a      	ands	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	0d1b      	lsrs	r3, r3, #20
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	431a      	orrs	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	43db      	mvns	r3, r3
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0318 	and.w	r3, r3, #24
 80027b2:	4908      	ldr	r1, [pc, #32]	; (80027d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027b4:	40d9      	lsrs	r1, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	400b      	ands	r3, r1
 80027ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027be:	431a      	orrs	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	0007ffff 	.word	0x0007ffff

080027d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6093      	str	r3, [r2, #8]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800280c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002810:	d101      	bne.n	8002816 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002860:	d101      	bne.n	8002866 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002884:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b0:	f043 0202 	orr.w	r2, r3, #2
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <LL_ADC_IsEnabled+0x18>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <LL_ADC_IsEnabled+0x1a>
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d101      	bne.n	8002902 <LL_ADC_IsDisableOngoing+0x18>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <LL_ADC_IsDisableOngoing+0x1a>
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002924:	f043 0204 	orr.w	r2, r3, #4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002948:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800294c:	f043 0210 	orr.w	r2, r3, #16
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b04      	cmp	r3, #4
 8002972:	d101      	bne.n	8002978 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002996:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d101      	bne.n	80029c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e126      	b.n	8002c3c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7fe fd6b 	bl	80014d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fef1 	bl	80027fc <LL_ADC_IsDeepPowerDownEnabled>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fed7 	bl	80027d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff0c 	bl	800284c <LL_ADC_IsInternalRegulatorEnabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d115      	bne.n	8002a66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fef0 	bl	8002824 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a44:	4b7f      	ldr	r3, [pc, #508]	; (8002c44 <HAL_ADC_Init+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	4a7f      	ldr	r2, [pc, #508]	; (8002c48 <HAL_ADC_Init+0x274>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a58:	e002      	b.n	8002a60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f9      	bne.n	8002a5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff feee 	bl	800284c <LL_ADC_IsInternalRegulatorEnabled>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f043 0210 	orr.w	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ff62 	bl	8002960 <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 80bf 	bne.w	8002c2a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 80bb 	bne.w	8002c2a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002abc:	f043 0202 	orr.w	r2, r3, #2
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fefb 	bl	80028c4 <LL_ADC_IsEnabled>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10b      	bne.n	8002aec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ad4:	485d      	ldr	r0, [pc, #372]	; (8002c4c <HAL_ADC_Init+0x278>)
 8002ad6:	f7ff fef5 	bl	80028c4 <LL_ADC_IsEnabled>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	485a      	ldr	r0, [pc, #360]	; (8002c50 <HAL_ADC_Init+0x27c>)
 8002ae8:	f7ff fd4c 	bl	8002584 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7e5b      	ldrb	r3, [r3, #25]
 8002af0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002af6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002afc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b02:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d106      	bne.n	8002b28 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	045b      	lsls	r3, r3, #17
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d009      	beq.n	8002b44 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <HAL_ADC_Init+0x280>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	69b9      	ldr	r1, [r7, #24]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff26 	bl	80029ae <LL_ADC_INJ_IsConversionOngoing>
 8002b62:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d13d      	bne.n	8002be6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d13a      	bne.n	8002be6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b74:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b7c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b8c:	f023 0302 	bic.w	r3, r3, #2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	69b9      	ldr	r1, [r7, #24]
 8002b96:	430b      	orrs	r3, r1
 8002b98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d118      	bne.n	8002bd6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bba:	4311      	orrs	r1, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bc0:	4311      	orrs	r1, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	611a      	str	r2, [r3, #16]
 8002bd4:	e007      	b.n	8002be6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10c      	bne.n	8002c08 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	f023 010f 	bic.w	r1, r3, #15
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
 8002c06:	e007      	b.n	8002c18 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 020f 	bic.w	r2, r2, #15
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f023 0303 	bic.w	r3, r3, #3
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
 8002c28:	e007      	b.n	8002c3a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3720      	adds	r7, #32
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000000 	.word	0x20000000
 8002c48:	053e2d63 	.word	0x053e2d63
 8002c4c:	50040000 	.word	0x50040000
 8002c50:	50040300 	.word	0x50040300
 8002c54:	fff0c007 	.word	0xfff0c007

08002c58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fe79 	bl	8002960 <LL_ADC_REG_IsConversionOngoing>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d167      	bne.n	8002d44 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_Start_DMA+0x2a>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e063      	b.n	8002d4a <HAL_ADC_Start_DMA+0xf2>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 ff3a 	bl	8003b04 <ADC_Enable>
 8002c90:	4603      	mov	r3, r0
 8002c92:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d14f      	bne.n	8002d3a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f023 0206 	bic.w	r2, r3, #6
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc6:	e002      	b.n	8002cce <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <HAL_ADC_Start_DMA+0xfc>)
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <HAL_ADC_Start_DMA+0x100>)
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	4a1e      	ldr	r2, [pc, #120]	; (8002d5c <HAL_ADC_Start_DMA+0x104>)
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	221c      	movs	r2, #28
 8002cec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0210 	orr.w	r2, r2, #16
 8002d04:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3340      	adds	r3, #64	; 0x40
 8002d20:	4619      	mov	r1, r3
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f001 fa63 	bl	80041f0 <HAL_DMA_Start_IT>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fdec 	bl	8002910 <LL_ADC_REG_StartConversion>
 8002d38:	e006      	b.n	8002d48 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d42:	e001      	b.n	8002d48 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
 8002d46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	08003ccf 	.word	0x08003ccf
 8002d58:	08003da7 	.word	0x08003da7
 8002d5c:	08003dc3 	.word	0x08003dc3

08002d60 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_Stop_DMA+0x16>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e051      	b.n	8002e1a <HAL_ADC_Stop_DMA+0xba>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002d7e:	2103      	movs	r1, #3
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fe03 	bl	800398c <ADC_ConversionStop>
 8002d86:	4603      	mov	r3, r0
 8002d88:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d13f      	bne.n	8002e10 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d10f      	bne.n	8002dce <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 fa7c 	bl	80042b0 <HAL_DMA_Abort>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0210 	bic.w	r2, r2, #16
 8002ddc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 ff13 	bl	8003c10 <ADC_Disable>
 8002dea:	4603      	mov	r3, r0
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e002      	b.n	8002df6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 ff0d 	bl	8003c10 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b088      	sub	sp, #32
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d017      	beq.n	8002e78 <HAL_ADC_IRQHandler+0x56>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 ffeb 	bl	8003e46 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2202      	movs	r2, #2
 8002e76:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <HAL_ADC_IRQHandler+0x6a>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d05e      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d059      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fbea 	bl	8002696 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d03e      	beq.n	8002f46 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d135      	bne.n	8002f46 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d12e      	bne.n	8002f46 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fd37 	bl	8002960 <LL_ADC_REG_IsConversionOngoing>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d11a      	bne.n	8002f2e <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 020c 	bic.w	r2, r2, #12
 8002f06:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d112      	bne.n	8002f46 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
 8002f2c:	e00b      	b.n	8002f46 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe fb7c 	bl	8001644 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	220c      	movs	r2, #12
 8002f52:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <HAL_ADC_IRQHandler+0x146>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d072      	beq.n	8003058 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d06d      	beq.n	8003058 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fbbb 	bl	8002714 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f9e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fb76 	bl	8002696 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002faa:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d047      	beq.n	800304a <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_ADC_IRQHandler+0x1b2>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d03f      	beq.n	800304a <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d13a      	bne.n	800304a <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d133      	bne.n	800304a <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d12e      	bne.n	800304a <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fcdc 	bl	80029ae <LL_ADC_INJ_IsConversionOngoing>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11a      	bne.n	8003032 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800300a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d112      	bne.n	800304a <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
 8003030:	e00b      	b.n	800304a <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f043 0210 	orr.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fed3 	bl	8003df6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2260      	movs	r2, #96	; 0x60
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	2b00      	cmp	r3, #0
 8003060:	d011      	beq.n	8003086 <HAL_ADC_IRQHandler+0x264>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00c      	beq.n	8003086 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f890 	bl	800319e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <HAL_ADC_IRQHandler+0x294>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 feb9 	bl	8003e1e <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d012      	beq.n	80030e6 <HAL_ADC_IRQHandler+0x2c4>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 feab 	bl	8003e32 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02a      	beq.n	8003146 <HAL_ADC_IRQHandler+0x324>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d025      	beq.n	8003146 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8003102:	2301      	movs	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e008      	b.n	800311a <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8003116:	2301      	movs	r3, #1
 8003118:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10e      	bne.n	800313e <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f043 0202 	orr.w	r2, r3, #2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f83a 	bl	80031b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2210      	movs	r2, #16
 8003144:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d018      	beq.n	8003182 <HAL_ADC_IRQHandler+0x360>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003156:	2b00      	cmp	r3, #0
 8003158:	d013      	beq.n	8003182 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	f043 0208 	orr.w	r2, r3, #8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800317a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fe44 	bl	8003e0a <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003182:	bf00      	nop
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b0b6      	sub	sp, #216	; 0xd8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x22>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e3bb      	b.n	8003962 <HAL_ADC_ConfigChannel+0x79a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fbb2 	bl	8002960 <LL_ADC_REG_IsConversionOngoing>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 83a0 	bne.w	8003944 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d824      	bhi.n	800325e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	3b02      	subs	r3, #2
 800321a:	2b03      	cmp	r3, #3
 800321c:	d81b      	bhi.n	8003256 <HAL_ADC_ConfigChannel+0x8e>
 800321e:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <HAL_ADC_ConfigChannel+0x5c>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003235 	.word	0x08003235
 8003228:	0800323d 	.word	0x0800323d
 800322c:	08003245 	.word	0x08003245
 8003230:	0800324d 	.word	0x0800324d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003234:	230c      	movs	r3, #12
 8003236:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800323a:	e010      	b.n	800325e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800323c:	2312      	movs	r3, #18
 800323e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003242:	e00c      	b.n	800325e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003244:	2318      	movs	r3, #24
 8003246:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800324a:	e008      	b.n	800325e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800324c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003254:	e003      	b.n	800325e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003256:	2306      	movs	r3, #6
 8003258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800325c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800326c:	f7ff fa26 	bl	80026bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fb73 	bl	8002960 <LL_ADC_REG_IsConversionOngoing>
 800327a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fb93 	bl	80029ae <LL_ADC_INJ_IsConversionOngoing>
 8003288:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800328c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 81a4 	bne.w	80035de <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 819f 	bne.w	80035de <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f7ff fa44 	bl	800273a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	08db      	lsrs	r3, r3, #3
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d00a      	beq.n	80032ea <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6919      	ldr	r1, [r3, #16]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032e4:	f7ff f982 	bl	80025ec <LL_ADC_SetOffset>
 80032e8:	e179      	b.n	80035de <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f99f 	bl	8002634 <LL_ADC_GetOffsetChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x14e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff f994 	bl	8002634 <LL_ADC_GetOffsetChannel>
 800330c:	4603      	mov	r3, r0
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	e01e      	b.n	8003354 <HAL_ADC_ConfigChannel+0x18c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f989 	bl	8002634 <LL_ADC_GetOffsetChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003334:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800333c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003344:	2320      	movs	r3, #32
 8003346:	e004      	b.n	8003352 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1a4>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	e018      	b.n	800339e <HAL_ADC_ConfigChannel+0x1d6>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003390:	2320      	movs	r3, #32
 8003392:	e004      	b.n	800339e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003394:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800339e:	429a      	cmp	r2, r3
 80033a0:	d106      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff f958 	bl	8002660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff f93c 	bl	8002634 <LL_ADC_GetOffsetChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x214>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2101      	movs	r1, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff f931 	bl	8002634 <LL_ADC_GetOffsetChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	e01e      	b.n	800341a <HAL_ADC_ConfigChannel+0x252>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2101      	movs	r1, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f926 	bl	8002634 <LL_ADC_GetOffsetChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80033fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800340a:	2320      	movs	r3, #32
 800340c:	e004      	b.n	8003418 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800340e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x26a>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	e018      	b.n	8003464 <HAL_ADC_ConfigChannel+0x29c>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800344a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800344e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e004      	b.n	8003464 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800345a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003464:	429a      	cmp	r2, r3
 8003466:	d106      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2200      	movs	r2, #0
 800346e:	2101      	movs	r1, #1
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f8f5 	bl	8002660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f8d9 	bl	8002634 <LL_ADC_GetOffsetChannel>
 8003482:	4603      	mov	r3, r0
 8003484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x2da>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f8ce 	bl	8002634 <LL_ADC_GetOffsetChannel>
 8003498:	4603      	mov	r3, r0
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	e01e      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x318>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f8c3 	bl	8002634 <LL_ADC_GetOffsetChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80034c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80034c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80034d0:	2320      	movs	r3, #32
 80034d2:	e004      	b.n	80034de <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80034d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x330>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0e9b      	lsrs	r3, r3, #26
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	e014      	b.n	8003522 <HAL_ADC_ConfigChannel+0x35a>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800350c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e004      	b.n	8003522 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003522:	429a      	cmp	r2, r3
 8003524:	d106      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	2102      	movs	r1, #2
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f896 	bl	8002660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2103      	movs	r1, #3
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff f87a 	bl	8002634 <LL_ADC_GetOffsetChannel>
 8003540:	4603      	mov	r3, r0
 8003542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x398>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2103      	movs	r1, #3
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f86f 	bl	8002634 <LL_ADC_GetOffsetChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	0e9b      	lsrs	r3, r3, #26
 800355a:	f003 021f 	and.w	r2, r3, #31
 800355e:	e017      	b.n	8003590 <HAL_ADC_ConfigChannel+0x3c8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2103      	movs	r1, #3
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff f864 	bl	8002634 <LL_ADC_GetOffsetChannel>
 800356c:	4603      	mov	r3, r0
 800356e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800357c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003582:	2320      	movs	r3, #32
 8003584:	e003      	b.n	800358e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x3e0>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	e011      	b.n	80035cc <HAL_ADC_ConfigChannel+0x404>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80035b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035b8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80035ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80035c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d106      	bne.n	80035de <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2103      	movs	r1, #3
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff f841 	bl	8002660 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f96e 	bl	80028c4 <LL_ADC_IsEnabled>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 8140 	bne.w	8003870 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	461a      	mov	r2, r3
 80035fe:	f7ff f8c7 	bl	8002790 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	4a8f      	ldr	r2, [pc, #572]	; (8003844 <HAL_ADC_ConfigChannel+0x67c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	f040 8131 	bne.w	8003870 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x46e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	0e9b      	lsrs	r3, r3, #26
 8003624:	3301      	adds	r3, #1
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	2b09      	cmp	r3, #9
 800362c:	bf94      	ite	ls
 800362e:	2301      	movls	r3, #1
 8003630:	2300      	movhi	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	e019      	b.n	800366a <HAL_ADC_ConfigChannel+0x4a2>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003646:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800364e:	2320      	movs	r3, #32
 8003650:	e003      	b.n	800365a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2b09      	cmp	r3, #9
 8003662:	bf94      	ite	ls
 8003664:	2301      	movls	r3, #1
 8003666:	2300      	movhi	r3, #0
 8003668:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800366a:	2b00      	cmp	r3, #0
 800366c:	d079      	beq.n	8003762 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_ADC_ConfigChannel+0x4c2>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0e9b      	lsrs	r3, r3, #26
 8003680:	3301      	adds	r3, #1
 8003682:	069b      	lsls	r3, r3, #26
 8003684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003688:	e015      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x4ee>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800369c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80036a2:	2320      	movs	r3, #32
 80036a4:	e003      	b.n	80036ae <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80036a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	069b      	lsls	r3, r3, #26
 80036b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x50e>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0e9b      	lsrs	r3, r3, #26
 80036c8:	3301      	adds	r3, #1
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2101      	movs	r1, #1
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	e017      	b.n	8003706 <HAL_ADC_ConfigChannel+0x53e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80036e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80036e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80036ee:	2320      	movs	r3, #32
 80036f0:	e003      	b.n	80036fa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80036f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f4:	fab3 f383 	clz	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	2101      	movs	r1, #1
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	ea42 0103 	orr.w	r1, r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_ADC_ConfigChannel+0x564>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	0e9b      	lsrs	r3, r3, #26
 800371c:	3301      	adds	r3, #1
 800371e:	f003 021f 	and.w	r2, r3, #31
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	051b      	lsls	r3, r3, #20
 800372a:	e018      	b.n	800375e <HAL_ADC_ConfigChannel+0x596>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003744:	2320      	movs	r3, #32
 8003746:	e003      	b.n	8003750 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	f003 021f 	and.w	r2, r3, #31
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800375e:	430b      	orrs	r3, r1
 8003760:	e081      	b.n	8003866 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_ADC_ConfigChannel+0x5b6>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	0e9b      	lsrs	r3, r3, #26
 8003774:	3301      	adds	r3, #1
 8003776:	069b      	lsls	r3, r3, #26
 8003778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800377c:	e015      	b.n	80037aa <HAL_ADC_ConfigChannel+0x5e2>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003796:	2320      	movs	r3, #32
 8003798:	e003      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	069b      	lsls	r3, r3, #26
 80037a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x602>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	0e9b      	lsrs	r3, r3, #26
 80037bc:	3301      	adds	r3, #1
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f303 	lsl.w	r3, r1, r3
 80037c8:	e017      	b.n	80037fa <HAL_ADC_ConfigChannel+0x632>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	61bb      	str	r3, [r7, #24]
  return result;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80037e2:	2320      	movs	r3, #32
 80037e4:	e003      	b.n	80037ee <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2101      	movs	r1, #1
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	ea42 0103 	orr.w	r1, r2, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10d      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x65e>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	0e9b      	lsrs	r3, r3, #26
 8003810:	3301      	adds	r3, #1
 8003812:	f003 021f 	and.w	r2, r3, #31
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	3b1e      	subs	r3, #30
 800381e:	051b      	lsls	r3, r3, #20
 8003820:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003824:	e01e      	b.n	8003864 <HAL_ADC_ConfigChannel+0x69c>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	60fb      	str	r3, [r7, #12]
  return result;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800383e:	2320      	movs	r3, #32
 8003840:	e006      	b.n	8003850 <HAL_ADC_ConfigChannel+0x688>
 8003842:	bf00      	nop
 8003844:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f003 021f 	and.w	r2, r3, #31
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	3b1e      	subs	r3, #30
 800385e:	051b      	lsls	r3, r3, #20
 8003860:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003864:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386a:	4619      	mov	r1, r3
 800386c:	f7fe ff65 	bl	800273a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_ADC_ConfigChannel+0x7a4>)
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d06c      	beq.n	8003956 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800387c:	483c      	ldr	r0, [pc, #240]	; (8003970 <HAL_ADC_ConfigChannel+0x7a8>)
 800387e:	f7fe fea7 	bl	80025d0 <LL_ADC_GetCommonPathInternalCh>
 8003882:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a3a      	ldr	r2, [pc, #232]	; (8003974 <HAL_ADC_ConfigChannel+0x7ac>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d127      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d121      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a35      	ldr	r2, [pc, #212]	; (8003978 <HAL_ADC_ConfigChannel+0x7b0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d157      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038ae:	4619      	mov	r1, r3
 80038b0:	482f      	ldr	r0, [pc, #188]	; (8003970 <HAL_ADC_ConfigChannel+0x7a8>)
 80038b2:	f7fe fe7a 	bl	80025aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038b6:	4b31      	ldr	r3, [pc, #196]	; (800397c <HAL_ADC_ConfigChannel+0x7b4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	4a30      	ldr	r2, [pc, #192]	; (8003980 <HAL_ADC_ConfigChannel+0x7b8>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038d0:	e002      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f9      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038de:	e03a      	b.n	8003956 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a27      	ldr	r2, [pc, #156]	; (8003984 <HAL_ADC_ConfigChannel+0x7bc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d113      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10d      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1f      	ldr	r2, [pc, #124]	; (8003978 <HAL_ADC_ConfigChannel+0x7b0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d12a      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003904:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003908:	4619      	mov	r1, r3
 800390a:	4819      	ldr	r0, [pc, #100]	; (8003970 <HAL_ADC_ConfigChannel+0x7a8>)
 800390c:	f7fe fe4d 	bl	80025aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003910:	e021      	b.n	8003956 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <HAL_ADC_ConfigChannel+0x7c0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d11c      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800391c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d116      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a12      	ldr	r2, [pc, #72]	; (8003978 <HAL_ADC_ConfigChannel+0x7b0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d111      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003936:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800393a:	4619      	mov	r1, r3
 800393c:	480c      	ldr	r0, [pc, #48]	; (8003970 <HAL_ADC_ConfigChannel+0x7a8>)
 800393e:	f7fe fe34 	bl	80025aa <LL_ADC_SetCommonPathInternalCh>
 8003942:	e008      	b.n	8003956 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800395e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003962:	4618      	mov	r0, r3
 8003964:	37d8      	adds	r7, #216	; 0xd8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	80080000 	.word	0x80080000
 8003970:	50040300 	.word	0x50040300
 8003974:	c7520000 	.word	0xc7520000
 8003978:	50040000 	.word	0x50040000
 800397c:	20000000 	.word	0x20000000
 8003980:	053e2d63 	.word	0x053e2d63
 8003984:	cb840000 	.word	0xcb840000
 8003988:	80000001 	.word	0x80000001

0800398c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe ffdc 	bl	8002960 <LL_ADC_REG_IsConversionOngoing>
 80039a8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fffd 	bl	80029ae <LL_ADC_INJ_IsConversionOngoing>
 80039b4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8098 	beq.w	8003af4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d02a      	beq.n	8003a28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	7e5b      	ldrb	r3, [r3, #25]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d126      	bne.n	8003a28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	7e1b      	ldrb	r3, [r3, #24]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d122      	bne.n	8003a28 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80039e2:	2301      	movs	r3, #1
 80039e4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039e6:	e014      	b.n	8003a12 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	4a45      	ldr	r2, [pc, #276]	; (8003b00 <ADC_ConversionStop+0x174>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d90d      	bls.n	8003a0c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	f043 0210 	orr.w	r2, r3, #16
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	f043 0201 	orr.w	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e074      	b.n	8003af6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d1e3      	bne.n	80039e8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d014      	beq.n	8003a58 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe ff94 	bl	8002960 <LL_ADC_REG_IsConversionOngoing>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00c      	beq.n	8003a58 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe ff51 	bl	80028ea <LL_ADC_IsDisableOngoing>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe ff70 	bl	8002938 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d014      	beq.n	8003a88 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe ffa3 	bl	80029ae <LL_ADC_INJ_IsConversionOngoing>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00c      	beq.n	8003a88 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe ff39 	bl	80028ea <LL_ADC_IsDisableOngoing>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d104      	bne.n	8003a88 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe ff7f 	bl	8002986 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d005      	beq.n	8003a9a <ADC_ConversionStop+0x10e>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d105      	bne.n	8003aa0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003a94:	230c      	movs	r3, #12
 8003a96:	617b      	str	r3, [r7, #20]
        break;
 8003a98:	e005      	b.n	8003aa6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	617b      	str	r3, [r7, #20]
        break;
 8003a9e:	e002      	b.n	8003aa6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	617b      	str	r3, [r7, #20]
        break;
 8003aa4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003aa6:	f7fe fd3d 	bl	8002524 <HAL_GetTick>
 8003aaa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003aac:	e01b      	b.n	8003ae6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003aae:	f7fe fd39 	bl	8002524 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	d914      	bls.n	8003ae6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	f043 0210 	orr.w	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e007      	b.n	8003af6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1dc      	bne.n	8003aae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	a33fffff 	.word	0xa33fffff

08003b04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fed5 	bl	80028c4 <LL_ADC_IsEnabled>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d169      	bne.n	8003bf4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <ADC_Enable+0xfc>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	f043 0210 	orr.w	r2, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e055      	b.n	8003bf6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe fe90 	bl	8002874 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b54:	482b      	ldr	r0, [pc, #172]	; (8003c04 <ADC_Enable+0x100>)
 8003b56:	f7fe fd3b 	bl	80025d0 <LL_ADC_GetCommonPathInternalCh>
 8003b5a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d013      	beq.n	8003b8c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b64:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <ADC_Enable+0x104>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	4a28      	ldr	r2, [pc, #160]	; (8003c0c <ADC_Enable+0x108>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	4613      	mov	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b7e:	e002      	b.n	8003b86 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f9      	bne.n	8003b80 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b8c:	f7fe fcca 	bl	8002524 <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b92:	e028      	b.n	8003be6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe fe93 	bl	80028c4 <LL_ADC_IsEnabled>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fe63 	bl	8002874 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bae:	f7fe fcb9 	bl	8002524 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d914      	bls.n	8003be6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d00d      	beq.n	8003be6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f043 0210 	orr.w	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e007      	b.n	8003bf6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d1cf      	bne.n	8003b94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	8000003f 	.word	0x8000003f
 8003c04:	50040300 	.word	0x50040300
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	053e2d63 	.word	0x053e2d63

08003c10 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fe fe64 	bl	80028ea <LL_ADC_IsDisableOngoing>
 8003c22:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe fe4b 	bl	80028c4 <LL_ADC_IsEnabled>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d047      	beq.n	8003cc4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d144      	bne.n	8003cc4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030d 	and.w	r3, r3, #13
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d10c      	bne.n	8003c62 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fe25 	bl	800289c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2203      	movs	r2, #3
 8003c58:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c5a:	f7fe fc63 	bl	8002524 <HAL_GetTick>
 8003c5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c60:	e029      	b.n	8003cb6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	f043 0210 	orr.w	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	f043 0201 	orr.w	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e023      	b.n	8003cc6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c7e:	f7fe fc51 	bl	8002524 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d914      	bls.n	8003cb6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	f043 0210 	orr.w	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e007      	b.n	8003cc6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1dc      	bne.n	8003c7e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d14b      	bne.n	8003d80 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d021      	beq.n	8003d46 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fcc5 	bl	8002696 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d032      	beq.n	8003d78 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d12b      	bne.n	8003d78 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11f      	bne.n	8003d78 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f043 0201 	orr.w	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
 8003d44:	e018      	b.n	8003d78 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d111      	bne.n	8003d78 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f043 0201 	orr.w	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7fd fc63 	bl	8001644 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d7e:	e00e      	b.n	8003d9e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f7ff fa10 	bl	80031b2 <HAL_ADC_ErrorCallback>
}
 8003d92:	e004      	b.n	8003d9e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f7ff f9e8 	bl	800318a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	f043 0204 	orr.w	r2, r3, #4
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff f9e2 	bl	80031b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e8e:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	60d3      	str	r3, [r2, #12]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <__NVIC_GetPriorityGrouping+0x18>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	f003 0307 	and.w	r3, r3, #7
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	db0b      	blt.n	8003eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	f003 021f 	and.w	r2, r3, #31
 8003ed8:	4907      	ldr	r1, [pc, #28]	; (8003ef8 <__NVIC_EnableIRQ+0x38>)
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	e000e100 	.word	0xe000e100

08003efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	6039      	str	r1, [r7, #0]
 8003f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	db0a      	blt.n	8003f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	490c      	ldr	r1, [pc, #48]	; (8003f48 <__NVIC_SetPriority+0x4c>)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	0112      	lsls	r2, r2, #4
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	440b      	add	r3, r1
 8003f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f24:	e00a      	b.n	8003f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4908      	ldr	r1, [pc, #32]	; (8003f4c <__NVIC_SetPriority+0x50>)
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	3b04      	subs	r3, #4
 8003f34:	0112      	lsls	r2, r2, #4
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	440b      	add	r3, r1
 8003f3a:	761a      	strb	r2, [r3, #24]
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	e000e100 	.word	0xe000e100
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f1c3 0307 	rsb	r3, r3, #7
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	bf28      	it	cs
 8003f6e:	2304      	movcs	r3, #4
 8003f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3304      	adds	r3, #4
 8003f76:	2b06      	cmp	r3, #6
 8003f78:	d902      	bls.n	8003f80 <NVIC_EncodePriority+0x30>
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3b03      	subs	r3, #3
 8003f7e:	e000      	b.n	8003f82 <NVIC_EncodePriority+0x32>
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	401a      	ands	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f98:	f04f 31ff 	mov.w	r1, #4294967295
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	43d9      	mvns	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	4313      	orrs	r3, r2
         );
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3724      	adds	r7, #36	; 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc8:	d301      	bcc.n	8003fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e00f      	b.n	8003fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <SysTick_Config+0x40>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fd6:	210f      	movs	r1, #15
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	f7ff ff8e 	bl	8003efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <SysTick_Config+0x40>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <SysTick_Config+0x40>)
 8003fe8:	2207      	movs	r2, #7
 8003fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	e000e010 	.word	0xe000e010

08003ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff ff29 	bl	8003e5c <__NVIC_SetPriorityGrouping>
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	4603      	mov	r3, r0
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004024:	f7ff ff3e 	bl	8003ea4 <__NVIC_GetPriorityGrouping>
 8004028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	6978      	ldr	r0, [r7, #20]
 8004030:	f7ff ff8e 	bl	8003f50 <NVIC_EncodePriority>
 8004034:	4602      	mov	r2, r0
 8004036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff ff5d 	bl	8003efc <__NVIC_SetPriority>
}
 8004042:	bf00      	nop
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	4603      	mov	r3, r0
 8004052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff31 	bl	8003ec0 <__NVIC_EnableIRQ>
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ffa2 	bl	8003fb8 <SysTick_Config>
 8004074:	4603      	mov	r3, r0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e098      	b.n	80041c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	4b4d      	ldr	r3, [pc, #308]	; (80041d0 <HAL_DMA_Init+0x150>)
 800409a:	429a      	cmp	r2, r3
 800409c:	d80f      	bhi.n	80040be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <HAL_DMA_Init+0x154>)
 80040a6:	4413      	add	r3, r2
 80040a8:	4a4b      	ldr	r2, [pc, #300]	; (80041d8 <HAL_DMA_Init+0x158>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	009a      	lsls	r2, r3, #2
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a48      	ldr	r2, [pc, #288]	; (80041dc <HAL_DMA_Init+0x15c>)
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
 80040bc:	e00e      	b.n	80040dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <HAL_DMA_Init+0x160>)
 80040c6:	4413      	add	r3, r2
 80040c8:	4a43      	ldr	r2, [pc, #268]	; (80041d8 <HAL_DMA_Init+0x158>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	009a      	lsls	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a42      	ldr	r2, [pc, #264]	; (80041e4 <HAL_DMA_Init+0x164>)
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004136:	d039      	beq.n	80041ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	4a27      	ldr	r2, [pc, #156]	; (80041dc <HAL_DMA_Init+0x15c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d11a      	bne.n	8004178 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004142:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <HAL_DMA_Init+0x168>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f003 031c 	and.w	r3, r3, #28
 800414e:	210f      	movs	r1, #15
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	4924      	ldr	r1, [pc, #144]	; (80041e8 <HAL_DMA_Init+0x168>)
 8004158:	4013      	ands	r3, r2
 800415a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <HAL_DMA_Init+0x168>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	f003 031c 	and.w	r3, r3, #28
 800416c:	fa01 f303 	lsl.w	r3, r1, r3
 8004170:	491d      	ldr	r1, [pc, #116]	; (80041e8 <HAL_DMA_Init+0x168>)
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
 8004176:	e019      	b.n	80041ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004178:	4b1c      	ldr	r3, [pc, #112]	; (80041ec <HAL_DMA_Init+0x16c>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004180:	f003 031c 	and.w	r3, r3, #28
 8004184:	210f      	movs	r1, #15
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	4917      	ldr	r1, [pc, #92]	; (80041ec <HAL_DMA_Init+0x16c>)
 800418e:	4013      	ands	r3, r2
 8004190:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004192:	4b16      	ldr	r3, [pc, #88]	; (80041ec <HAL_DMA_Init+0x16c>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	f003 031c 	and.w	r3, r3, #28
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	4911      	ldr	r1, [pc, #68]	; (80041ec <HAL_DMA_Init+0x16c>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40020407 	.word	0x40020407
 80041d4:	bffdfff8 	.word	0xbffdfff8
 80041d8:	cccccccd 	.word	0xcccccccd
 80041dc:	40020000 	.word	0x40020000
 80041e0:	bffdfbf8 	.word	0xbffdfbf8
 80041e4:	40020400 	.word	0x40020400
 80041e8:	400200a8 	.word	0x400200a8
 80041ec:	400204a8 	.word	0x400204a8

080041f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_DMA_Start_IT+0x20>
 800420c:	2302      	movs	r3, #2
 800420e:	e04b      	b.n	80042a8 <HAL_DMA_Start_IT+0xb8>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d13a      	bne.n	800429a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f91e 	bl	800448a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 020e 	orr.w	r2, r2, #14
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e00f      	b.n	8004288 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0204 	bic.w	r2, r2, #4
 8004276:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 020a 	orr.w	r2, r2, #10
 8004286:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e005      	b.n	80042a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
 80042a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d008      	beq.n	80042da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2204      	movs	r2, #4
 80042cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e022      	b.n	8004320 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 020e 	bic.w	r2, r2, #14
 80042e8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	f003 021c 	and.w	r2, r3, #28
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2101      	movs	r1, #1
 8004308:	fa01 f202 	lsl.w	r2, r1, r2
 800430c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	f003 031c 	and.w	r3, r3, #28
 800434c:	2204      	movs	r2, #4
 800434e:	409a      	lsls	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d026      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x7a>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d021      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d107      	bne.n	8004380 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0204 	bic.w	r2, r2, #4
 800437e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	f003 021c 	and.w	r2, r3, #28
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	2104      	movs	r1, #4
 800438e:	fa01 f202 	lsl.w	r2, r1, r2
 8004392:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	2b00      	cmp	r3, #0
 800439a:	d071      	beq.n	8004480 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043a4:	e06c      	b.n	8004480 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f003 031c 	and.w	r3, r3, #28
 80043ae:	2202      	movs	r2, #2
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d02e      	beq.n	8004418 <HAL_DMA_IRQHandler+0xec>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d029      	beq.n	8004418 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 020a 	bic.w	r2, r2, #10
 80043e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f003 021c 	and.w	r2, r3, #28
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2102      	movs	r1, #2
 80043f8:	fa01 f202 	lsl.w	r2, r1, r2
 80043fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d038      	beq.n	8004480 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004416:	e033      	b.n	8004480 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	f003 031c 	and.w	r3, r3, #28
 8004420:	2208      	movs	r2, #8
 8004422:	409a      	lsls	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d02a      	beq.n	8004482 <HAL_DMA_IRQHandler+0x156>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d025      	beq.n	8004482 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 020e 	bic.w	r2, r2, #14
 8004444:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f003 021c 	and.w	r2, r3, #28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2101      	movs	r1, #1
 8004454:	fa01 f202 	lsl.w	r2, r1, r2
 8004458:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	2b00      	cmp	r3, #0
 8004476:	d004      	beq.n	8004482 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004480:	bf00      	nop
 8004482:	bf00      	nop
}
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800448a:	b480      	push	{r7}
 800448c:	b085      	sub	sp, #20
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	f003 021c 	and.w	r2, r3, #28
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	2101      	movs	r1, #1
 80044a6:	fa01 f202 	lsl.w	r2, r1, r2
 80044aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d108      	bne.n	80044ce <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044cc:	e007      	b.n	80044de <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	60da      	str	r2, [r3, #12]
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044fa:	e148      	b.n	800478e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	2101      	movs	r1, #1
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	fa01 f303 	lsl.w	r3, r1, r3
 8004508:	4013      	ands	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 813a 	beq.w	8004788 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d005      	beq.n	800452c <HAL_GPIO_Init+0x40>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d130      	bne.n	800458e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	2203      	movs	r2, #3
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004562:	2201      	movs	r2, #1
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	f003 0201 	and.w	r2, r3, #1
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b03      	cmp	r3, #3
 8004598:	d017      	beq.n	80045ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	2203      	movs	r2, #3
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d123      	bne.n	800461e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	08da      	lsrs	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3208      	adds	r2, #8
 80045de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	220f      	movs	r2, #15
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	08da      	lsrs	r2, r3, #3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3208      	adds	r2, #8
 8004618:	6939      	ldr	r1, [r7, #16]
 800461a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	2203      	movs	r2, #3
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 0203 	and.w	r2, r3, #3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8094 	beq.w	8004788 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004660:	4b52      	ldr	r3, [pc, #328]	; (80047ac <HAL_GPIO_Init+0x2c0>)
 8004662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004664:	4a51      	ldr	r2, [pc, #324]	; (80047ac <HAL_GPIO_Init+0x2c0>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6613      	str	r3, [r2, #96]	; 0x60
 800466c:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <HAL_GPIO_Init+0x2c0>)
 800466e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004678:	4a4d      	ldr	r2, [pc, #308]	; (80047b0 <HAL_GPIO_Init+0x2c4>)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	089b      	lsrs	r3, r3, #2
 800467e:	3302      	adds	r3, #2
 8004680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	220f      	movs	r2, #15
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4013      	ands	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046a2:	d00d      	beq.n	80046c0 <HAL_GPIO_Init+0x1d4>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a43      	ldr	r2, [pc, #268]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d007      	beq.n	80046bc <HAL_GPIO_Init+0x1d0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a42      	ldr	r2, [pc, #264]	; (80047b8 <HAL_GPIO_Init+0x2cc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d101      	bne.n	80046b8 <HAL_GPIO_Init+0x1cc>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e004      	b.n	80046c2 <HAL_GPIO_Init+0x1d6>
 80046b8:	2307      	movs	r3, #7
 80046ba:	e002      	b.n	80046c2 <HAL_GPIO_Init+0x1d6>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_GPIO_Init+0x1d6>
 80046c0:	2300      	movs	r3, #0
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	f002 0203 	and.w	r2, r2, #3
 80046c8:	0092      	lsls	r2, r2, #2
 80046ca:	4093      	lsls	r3, r2
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046d2:	4937      	ldr	r1, [pc, #220]	; (80047b0 <HAL_GPIO_Init+0x2c4>)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	3302      	adds	r3, #2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046e0:	4b36      	ldr	r3, [pc, #216]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004704:	4a2d      	ldr	r2, [pc, #180]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800470a:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800472e:	4a23      	ldr	r2, [pc, #140]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004734:	4b21      	ldr	r3, [pc, #132]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	43db      	mvns	r3, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004758:	4a18      	ldr	r2, [pc, #96]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800475e:	4b17      	ldr	r3, [pc, #92]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	43db      	mvns	r3, r3
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4013      	ands	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004782:	4a0e      	ldr	r2, [pc, #56]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	3301      	adds	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	f47f aeaf 	bne.w	80044fc <HAL_GPIO_Init+0x10>
  }
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40010000 	.word	0x40010000
 80047b4:	48000400 	.word	0x48000400
 80047b8:	48000800 	.word	0x48000800
 80047bc:	40010400 	.word	0x40010400

080047c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	887b      	ldrh	r3, [r7, #2]
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
 80047dc:	e001      	b.n	80047e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	807b      	strh	r3, [r7, #2]
 80047fc:	4613      	mov	r3, r2
 80047fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004800:	787b      	ldrb	r3, [r7, #1]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004806:	887a      	ldrh	r2, [r7, #2]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800480c:	e002      	b.n	8004814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800480e:	887a      	ldrh	r2, [r7, #2]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e08d      	b.n	800494e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc ffe8 	bl	800181c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2224      	movs	r2, #36	; 0x24
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004870:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004880:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d107      	bne.n	800489a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	e006      	b.n	80048a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d108      	bne.n	80048c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	e007      	b.n	80048d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69d9      	ldr	r1, [r3, #28]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1a      	ldr	r2, [r3, #32]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	461a      	mov	r2, r3
 8004964:	460b      	mov	r3, r1
 8004966:	817b      	strh	r3, [r7, #10]
 8004968:	4613      	mov	r3, r2
 800496a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b20      	cmp	r3, #32
 8004976:	f040 80fd 	bne.w	8004b74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_I2C_Master_Transmit+0x30>
 8004984:	2302      	movs	r3, #2
 8004986:	e0f6      	b.n	8004b76 <HAL_I2C_Master_Transmit+0x21e>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004990:	f7fd fdc8 	bl	8002524 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2319      	movs	r3, #25
 800499c:	2201      	movs	r2, #1
 800499e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f920 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e0e1      	b.n	8004b76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2221      	movs	r2, #33	; 0x21
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2210      	movs	r2, #16
 80049be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	893a      	ldrh	r2, [r7, #8]
 80049d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2bff      	cmp	r3, #255	; 0xff
 80049e2:	d906      	bls.n	80049f2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	22ff      	movs	r2, #255	; 0xff
 80049e8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80049ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	e007      	b.n	8004a02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80049fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d024      	beq.n	8004a54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	781a      	ldrb	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	8979      	ldrh	r1, [r7, #10]
 8004a46:	4b4e      	ldr	r3, [pc, #312]	; (8004b80 <HAL_I2C_Master_Transmit+0x228>)
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fa8f 	bl	8004f70 <I2C_TransferConfig>
 8004a52:	e066      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	8979      	ldrh	r1, [r7, #10]
 8004a5c:	4b48      	ldr	r3, [pc, #288]	; (8004b80 <HAL_I2C_Master_Transmit+0x228>)
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fa84 	bl	8004f70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a68:	e05b      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	6a39      	ldr	r1, [r7, #32]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f913 	bl	8004c9a <I2C_WaitOnTXISFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e07b      	b.n	8004b76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d034      	beq.n	8004b22 <HAL_I2C_Master_Transmit+0x1ca>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d130      	bne.n	8004b22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2180      	movs	r1, #128	; 0x80
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f88c 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e04d      	b.n	8004b76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2bff      	cmp	r3, #255	; 0xff
 8004ae2:	d90e      	bls.n	8004b02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	22ff      	movs	r2, #255	; 0xff
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	8979      	ldrh	r1, [r7, #10]
 8004af2:	2300      	movs	r3, #0
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fa38 	bl	8004f70 <I2C_TransferConfig>
 8004b00:	e00f      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	8979      	ldrh	r1, [r7, #10]
 8004b14:	2300      	movs	r3, #0
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fa27 	bl	8004f70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d19e      	bne.n	8004a6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	6a39      	ldr	r1, [r7, #32]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f8f9 	bl	8004d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e01a      	b.n	8004b76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2220      	movs	r2, #32
 8004b46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <HAL_I2C_Master_Transmit+0x22c>)
 8004b54:	400b      	ands	r3, r1
 8004b56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	e000      	b.n	8004b76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004b74:	2302      	movs	r3, #2
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	80002000 	.word	0x80002000
 8004b84:	fe00e800 	.word	0xfe00e800

08004b88 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d103      	bne.n	8004bbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d007      	beq.n	8004bdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	619a      	str	r2, [r3, #24]
  }
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf8:	e03b      	b.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	6839      	ldr	r1, [r7, #0]
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f8d6 	bl	8004db0 <I2C_IsErrorOccurred>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e041      	b.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d02d      	beq.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c16:	f7fd fc85 	bl	8002524 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d302      	bcc.n	8004c2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d122      	bne.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d113      	bne.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	f043 0220 	orr.w	r2, r3, #32
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e00f      	b.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699a      	ldr	r2, [r3, #24]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d0b4      	beq.n	8004bfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ca6:	e033      	b.n	8004d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f87f 	bl	8004db0 <I2C_IsErrorOccurred>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e031      	b.n	8004d20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d025      	beq.n	8004d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc4:	f7fd fc2e 	bl	8002524 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d302      	bcc.n	8004cda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d11a      	bne.n	8004d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d013      	beq.n	8004d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e007      	b.n	8004d20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d1c4      	bne.n	8004ca8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d34:	e02f      	b.n	8004d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f838 	bl	8004db0 <I2C_IsErrorOccurred>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e02d      	b.n	8004da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4a:	f7fd fbeb 	bl	8002524 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d11a      	bne.n	8004d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d013      	beq.n	8004d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e007      	b.n	8004da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d1c8      	bne.n	8004d36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08a      	sub	sp, #40	; 0x28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d068      	beq.n	8004eae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2210      	movs	r2, #16
 8004de2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004de4:	e049      	b.n	8004e7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d045      	beq.n	8004e7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fd fb99 	bl	8002524 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <I2C_IsErrorOccurred+0x54>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d13a      	bne.n	8004e7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e26:	d121      	bne.n	8004e6c <I2C_IsErrorOccurred+0xbc>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e2e:	d01d      	beq.n	8004e6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d01a      	beq.n	8004e6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e46:	f7fd fb6d 	bl	8002524 <HAL_GetTick>
 8004e4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e4c:	e00e      	b.n	8004e6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e4e:	f7fd fb69 	bl	8002524 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b19      	cmp	r3, #25
 8004e5a:	d907      	bls.n	8004e6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	f043 0320 	orr.w	r3, r3, #32
 8004e62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004e6a:	e006      	b.n	8004e7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d1e9      	bne.n	8004e4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d003      	beq.n	8004e90 <I2C_IsErrorOccurred+0xe0>
 8004e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0aa      	beq.n	8004de6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	f043 0304 	orr.w	r3, r3, #4
 8004ea6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ed0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	f043 0308 	orr.w	r3, r3, #8
 8004ee8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ef2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00b      	beq.n	8004f1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	f043 0302 	orr.w	r3, r3, #2
 8004f0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01c      	beq.n	8004f5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff fe3b 	bl	8004ba0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6859      	ldr	r1, [r3, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <I2C_IsErrorOccurred+0x1bc>)
 8004f36:	400b      	ands	r3, r1
 8004f38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3728      	adds	r7, #40	; 0x28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	fe00e800 	.word	0xfe00e800

08004f70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	607b      	str	r3, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	817b      	strh	r3, [r7, #10]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f82:	897b      	ldrh	r3, [r7, #10]
 8004f84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f88:	7a7b      	ldrb	r3, [r7, #9]
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	0d5b      	lsrs	r3, r3, #21
 8004faa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fae:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <I2C_TransferConfig+0x60>)
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	ea02 0103 	and.w	r1, r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	03ff63ff 	.word	0x03ff63ff

08004fd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d138      	bne.n	800505c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e032      	b.n	800505e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	; 0x24
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0201 	bic.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005026:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6819      	ldr	r1, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	e000      	b.n	800505e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800505c:	2302      	movs	r3, #2
  }
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b20      	cmp	r3, #32
 800507e:	d139      	bne.n	80050f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800508a:	2302      	movs	r3, #2
 800508c:	e033      	b.n	80050f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2224      	movs	r2, #36	; 0x24
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050f4:	2302      	movs	r3, #2
  }
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005108:	4b04      	ldr	r3, [pc, #16]	; (800511c <HAL_PWREx_GetVoltageRange+0x18>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005110:	4618      	mov	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40007000 	.word	0x40007000

08005120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800512e:	d130      	bne.n	8005192 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005130:	4b23      	ldr	r3, [pc, #140]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800513c:	d038      	beq.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800513e:	4b20      	ldr	r3, [pc, #128]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005146:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800514c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800514e:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2232      	movs	r2, #50	; 0x32
 8005154:	fb02 f303 	mul.w	r3, r2, r3
 8005158:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0c9b      	lsrs	r3, r3, #18
 8005160:	3301      	adds	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005164:	e002      	b.n	800516c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b01      	subs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800516c:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005178:	d102      	bne.n	8005180 <HAL_PWREx_ControlVoltageScaling+0x60>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f2      	bne.n	8005166 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005180:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518c:	d110      	bne.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e00f      	b.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519e:	d007      	beq.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051a8:	4a05      	ldr	r2, [pc, #20]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40007000 	.word	0x40007000
 80051c4:	20000000 	.word	0x20000000
 80051c8:	431bde83 	.word	0x431bde83

080051cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	f000 bc02 	b.w	80059e4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e0:	4b96      	ldr	r3, [pc, #600]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 030c 	and.w	r3, r3, #12
 80051e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ea:	4b94      	ldr	r3, [pc, #592]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80e4 	beq.w	80053ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <HAL_RCC_OscConfig+0x4c>
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b0c      	cmp	r3, #12
 800520c:	f040 808b 	bne.w	8005326 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b01      	cmp	r3, #1
 8005214:	f040 8087 	bne.w	8005326 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005218:	4b88      	ldr	r3, [pc, #544]	; (800543c <HAL_RCC_OscConfig+0x270>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_RCC_OscConfig+0x64>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e3d9      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1a      	ldr	r2, [r3, #32]
 8005234:	4b81      	ldr	r3, [pc, #516]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <HAL_RCC_OscConfig+0x7e>
 8005240:	4b7e      	ldr	r3, [pc, #504]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005248:	e005      	b.n	8005256 <HAL_RCC_OscConfig+0x8a>
 800524a:	4b7c      	ldr	r3, [pc, #496]	; (800543c <HAL_RCC_OscConfig+0x270>)
 800524c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005256:	4293      	cmp	r3, r2
 8005258:	d223      	bcs.n	80052a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fd8c 	bl	8005d7c <RCC_SetFlashLatencyFromMSIRange>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e3ba      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800526e:	4b73      	ldr	r3, [pc, #460]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a72      	ldr	r2, [pc, #456]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005274:	f043 0308 	orr.w	r3, r3, #8
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4b70      	ldr	r3, [pc, #448]	; (800543c <HAL_RCC_OscConfig+0x270>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	496d      	ldr	r1, [pc, #436]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800528c:	4b6b      	ldr	r3, [pc, #428]	; (800543c <HAL_RCC_OscConfig+0x270>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	4968      	ldr	r1, [pc, #416]	; (800543c <HAL_RCC_OscConfig+0x270>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
 80052a0:	e025      	b.n	80052ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052a2:	4b66      	ldr	r3, [pc, #408]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a65      	ldr	r2, [pc, #404]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80052a8:	f043 0308 	orr.w	r3, r3, #8
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4b63      	ldr	r3, [pc, #396]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	4960      	ldr	r1, [pc, #384]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052c0:	4b5e      	ldr	r3, [pc, #376]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	495b      	ldr	r1, [pc, #364]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fd4c 	bl	8005d7c <RCC_SetFlashLatencyFromMSIRange>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e37a      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052ee:	f000 fc81 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 80052f2:	4602      	mov	r2, r0
 80052f4:	4b51      	ldr	r3, [pc, #324]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	091b      	lsrs	r3, r3, #4
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	4950      	ldr	r1, [pc, #320]	; (8005440 <HAL_RCC_OscConfig+0x274>)
 8005300:	5ccb      	ldrb	r3, [r1, r3]
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	fa22 f303 	lsr.w	r3, r2, r3
 800530a:	4a4e      	ldr	r2, [pc, #312]	; (8005444 <HAL_RCC_OscConfig+0x278>)
 800530c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800530e:	4b4e      	ldr	r3, [pc, #312]	; (8005448 <HAL_RCC_OscConfig+0x27c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fd f8b6 	bl	8002484 <HAL_InitTick>
 8005318:	4603      	mov	r3, r0
 800531a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d052      	beq.n	80053c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	e35e      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d032      	beq.n	8005394 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800532e:	4b43      	ldr	r3, [pc, #268]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a42      	ldr	r2, [pc, #264]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005334:	f043 0301 	orr.w	r3, r3, #1
 8005338:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800533a:	f7fd f8f3 	bl	8002524 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005342:	f7fd f8ef 	bl	8002524 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e347      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005354:	4b39      	ldr	r3, [pc, #228]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005360:	4b36      	ldr	r3, [pc, #216]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a35      	ldr	r2, [pc, #212]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005366:	f043 0308 	orr.w	r3, r3, #8
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b33      	ldr	r3, [pc, #204]	; (800543c <HAL_RCC_OscConfig+0x270>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	4930      	ldr	r1, [pc, #192]	; (800543c <HAL_RCC_OscConfig+0x270>)
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800537e:	4b2f      	ldr	r3, [pc, #188]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	492b      	ldr	r1, [pc, #172]	; (800543c <HAL_RCC_OscConfig+0x270>)
 800538e:	4313      	orrs	r3, r2
 8005390:	604b      	str	r3, [r1, #4]
 8005392:	e01a      	b.n	80053ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005394:	4b29      	ldr	r3, [pc, #164]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a28      	ldr	r2, [pc, #160]	; (800543c <HAL_RCC_OscConfig+0x270>)
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053a0:	f7fd f8c0 	bl	8002524 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053a8:	f7fd f8bc 	bl	8002524 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e314      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053ba:	4b20      	ldr	r3, [pc, #128]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x1dc>
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d073      	beq.n	80054be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_OscConfig+0x21c>
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b0c      	cmp	r3, #12
 80053e0:	d10e      	bne.n	8005400 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d10b      	bne.n	8005400 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e8:	4b14      	ldr	r3, [pc, #80]	; (800543c <HAL_RCC_OscConfig+0x270>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d063      	beq.n	80054bc <HAL_RCC_OscConfig+0x2f0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d15f      	bne.n	80054bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e2f1      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d106      	bne.n	8005418 <HAL_RCC_OscConfig+0x24c>
 800540a:	4b0c      	ldr	r3, [pc, #48]	; (800543c <HAL_RCC_OscConfig+0x270>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a0b      	ldr	r2, [pc, #44]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e025      	b.n	8005464 <HAL_RCC_OscConfig+0x298>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005420:	d114      	bne.n	800544c <HAL_RCC_OscConfig+0x280>
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a05      	ldr	r2, [pc, #20]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b03      	ldr	r3, [pc, #12]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a02      	ldr	r2, [pc, #8]	; (800543c <HAL_RCC_OscConfig+0x270>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e013      	b.n	8005464 <HAL_RCC_OscConfig+0x298>
 800543c:	40021000 	.word	0x40021000
 8005440:	0800c6b8 	.word	0x0800c6b8
 8005444:	20000000 	.word	0x20000000
 8005448:	20000004 	.word	0x20000004
 800544c:	4ba0      	ldr	r3, [pc, #640]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a9f      	ldr	r2, [pc, #636]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	4b9d      	ldr	r3, [pc, #628]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a9c      	ldr	r2, [pc, #624]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 800545e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d013      	beq.n	8005494 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fd f85a 	bl	8002524 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005474:	f7fd f856 	bl	8002524 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	; 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e2ae      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005486:	4b92      	ldr	r3, [pc, #584]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0x2a8>
 8005492:	e014      	b.n	80054be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7fd f846 	bl	8002524 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800549c:	f7fd f842 	bl	8002524 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b64      	cmp	r3, #100	; 0x64
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e29a      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ae:	4b88      	ldr	r3, [pc, #544]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x2d0>
 80054ba:	e000      	b.n	80054be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d060      	beq.n	800558c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_OscConfig+0x310>
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b0c      	cmp	r3, #12
 80054d4:	d119      	bne.n	800550a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d116      	bne.n	800550a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054dc:	4b7c      	ldr	r3, [pc, #496]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_OscConfig+0x328>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e277      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f4:	4b76      	ldr	r3, [pc, #472]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	061b      	lsls	r3, r3, #24
 8005502:	4973      	ldr	r1, [pc, #460]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005504:	4313      	orrs	r3, r2
 8005506:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005508:	e040      	b.n	800558c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d023      	beq.n	800555a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005512:	4b6f      	ldr	r3, [pc, #444]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a6e      	ldr	r2, [pc, #440]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551e:	f7fd f801 	bl	8002524 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005526:	f7fc fffd 	bl	8002524 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e255      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005538:	4b65      	ldr	r3, [pc, #404]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005544:	4b62      	ldr	r3, [pc, #392]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	495f      	ldr	r1, [pc, #380]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005554:	4313      	orrs	r3, r2
 8005556:	604b      	str	r3, [r1, #4]
 8005558:	e018      	b.n	800558c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800555a:	4b5d      	ldr	r3, [pc, #372]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a5c      	ldr	r2, [pc, #368]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fc ffdd 	bl	8002524 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556e:	f7fc ffd9 	bl	8002524 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e231      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005580:	4b53      	ldr	r3, [pc, #332]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1f0      	bne.n	800556e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d03c      	beq.n	8005612 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01c      	beq.n	80055da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055a0:	4b4b      	ldr	r3, [pc, #300]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a6:	4a4a      	ldr	r2, [pc, #296]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b0:	f7fc ffb8 	bl	8002524 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b8:	f7fc ffb4 	bl	8002524 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e20c      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055ca:	4b41      	ldr	r3, [pc, #260]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80055cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0ef      	beq.n	80055b8 <HAL_RCC_OscConfig+0x3ec>
 80055d8:	e01b      	b.n	8005612 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055da:	4b3d      	ldr	r3, [pc, #244]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80055dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e0:	4a3b      	ldr	r2, [pc, #236]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80055e2:	f023 0301 	bic.w	r3, r3, #1
 80055e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ea:	f7fc ff9b 	bl	8002524 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f2:	f7fc ff97 	bl	8002524 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e1ef      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005604:	4b32      	ldr	r3, [pc, #200]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1ef      	bne.n	80055f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 80a6 	beq.w	800576c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005620:	2300      	movs	r3, #0
 8005622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005624:	4b2a      	ldr	r3, [pc, #168]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10d      	bne.n	800564c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005630:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	4a26      	ldr	r2, [pc, #152]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563a:	6593      	str	r3, [r2, #88]	; 0x58
 800563c:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005648:	2301      	movs	r3, #1
 800564a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800564c:	4b21      	ldr	r3, [pc, #132]	; (80056d4 <HAL_RCC_OscConfig+0x508>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d118      	bne.n	800568a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005658:	4b1e      	ldr	r3, [pc, #120]	; (80056d4 <HAL_RCC_OscConfig+0x508>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <HAL_RCC_OscConfig+0x508>)
 800565e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005664:	f7fc ff5e 	bl	8002524 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566c:	f7fc ff5a 	bl	8002524 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e1b2      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <HAL_RCC_OscConfig+0x508>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d108      	bne.n	80056a4 <HAL_RCC_OscConfig+0x4d8>
 8005692:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 8005694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005698:	4a0d      	ldr	r2, [pc, #52]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056a2:	e029      	b.n	80056f8 <HAL_RCC_OscConfig+0x52c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b05      	cmp	r3, #5
 80056aa:	d115      	bne.n	80056d8 <HAL_RCC_OscConfig+0x50c>
 80056ac:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	4a07      	ldr	r2, [pc, #28]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80056b4:	f043 0304 	orr.w	r3, r3, #4
 80056b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	4a03      	ldr	r2, [pc, #12]	; (80056d0 <HAL_RCC_OscConfig+0x504>)
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056cc:	e014      	b.n	80056f8 <HAL_RCC_OscConfig+0x52c>
 80056ce:	bf00      	nop
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40007000 	.word	0x40007000
 80056d8:	4b9a      	ldr	r3, [pc, #616]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	4a99      	ldr	r2, [pc, #612]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056e8:	4b96      	ldr	r3, [pc, #600]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	4a95      	ldr	r2, [pc, #596]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80056f0:	f023 0304 	bic.w	r3, r3, #4
 80056f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d016      	beq.n	800572e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005700:	f7fc ff10 	bl	8002524 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005706:	e00a      	b.n	800571e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005708:	f7fc ff0c 	bl	8002524 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	; 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e162      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800571e:	4b89      	ldr	r3, [pc, #548]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0ed      	beq.n	8005708 <HAL_RCC_OscConfig+0x53c>
 800572c:	e015      	b.n	800575a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572e:	f7fc fef9 	bl	8002524 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005734:	e00a      	b.n	800574c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fc fef5 	bl	8002524 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f241 3288 	movw	r2, #5000	; 0x1388
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e14b      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800574c:	4b7d      	ldr	r3, [pc, #500]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ed      	bne.n	8005736 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800575a:	7ffb      	ldrb	r3, [r7, #31]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d105      	bne.n	800576c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005760:	4b78      	ldr	r3, [pc, #480]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005764:	4a77      	ldr	r2, [pc, #476]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d03c      	beq.n	80057f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01c      	beq.n	80057ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005780:	4b70      	ldr	r3, [pc, #448]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005786:	4a6f      	ldr	r2, [pc, #444]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005790:	f7fc fec8 	bl	8002524 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005798:	f7fc fec4 	bl	8002524 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e11c      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057aa:	4b66      	ldr	r3, [pc, #408]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80057ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ef      	beq.n	8005798 <HAL_RCC_OscConfig+0x5cc>
 80057b8:	e01b      	b.n	80057f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057ba:	4b62      	ldr	r3, [pc, #392]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80057bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057c0:	4a60      	ldr	r2, [pc, #384]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ca:	f7fc feab 	bl	8002524 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057d2:	f7fc fea7 	bl	8002524 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e0ff      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057e4:	4b57      	ldr	r3, [pc, #348]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80057e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1ef      	bne.n	80057d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80f3 	beq.w	80059e2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	2b02      	cmp	r3, #2
 8005802:	f040 80c9 	bne.w	8005998 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005806:	4b4f      	ldr	r3, [pc, #316]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f003 0203 	and.w	r2, r3, #3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	429a      	cmp	r2, r3
 8005818:	d12c      	bne.n	8005874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	3b01      	subs	r3, #1
 8005826:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d123      	bne.n	8005874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005836:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d11b      	bne.n	8005874 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d113      	bne.n	8005874 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	3b01      	subs	r3, #1
 800585a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800585c:	429a      	cmp	r2, r3
 800585e:	d109      	bne.n	8005874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	3b01      	subs	r3, #1
 800586e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d06b      	beq.n	800594c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b0c      	cmp	r3, #12
 8005878:	d062      	beq.n	8005940 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800587a:	4b32      	ldr	r3, [pc, #200]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e0ac      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800588a:	4b2e      	ldr	r3, [pc, #184]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2d      	ldr	r2, [pc, #180]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005894:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005896:	f7fc fe45 	bl	8002524 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800589e:	f7fc fe41 	bl	8002524 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e099      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b0:	4b24      	ldr	r3, [pc, #144]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f0      	bne.n	800589e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058bc:	4b21      	ldr	r3, [pc, #132]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	4b21      	ldr	r3, [pc, #132]	; (8005948 <HAL_RCC_OscConfig+0x77c>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058cc:	3a01      	subs	r2, #1
 80058ce:	0112      	lsls	r2, r2, #4
 80058d0:	4311      	orrs	r1, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058d6:	0212      	lsls	r2, r2, #8
 80058d8:	4311      	orrs	r1, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058de:	0852      	lsrs	r2, r2, #1
 80058e0:	3a01      	subs	r2, #1
 80058e2:	0552      	lsls	r2, r2, #21
 80058e4:	4311      	orrs	r1, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058ea:	0852      	lsrs	r2, r2, #1
 80058ec:	3a01      	subs	r2, #1
 80058ee:	0652      	lsls	r2, r2, #25
 80058f0:	4311      	orrs	r1, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058f6:	06d2      	lsls	r2, r2, #27
 80058f8:	430a      	orrs	r2, r1
 80058fa:	4912      	ldr	r1, [pc, #72]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a0f      	ldr	r2, [pc, #60]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800590a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800590c:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005918:	f7fc fe04 	bl	8002524 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005920:	f7fc fe00 	bl	8002524 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e058      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005932:	4b04      	ldr	r3, [pc, #16]	; (8005944 <HAL_RCC_OscConfig+0x778>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800593e:	e050      	b.n	80059e2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e04f      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
 8005944:	40021000 	.word	0x40021000
 8005948:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800594c:	4b27      	ldr	r3, [pc, #156]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d144      	bne.n	80059e2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005958:	4b24      	ldr	r3, [pc, #144]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a23      	ldr	r2, [pc, #140]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 800595e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005962:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005964:	4b21      	ldr	r3, [pc, #132]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	4a20      	ldr	r2, [pc, #128]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 800596a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800596e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005970:	f7fc fdd8 	bl	8002524 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005978:	f7fc fdd4 	bl	8002524 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e02c      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800598a:	4b18      	ldr	r3, [pc, #96]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0x7ac>
 8005996:	e024      	b.n	80059e2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b0c      	cmp	r3, #12
 800599c:	d01f      	beq.n	80059de <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a12      	ldr	r2, [pc, #72]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 80059a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059aa:	f7fc fdbb 	bl	8002524 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b2:	f7fc fdb7 	bl	8002524 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e00f      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059c4:	4b09      	ldr	r3, [pc, #36]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f0      	bne.n	80059b2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80059d0:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	4905      	ldr	r1, [pc, #20]	; (80059ec <HAL_RCC_OscConfig+0x820>)
 80059d6:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <HAL_RCC_OscConfig+0x824>)
 80059d8:	4013      	ands	r3, r2
 80059da:	60cb      	str	r3, [r1, #12]
 80059dc:	e001      	b.n	80059e2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40021000 	.word	0x40021000
 80059f0:	feeefffc 	.word	0xfeeefffc

080059f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0e7      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a08:	4b75      	ldr	r3, [pc, #468]	; (8005be0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d910      	bls.n	8005a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a16:	4b72      	ldr	r3, [pc, #456]	; (8005be0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f023 0207 	bic.w	r2, r3, #7
 8005a1e:	4970      	ldr	r1, [pc, #448]	; (8005be0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a26:	4b6e      	ldr	r3, [pc, #440]	; (8005be0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d001      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0cf      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d010      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	4b66      	ldr	r3, [pc, #408]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d908      	bls.n	8005a66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a54:	4b63      	ldr	r3, [pc, #396]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4960      	ldr	r1, [pc, #384]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d04c      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d107      	bne.n	8005a8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a7a:	4b5a      	ldr	r3, [pc, #360]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d121      	bne.n	8005aca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e0a6      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a92:	4b54      	ldr	r3, [pc, #336]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d115      	bne.n	8005aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e09a      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d107      	bne.n	8005aba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005aaa:	4b4e      	ldr	r3, [pc, #312]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e08e      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aba:	4b4a      	ldr	r3, [pc, #296]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e086      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aca:	4b46      	ldr	r3, [pc, #280]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f023 0203 	bic.w	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	4943      	ldr	r1, [pc, #268]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005adc:	f7fc fd22 	bl	8002524 <HAL_GetTick>
 8005ae0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae2:	e00a      	b.n	8005afa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae4:	f7fc fd1e 	bl	8002524 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e06e      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afa:	4b3a      	ldr	r3, [pc, #232]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 020c 	and.w	r2, r3, #12
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d1eb      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d010      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	4b31      	ldr	r3, [pc, #196]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d208      	bcs.n	8005b3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b28:	4b2e      	ldr	r3, [pc, #184]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	492b      	ldr	r1, [pc, #172]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b3a:	4b29      	ldr	r3, [pc, #164]	; (8005be0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d210      	bcs.n	8005b6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b48:	4b25      	ldr	r3, [pc, #148]	; (8005be0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f023 0207 	bic.w	r2, r3, #7
 8005b50:	4923      	ldr	r1, [pc, #140]	; (8005be0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b58:	4b21      	ldr	r3, [pc, #132]	; (8005be0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d001      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e036      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b76:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4918      	ldr	r1, [pc, #96]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b94:	4b13      	ldr	r3, [pc, #76]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	4910      	ldr	r1, [pc, #64]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ba8:	f000 f824 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <HAL_RCC_ClockConfig+0x1f0>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	490b      	ldr	r1, [pc, #44]	; (8005be8 <HAL_RCC_ClockConfig+0x1f4>)
 8005bba:	5ccb      	ldrb	r3, [r1, r3]
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc4:	4a09      	ldr	r2, [pc, #36]	; (8005bec <HAL_RCC_ClockConfig+0x1f8>)
 8005bc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <HAL_RCC_ClockConfig+0x1fc>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fc fc59 	bl	8002484 <HAL_InitTick>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8005bd6:	7afb      	ldrb	r3, [r7, #11]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40022000 	.word	0x40022000
 8005be4:	40021000 	.word	0x40021000
 8005be8:	0800c6b8 	.word	0x0800c6b8
 8005bec:	20000000 	.word	0x20000000
 8005bf0:	20000004 	.word	0x20000004

08005bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	; 0x24
 8005bf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c02:	4b3e      	ldr	r3, [pc, #248]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 030c 	and.w	r3, r3, #12
 8005c0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c0c:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x34>
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b0c      	cmp	r3, #12
 8005c20:	d121      	bne.n	8005c66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d11e      	bne.n	8005c66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c28:	4b34      	ldr	r3, [pc, #208]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d107      	bne.n	8005c44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c34:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3a:	0a1b      	lsrs	r3, r3, #8
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	e005      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c44:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	091b      	lsrs	r3, r3, #4
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c50:	4a2b      	ldr	r2, [pc, #172]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10d      	bne.n	8005c7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c64:	e00a      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d102      	bne.n	8005c72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c6c:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	e004      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c78:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b0c      	cmp	r3, #12
 8005c80:	d134      	bne.n	8005cec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c82:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d003      	beq.n	8005c9a <HAL_RCC_GetSysClockFreq+0xa6>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d003      	beq.n	8005ca0 <HAL_RCC_GetSysClockFreq+0xac>
 8005c98:	e005      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c9a:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c9c:	617b      	str	r3, [r7, #20]
      break;
 8005c9e:	e005      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ca0:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ca2:	617b      	str	r3, [r7, #20]
      break;
 8005ca4:	e002      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	617b      	str	r3, [r7, #20]
      break;
 8005caa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cba:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	fb03 f202 	mul.w	r2, r3, r2
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cd2:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	0e5b      	lsrs	r3, r3, #25
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	3301      	adds	r3, #1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005cec:	69bb      	ldr	r3, [r7, #24]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3724      	adds	r7, #36	; 0x24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	0800c6d0 	.word	0x0800c6d0
 8005d04:	00f42400 	.word	0x00f42400
 8005d08:	00b71b00 	.word	0x00b71b00

08005d0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d10:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d12:	681b      	ldr	r3, [r3, #0]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000000 	.word	0x20000000

08005d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d28:	f7ff fff0 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	4904      	ldr	r1, [pc, #16]	; (8005d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d3a:	5ccb      	ldrb	r3, [r1, r3]
 8005d3c:	f003 031f 	and.w	r3, r3, #31
 8005d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	0800c6c8 	.word	0x0800c6c8

08005d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d54:	f7ff ffda 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	0adb      	lsrs	r3, r3, #11
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	4904      	ldr	r1, [pc, #16]	; (8005d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d66:	5ccb      	ldrb	r3, [r1, r3]
 8005d68:	f003 031f 	and.w	r3, r3, #31
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40021000 	.word	0x40021000
 8005d78:	0800c6c8 	.word	0x0800c6c8

08005d7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d84:	2300      	movs	r3, #0
 8005d86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d88:	4b2a      	ldr	r3, [pc, #168]	; (8005e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d94:	f7ff f9b6 	bl	8005104 <HAL_PWREx_GetVoltageRange>
 8005d98:	6178      	str	r0, [r7, #20]
 8005d9a:	e014      	b.n	8005dc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d9c:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	4a24      	ldr	r2, [pc, #144]	; (8005e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da6:	6593      	str	r3, [r2, #88]	; 0x58
 8005da8:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005db4:	f7ff f9a6 	bl	8005104 <HAL_PWREx_GetVoltageRange>
 8005db8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005dba:	4b1e      	ldr	r3, [pc, #120]	; (8005e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dcc:	d10b      	bne.n	8005de6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b80      	cmp	r3, #128	; 0x80
 8005dd2:	d919      	bls.n	8005e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2ba0      	cmp	r3, #160	; 0xa0
 8005dd8:	d902      	bls.n	8005de0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dda:	2302      	movs	r3, #2
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	e013      	b.n	8005e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005de0:	2301      	movs	r3, #1
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	e010      	b.n	8005e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b80      	cmp	r3, #128	; 0x80
 8005dea:	d902      	bls.n	8005df2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005dec:	2303      	movs	r3, #3
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	e00a      	b.n	8005e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b80      	cmp	r3, #128	; 0x80
 8005df6:	d102      	bne.n	8005dfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005df8:	2302      	movs	r3, #2
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	e004      	b.n	8005e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b70      	cmp	r3, #112	; 0x70
 8005e02:	d101      	bne.n	8005e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e04:	2301      	movs	r3, #1
 8005e06:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e08:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f023 0207 	bic.w	r2, r3, #7
 8005e10:	4909      	ldr	r1, [pc, #36]	; (8005e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e18:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d001      	beq.n	8005e2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40021000 	.word	0x40021000
 8005e38:	40022000 	.word	0x40022000

08005e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e44:	2300      	movs	r3, #0
 8005e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e48:	2300      	movs	r3, #0
 8005e4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d031      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e60:	d01a      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005e62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e66:	d814      	bhi.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e70:	d10f      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005e72:	4b5d      	ldr	r3, [pc, #372]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	4a5c      	ldr	r2, [pc, #368]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e7e:	e00c      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f9ce 	bl	8006228 <RCCEx_PLLSAI1_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e90:	e003      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	74fb      	strb	r3, [r7, #19]
      break;
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e9a:	7cfb      	ldrb	r3, [r7, #19]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ea0:	4b51      	ldr	r3, [pc, #324]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	494e      	ldr	r1, [pc, #312]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005eb6:	e001      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	7cfb      	ldrb	r3, [r7, #19]
 8005eba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 809e 	beq.w	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ece:	4b46      	ldr	r3, [pc, #280]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ee4:	4b40      	ldr	r3, [pc, #256]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee8:	4a3f      	ldr	r2, [pc, #252]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eee:	6593      	str	r3, [r2, #88]	; 0x58
 8005ef0:	4b3d      	ldr	r3, [pc, #244]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005efc:	2301      	movs	r3, #1
 8005efe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f00:	4b3a      	ldr	r3, [pc, #232]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a39      	ldr	r2, [pc, #228]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f0c:	f7fc fb0a 	bl	8002524 <HAL_GetTick>
 8005f10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f12:	e009      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f14:	f7fc fb06 	bl	8002524 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d902      	bls.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	74fb      	strb	r3, [r7, #19]
        break;
 8005f26:	e005      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f28:	4b30      	ldr	r3, [pc, #192]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0ef      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d15a      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f3a:	4b2b      	ldr	r3, [pc, #172]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01e      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d019      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f56:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f62:	4b21      	ldr	r3, [pc, #132]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f68:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f72:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f82:	4a19      	ldr	r2, [pc, #100]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d016      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fc fac6 	bl	8002524 <HAL_GetTick>
 8005f98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9c:	f7fc fac2 	bl	8002524 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d902      	bls.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	74fb      	strb	r3, [r7, #19]
            break;
 8005fb2:	e006      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0ec      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005fc2:	7cfb      	ldrb	r3, [r7, #19]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fc8:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd6:	4904      	ldr	r1, [pc, #16]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fde:	e009      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fe0:	7cfb      	ldrb	r3, [r7, #19]
 8005fe2:	74bb      	strb	r3, [r7, #18]
 8005fe4:	e006      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005fe6:	bf00      	nop
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ff4:	7c7b      	ldrb	r3, [r7, #17]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d105      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffa:	4b8a      	ldr	r3, [pc, #552]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	4a89      	ldr	r2, [pc, #548]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006012:	4b84      	ldr	r3, [pc, #528]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	f023 0203 	bic.w	r2, r3, #3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	4980      	ldr	r1, [pc, #512]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006034:	4b7b      	ldr	r3, [pc, #492]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f023 020c 	bic.w	r2, r3, #12
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	4978      	ldr	r1, [pc, #480]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006056:	4b73      	ldr	r3, [pc, #460]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006064:	496f      	ldr	r1, [pc, #444]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006078:	4b6a      	ldr	r3, [pc, #424]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	4967      	ldr	r1, [pc, #412]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800609a:	4b62      	ldr	r3, [pc, #392]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	495e      	ldr	r1, [pc, #376]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060bc:	4b59      	ldr	r3, [pc, #356]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ca:	4956      	ldr	r1, [pc, #344]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060de:	4b51      	ldr	r3, [pc, #324]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	494d      	ldr	r1, [pc, #308]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d028      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006100:	4b48      	ldr	r3, [pc, #288]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006106:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	4945      	ldr	r1, [pc, #276]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006110:	4313      	orrs	r3, r2
 8006112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800611e:	d106      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006120:	4b40      	ldr	r3, [pc, #256]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	4a3f      	ldr	r2, [pc, #252]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800612a:	60d3      	str	r3, [r2, #12]
 800612c:	e011      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006136:	d10c      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	2101      	movs	r1, #1
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f872 	bl	8006228 <RCCEx_PLLSAI1_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006148:	7cfb      	ldrb	r3, [r7, #19]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800614e:	7cfb      	ldrb	r3, [r7, #19]
 8006150:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d028      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800615e:	4b31      	ldr	r3, [pc, #196]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006164:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616c:	492d      	ldr	r1, [pc, #180]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800617c:	d106      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800617e:	4b29      	ldr	r3, [pc, #164]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	4a28      	ldr	r2, [pc, #160]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006188:	60d3      	str	r3, [r2, #12]
 800618a:	e011      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006190:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006194:	d10c      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3304      	adds	r3, #4
 800619a:	2101      	movs	r1, #1
 800619c:	4618      	mov	r0, r3
 800619e:	f000 f843 	bl	8006228 <RCCEx_PLLSAI1_Config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061a6:	7cfb      	ldrb	r3, [r7, #19]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80061ac:	7cfb      	ldrb	r3, [r7, #19]
 80061ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01c      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061bc:	4b19      	ldr	r3, [pc, #100]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ca:	4916      	ldr	r1, [pc, #88]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061da:	d10c      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3304      	adds	r3, #4
 80061e0:	2102      	movs	r1, #2
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f820 	bl	8006228 <RCCEx_PLLSAI1_Config>
 80061e8:	4603      	mov	r3, r0
 80061ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ec:	7cfb      	ldrb	r3, [r7, #19]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80061f2:	7cfb      	ldrb	r3, [r7, #19]
 80061f4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006208:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006210:	4904      	ldr	r1, [pc, #16]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006218:	7cbb      	ldrb	r3, [r7, #18]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	40021000 	.word	0x40021000

08006228 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006236:	4b74      	ldr	r3, [pc, #464]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d018      	beq.n	8006274 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006242:	4b71      	ldr	r3, [pc, #452]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0203 	and.w	r2, r3, #3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d10d      	bne.n	800626e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
       ||
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800625a:	4b6b      	ldr	r3, [pc, #428]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	091b      	lsrs	r3, r3, #4
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
       ||
 800626a:	429a      	cmp	r2, r3
 800626c:	d047      	beq.n	80062fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	73fb      	strb	r3, [r7, #15]
 8006272:	e044      	b.n	80062fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b03      	cmp	r3, #3
 800627a:	d018      	beq.n	80062ae <RCCEx_PLLSAI1_Config+0x86>
 800627c:	2b03      	cmp	r3, #3
 800627e:	d825      	bhi.n	80062cc <RCCEx_PLLSAI1_Config+0xa4>
 8006280:	2b01      	cmp	r3, #1
 8006282:	d002      	beq.n	800628a <RCCEx_PLLSAI1_Config+0x62>
 8006284:	2b02      	cmp	r3, #2
 8006286:	d009      	beq.n	800629c <RCCEx_PLLSAI1_Config+0x74>
 8006288:	e020      	b.n	80062cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800628a:	4b5f      	ldr	r3, [pc, #380]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d11d      	bne.n	80062d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800629a:	e01a      	b.n	80062d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800629c:	4b5a      	ldr	r3, [pc, #360]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d116      	bne.n	80062d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ac:	e013      	b.n	80062d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062ae:	4b56      	ldr	r3, [pc, #344]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10f      	bne.n	80062da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062ba:	4b53      	ldr	r3, [pc, #332]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ca:	e006      	b.n	80062da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
      break;
 80062d0:	e004      	b.n	80062dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062d2:	bf00      	nop
 80062d4:	e002      	b.n	80062dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062d6:	bf00      	nop
 80062d8:	e000      	b.n	80062dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062da:	bf00      	nop
    }

    if(status == HAL_OK)
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10d      	bne.n	80062fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062e2:	4b49      	ldr	r3, [pc, #292]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6819      	ldr	r1, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	430b      	orrs	r3, r1
 80062f8:	4943      	ldr	r1, [pc, #268]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d17c      	bne.n	80063fe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006304:	4b40      	ldr	r3, [pc, #256]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a3f      	ldr	r2, [pc, #252]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800630a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800630e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006310:	f7fc f908 	bl	8002524 <HAL_GetTick>
 8006314:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006316:	e009      	b.n	800632c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006318:	f7fc f904 	bl	8002524 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d902      	bls.n	800632c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	73fb      	strb	r3, [r7, #15]
        break;
 800632a:	e005      	b.n	8006338 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800632c:	4b36      	ldr	r3, [pc, #216]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1ef      	bne.n	8006318 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d15f      	bne.n	80063fe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d110      	bne.n	8006366 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006344:	4b30      	ldr	r3, [pc, #192]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800634c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6892      	ldr	r2, [r2, #8]
 8006354:	0211      	lsls	r1, r2, #8
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68d2      	ldr	r2, [r2, #12]
 800635a:	06d2      	lsls	r2, r2, #27
 800635c:	430a      	orrs	r2, r1
 800635e:	492a      	ldr	r1, [pc, #168]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006360:	4313      	orrs	r3, r2
 8006362:	610b      	str	r3, [r1, #16]
 8006364:	e027      	b.n	80063b6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d112      	bne.n	8006392 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800636c:	4b26      	ldr	r3, [pc, #152]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006374:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6892      	ldr	r2, [r2, #8]
 800637c:	0211      	lsls	r1, r2, #8
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6912      	ldr	r2, [r2, #16]
 8006382:	0852      	lsrs	r2, r2, #1
 8006384:	3a01      	subs	r2, #1
 8006386:	0552      	lsls	r2, r2, #21
 8006388:	430a      	orrs	r2, r1
 800638a:	491f      	ldr	r1, [pc, #124]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800638c:	4313      	orrs	r3, r2
 800638e:	610b      	str	r3, [r1, #16]
 8006390:	e011      	b.n	80063b6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006392:	4b1d      	ldr	r3, [pc, #116]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800639a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6892      	ldr	r2, [r2, #8]
 80063a2:	0211      	lsls	r1, r2, #8
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6952      	ldr	r2, [r2, #20]
 80063a8:	0852      	lsrs	r2, r2, #1
 80063aa:	3a01      	subs	r2, #1
 80063ac:	0652      	lsls	r2, r2, #25
 80063ae:	430a      	orrs	r2, r1
 80063b0:	4915      	ldr	r1, [pc, #84]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063b6:	4b14      	ldr	r3, [pc, #80]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a13      	ldr	r2, [pc, #76]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c2:	f7fc f8af 	bl	8002524 <HAL_GetTick>
 80063c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063c8:	e009      	b.n	80063de <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063ca:	f7fc f8ab 	bl	8002524 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d902      	bls.n	80063de <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	73fb      	strb	r3, [r7, #15]
          break;
 80063dc:	e005      	b.n	80063ea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063de:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0ef      	beq.n	80063ca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	4903      	ldr	r1, [pc, #12]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40021000 	.word	0x40021000

0800640c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e049      	b.n	80064b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb fea4 	bl	8002180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f000 fc96 	bl	8006d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d001      	beq.n	80064d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e03b      	b.n	800654c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a19      	ldr	r2, [pc, #100]	; (8006558 <HAL_TIM_Base_Start_IT+0x9c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_TIM_Base_Start_IT+0x4e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fe:	d004      	beq.n	800650a <HAL_TIM_Base_Start_IT+0x4e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a15      	ldr	r2, [pc, #84]	; (800655c <HAL_TIM_Base_Start_IT+0xa0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d115      	bne.n	8006536 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	4b13      	ldr	r3, [pc, #76]	; (8006560 <HAL_TIM_Base_Start_IT+0xa4>)
 8006512:	4013      	ands	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b06      	cmp	r3, #6
 800651a:	d015      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x8c>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006522:	d011      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006534:	e008      	b.n	8006548 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0201 	orr.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e000      	b.n	800654a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006548:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40014000 	.word	0x40014000
 8006560:	00010007 	.word	0x00010007

08006564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e049      	b.n	800660a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fb fdb2 	bl	80020f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3304      	adds	r3, #4
 80065a0:	4619      	mov	r1, r3
 80065a2:	4610      	mov	r0, r2
 80065a4:	f000 fbea 	bl	8006d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <HAL_TIM_PWM_Start+0x24>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	bf14      	ite	ne
 8006630:	2301      	movne	r3, #1
 8006632:	2300      	moveq	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	e03c      	b.n	80066b2 <HAL_TIM_PWM_Start+0x9e>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b04      	cmp	r3, #4
 800663c:	d109      	bne.n	8006652 <HAL_TIM_PWM_Start+0x3e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b01      	cmp	r3, #1
 8006648:	bf14      	ite	ne
 800664a:	2301      	movne	r3, #1
 800664c:	2300      	moveq	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	e02f      	b.n	80066b2 <HAL_TIM_PWM_Start+0x9e>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b08      	cmp	r3, #8
 8006656:	d109      	bne.n	800666c <HAL_TIM_PWM_Start+0x58>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	bf14      	ite	ne
 8006664:	2301      	movne	r3, #1
 8006666:	2300      	moveq	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	e022      	b.n	80066b2 <HAL_TIM_PWM_Start+0x9e>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b0c      	cmp	r3, #12
 8006670:	d109      	bne.n	8006686 <HAL_TIM_PWM_Start+0x72>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b01      	cmp	r3, #1
 800667c:	bf14      	ite	ne
 800667e:	2301      	movne	r3, #1
 8006680:	2300      	moveq	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	e015      	b.n	80066b2 <HAL_TIM_PWM_Start+0x9e>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b10      	cmp	r3, #16
 800668a:	d109      	bne.n	80066a0 <HAL_TIM_PWM_Start+0x8c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b01      	cmp	r3, #1
 8006696:	bf14      	ite	ne
 8006698:	2301      	movne	r3, #1
 800669a:	2300      	moveq	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e008      	b.n	80066b2 <HAL_TIM_PWM_Start+0x9e>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	bf14      	ite	ne
 80066ac:	2301      	movne	r3, #1
 80066ae:	2300      	moveq	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e07e      	b.n	80067b8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <HAL_TIM_PWM_Start+0xb6>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066c8:	e023      	b.n	8006712 <HAL_TIM_PWM_Start+0xfe>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d104      	bne.n	80066da <HAL_TIM_PWM_Start+0xc6>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066d8:	e01b      	b.n	8006712 <HAL_TIM_PWM_Start+0xfe>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d104      	bne.n	80066ea <HAL_TIM_PWM_Start+0xd6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e8:	e013      	b.n	8006712 <HAL_TIM_PWM_Start+0xfe>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b0c      	cmp	r3, #12
 80066ee:	d104      	bne.n	80066fa <HAL_TIM_PWM_Start+0xe6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066f8:	e00b      	b.n	8006712 <HAL_TIM_PWM_Start+0xfe>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b10      	cmp	r3, #16
 80066fe:	d104      	bne.n	800670a <HAL_TIM_PWM_Start+0xf6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006708:	e003      	b.n	8006712 <HAL_TIM_PWM_Start+0xfe>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2201      	movs	r2, #1
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fe1c 	bl	8007358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a26      	ldr	r2, [pc, #152]	; (80067c0 <HAL_TIM_PWM_Start+0x1ac>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d009      	beq.n	800673e <HAL_TIM_PWM_Start+0x12a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a25      	ldr	r2, [pc, #148]	; (80067c4 <HAL_TIM_PWM_Start+0x1b0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d004      	beq.n	800673e <HAL_TIM_PWM_Start+0x12a>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a23      	ldr	r2, [pc, #140]	; (80067c8 <HAL_TIM_PWM_Start+0x1b4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <HAL_TIM_PWM_Start+0x12e>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_TIM_PWM_Start+0x130>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d007      	beq.n	8006758 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006756:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a18      	ldr	r2, [pc, #96]	; (80067c0 <HAL_TIM_PWM_Start+0x1ac>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_TIM_PWM_Start+0x162>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676a:	d004      	beq.n	8006776 <HAL_TIM_PWM_Start+0x162>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a14      	ldr	r2, [pc, #80]	; (80067c4 <HAL_TIM_PWM_Start+0x1b0>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d115      	bne.n	80067a2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	4b13      	ldr	r3, [pc, #76]	; (80067cc <HAL_TIM_PWM_Start+0x1b8>)
 800677e:	4013      	ands	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b06      	cmp	r3, #6
 8006786:	d015      	beq.n	80067b4 <HAL_TIM_PWM_Start+0x1a0>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678e:	d011      	beq.n	80067b4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a0:	e008      	b.n	80067b4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	e000      	b.n	80067b6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40014000 	.word	0x40014000
 80067c8:	40014400 	.word	0x40014400
 80067cc:	00010007 	.word	0x00010007

080067d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2200      	movs	r2, #0
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fdb8 	bl	8007358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a39      	ldr	r2, [pc, #228]	; (80068d4 <HAL_TIM_PWM_Stop+0x104>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d009      	beq.n	8006806 <HAL_TIM_PWM_Stop+0x36>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a38      	ldr	r2, [pc, #224]	; (80068d8 <HAL_TIM_PWM_Stop+0x108>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d004      	beq.n	8006806 <HAL_TIM_PWM_Stop+0x36>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a36      	ldr	r2, [pc, #216]	; (80068dc <HAL_TIM_PWM_Stop+0x10c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d101      	bne.n	800680a <HAL_TIM_PWM_Stop+0x3a>
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <HAL_TIM_PWM_Stop+0x3c>
 800680a:	2300      	movs	r3, #0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d017      	beq.n	8006840 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6a1a      	ldr	r2, [r3, #32]
 8006816:	f241 1311 	movw	r3, #4369	; 0x1111
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10f      	bne.n	8006840 <HAL_TIM_PWM_Stop+0x70>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6a1a      	ldr	r2, [r3, #32]
 8006826:	f240 4344 	movw	r3, #1092	; 0x444
 800682a:	4013      	ands	r3, r2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d107      	bne.n	8006840 <HAL_TIM_PWM_Stop+0x70>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800683e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a1a      	ldr	r2, [r3, #32]
 8006846:	f241 1311 	movw	r3, #4369	; 0x1111
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10f      	bne.n	8006870 <HAL_TIM_PWM_Stop+0xa0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a1a      	ldr	r2, [r3, #32]
 8006856:	f240 4344 	movw	r3, #1092	; 0x444
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d107      	bne.n	8006870 <HAL_TIM_PWM_Stop+0xa0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <HAL_TIM_PWM_Stop+0xb0>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800687e:	e023      	b.n	80068c8 <HAL_TIM_PWM_Stop+0xf8>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b04      	cmp	r3, #4
 8006884:	d104      	bne.n	8006890 <HAL_TIM_PWM_Stop+0xc0>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800688e:	e01b      	b.n	80068c8 <HAL_TIM_PWM_Stop+0xf8>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b08      	cmp	r3, #8
 8006894:	d104      	bne.n	80068a0 <HAL_TIM_PWM_Stop+0xd0>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800689e:	e013      	b.n	80068c8 <HAL_TIM_PWM_Stop+0xf8>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b0c      	cmp	r3, #12
 80068a4:	d104      	bne.n	80068b0 <HAL_TIM_PWM_Stop+0xe0>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068ae:	e00b      	b.n	80068c8 <HAL_TIM_PWM_Stop+0xf8>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d104      	bne.n	80068c0 <HAL_TIM_PWM_Stop+0xf0>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068be:	e003      	b.n	80068c8 <HAL_TIM_PWM_Stop+0xf8>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40012c00 	.word	0x40012c00
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40014400 	.word	0x40014400

080068e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d020      	beq.n	8006944 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01b      	beq.n	8006944 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0202 	mvn.w	r2, #2
 8006914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fa08 	bl	8006d40 <HAL_TIM_IC_CaptureCallback>
 8006930:	e005      	b.n	800693e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9fa 	bl	8006d2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa0b 	bl	8006d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d020      	beq.n	8006990 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01b      	beq.n	8006990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0204 	mvn.w	r2, #4
 8006960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f9e2 	bl	8006d40 <HAL_TIM_IC_CaptureCallback>
 800697c:	e005      	b.n	800698a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f9d4 	bl	8006d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f9e5 	bl	8006d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d020      	beq.n	80069dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d01b      	beq.n	80069dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0208 	mvn.w	r2, #8
 80069ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2204      	movs	r2, #4
 80069b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f9bc 	bl	8006d40 <HAL_TIM_IC_CaptureCallback>
 80069c8:	e005      	b.n	80069d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f9ae 	bl	8006d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f9bf 	bl	8006d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d020      	beq.n	8006a28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01b      	beq.n	8006a28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0210 	mvn.w	r2, #16
 80069f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2208      	movs	r2, #8
 80069fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f996 	bl	8006d40 <HAL_TIM_IC_CaptureCallback>
 8006a14:	e005      	b.n	8006a22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f988 	bl	8006d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f999 	bl	8006d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d007      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0201 	mvn.w	r2, #1
 8006a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f966 	bl	8006d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00c      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fd7d 	bl	8007574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d007      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fd75 	bl	8007588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f953 	bl	8006d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00c      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f06f 0220 	mvn.w	r2, #32
 8006ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fd3d 	bl	8007560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e0ff      	b.n	8006d0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b14      	cmp	r3, #20
 8006b1a:	f200 80f0 	bhi.w	8006cfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b79 	.word	0x08006b79
 8006b28:	08006cff 	.word	0x08006cff
 8006b2c:	08006cff 	.word	0x08006cff
 8006b30:	08006cff 	.word	0x08006cff
 8006b34:	08006bb9 	.word	0x08006bb9
 8006b38:	08006cff 	.word	0x08006cff
 8006b3c:	08006cff 	.word	0x08006cff
 8006b40:	08006cff 	.word	0x08006cff
 8006b44:	08006bfb 	.word	0x08006bfb
 8006b48:	08006cff 	.word	0x08006cff
 8006b4c:	08006cff 	.word	0x08006cff
 8006b50:	08006cff 	.word	0x08006cff
 8006b54:	08006c3b 	.word	0x08006c3b
 8006b58:	08006cff 	.word	0x08006cff
 8006b5c:	08006cff 	.word	0x08006cff
 8006b60:	08006cff 	.word	0x08006cff
 8006b64:	08006c7d 	.word	0x08006c7d
 8006b68:	08006cff 	.word	0x08006cff
 8006b6c:	08006cff 	.word	0x08006cff
 8006b70:	08006cff 	.word	0x08006cff
 8006b74:	08006cbd 	.word	0x08006cbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 f96c 	bl	8006e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0208 	orr.w	r2, r2, #8
 8006b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0204 	bic.w	r2, r2, #4
 8006ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6999      	ldr	r1, [r3, #24]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	619a      	str	r2, [r3, #24]
      break;
 8006bb6:	e0a5      	b.n	8006d04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f9c8 	bl	8006f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6999      	ldr	r1, [r3, #24]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	021a      	lsls	r2, r3, #8
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	619a      	str	r2, [r3, #24]
      break;
 8006bf8:	e084      	b.n	8006d04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fa21 	bl	8007048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0208 	orr.w	r2, r2, #8
 8006c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0204 	bic.w	r2, r2, #4
 8006c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69d9      	ldr	r1, [r3, #28]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	61da      	str	r2, [r3, #28]
      break;
 8006c38:	e064      	b.n	8006d04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fa79 	bl	8007138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69d9      	ldr	r1, [r3, #28]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	021a      	lsls	r2, r3, #8
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	61da      	str	r2, [r3, #28]
      break;
 8006c7a:	e043      	b.n	8006d04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fab6 	bl	80071f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0208 	orr.w	r2, r2, #8
 8006c96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0204 	bic.w	r2, r2, #4
 8006ca6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	691a      	ldr	r2, [r3, #16]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cba:	e023      	b.n	8006d04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68b9      	ldr	r1, [r7, #8]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 faee 	bl	80072a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	021a      	lsls	r2, r3, #8
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cfc:	e002      	b.n	8006d04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	75fb      	strb	r3, [r7, #23]
      break;
 8006d02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop

08006d18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <TIM_Base_SetConfig+0xd4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d003      	beq.n	8006d9c <TIM_Base_SetConfig+0x20>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9a:	d108      	bne.n	8006dae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a27      	ldr	r2, [pc, #156]	; (8006e50 <TIM_Base_SetConfig+0xd4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00b      	beq.n	8006dce <TIM_Base_SetConfig+0x52>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dbc:	d007      	beq.n	8006dce <TIM_Base_SetConfig+0x52>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a24      	ldr	r2, [pc, #144]	; (8006e54 <TIM_Base_SetConfig+0xd8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_Base_SetConfig+0x52>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a23      	ldr	r2, [pc, #140]	; (8006e58 <TIM_Base_SetConfig+0xdc>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d108      	bne.n	8006de0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a12      	ldr	r2, [pc, #72]	; (8006e50 <TIM_Base_SetConfig+0xd4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d007      	beq.n	8006e1c <TIM_Base_SetConfig+0xa0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a11      	ldr	r2, [pc, #68]	; (8006e54 <TIM_Base_SetConfig+0xd8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_Base_SetConfig+0xa0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a10      	ldr	r2, [pc, #64]	; (8006e58 <TIM_Base_SetConfig+0xdc>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d103      	bne.n	8006e24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d105      	bne.n	8006e42 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	f023 0201 	bic.w	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	611a      	str	r2, [r3, #16]
  }
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40012c00 	.word	0x40012c00
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40014400 	.word	0x40014400

08006e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f023 0201 	bic.w	r2, r3, #1
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f023 0302 	bic.w	r3, r3, #2
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a24      	ldr	r2, [pc, #144]	; (8006f48 <TIM_OC1_SetConfig+0xec>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d007      	beq.n	8006ecc <TIM_OC1_SetConfig+0x70>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <TIM_OC1_SetConfig+0xf0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_OC1_SetConfig+0x70>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a22      	ldr	r2, [pc, #136]	; (8006f50 <TIM_OC1_SetConfig+0xf4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d10c      	bne.n	8006ee6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f023 0308 	bic.w	r3, r3, #8
 8006ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f023 0304 	bic.w	r3, r3, #4
 8006ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <TIM_OC1_SetConfig+0xec>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d007      	beq.n	8006efe <TIM_OC1_SetConfig+0xa2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a16      	ldr	r2, [pc, #88]	; (8006f4c <TIM_OC1_SetConfig+0xf0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_OC1_SetConfig+0xa2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a15      	ldr	r2, [pc, #84]	; (8006f50 <TIM_OC1_SetConfig+0xf4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d111      	bne.n	8006f22 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	621a      	str	r2, [r3, #32]
}
 8006f3c:	bf00      	nop
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40014000 	.word	0x40014000
 8006f50:	40014400 	.word	0x40014400

08006f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	f023 0210 	bic.w	r2, r3, #16
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f023 0320 	bic.w	r3, r3, #32
 8006fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a22      	ldr	r2, [pc, #136]	; (800703c <TIM_OC2_SetConfig+0xe8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d10d      	bne.n	8006fd4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a19      	ldr	r2, [pc, #100]	; (800703c <TIM_OC2_SetConfig+0xe8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d007      	beq.n	8006fec <TIM_OC2_SetConfig+0x98>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a18      	ldr	r2, [pc, #96]	; (8007040 <TIM_OC2_SetConfig+0xec>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_OC2_SetConfig+0x98>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a17      	ldr	r2, [pc, #92]	; (8007044 <TIM_OC2_SetConfig+0xf0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d113      	bne.n	8007014 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	621a      	str	r2, [r3, #32]
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40012c00 	.word	0x40012c00
 8007040:	40014000 	.word	0x40014000
 8007044:	40014400 	.word	0x40014400

08007048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0303 	bic.w	r3, r3, #3
 8007082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a21      	ldr	r2, [pc, #132]	; (800712c <TIM_OC3_SetConfig+0xe4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d10d      	bne.n	80070c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a18      	ldr	r2, [pc, #96]	; (800712c <TIM_OC3_SetConfig+0xe4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d007      	beq.n	80070de <TIM_OC3_SetConfig+0x96>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a17      	ldr	r2, [pc, #92]	; (8007130 <TIM_OC3_SetConfig+0xe8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d003      	beq.n	80070de <TIM_OC3_SetConfig+0x96>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a16      	ldr	r2, [pc, #88]	; (8007134 <TIM_OC3_SetConfig+0xec>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d113      	bne.n	8007106 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	621a      	str	r2, [r3, #32]
}
 8007120:	bf00      	nop
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	40012c00 	.word	0x40012c00
 8007130:	40014000 	.word	0x40014000
 8007134:	40014400 	.word	0x40014400

08007138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	031b      	lsls	r3, r3, #12
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <TIM_OC4_SetConfig+0xb0>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_OC4_SetConfig+0x74>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a13      	ldr	r2, [pc, #76]	; (80071ec <TIM_OC4_SetConfig+0xb4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_OC4_SetConfig+0x74>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a12      	ldr	r2, [pc, #72]	; (80071f0 <TIM_OC4_SetConfig+0xb8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d109      	bne.n	80071c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	019b      	lsls	r3, r3, #6
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	40012c00 	.word	0x40012c00
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400

080071f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007238:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	041b      	lsls	r3, r3, #16
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a13      	ldr	r2, [pc, #76]	; (8007298 <TIM_OC5_SetConfig+0xa4>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d007      	beq.n	800725e <TIM_OC5_SetConfig+0x6a>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a12      	ldr	r2, [pc, #72]	; (800729c <TIM_OC5_SetConfig+0xa8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_OC5_SetConfig+0x6a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a11      	ldr	r2, [pc, #68]	; (80072a0 <TIM_OC5_SetConfig+0xac>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d109      	bne.n	8007272 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007264:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	621a      	str	r2, [r3, #32]
}
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	40012c00 	.word	0x40012c00
 800729c:	40014000 	.word	0x40014000
 80072a0:	40014400 	.word	0x40014400

080072a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	051b      	lsls	r3, r3, #20
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a14      	ldr	r2, [pc, #80]	; (800734c <TIM_OC6_SetConfig+0xa8>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d007      	beq.n	8007310 <TIM_OC6_SetConfig+0x6c>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a13      	ldr	r2, [pc, #76]	; (8007350 <TIM_OC6_SetConfig+0xac>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d003      	beq.n	8007310 <TIM_OC6_SetConfig+0x6c>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a12      	ldr	r2, [pc, #72]	; (8007354 <TIM_OC6_SetConfig+0xb0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d109      	bne.n	8007324 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	029b      	lsls	r3, r3, #10
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40012c00 	.word	0x40012c00
 8007350:	40014000 	.word	0x40014000
 8007354:	40014400 	.word	0x40014400

08007358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f003 031f 	and.w	r3, r3, #31
 800736a:	2201      	movs	r2, #1
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a1a      	ldr	r2, [r3, #32]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	43db      	mvns	r3, r3
 800737a:	401a      	ands	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a1a      	ldr	r2, [r3, #32]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	fa01 f303 	lsl.w	r3, r1, r3
 8007390:	431a      	orrs	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	621a      	str	r2, [r3, #32]
}
 8007396:	bf00      	nop
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
	...

080073a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e04f      	b.n	800745c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a21      	ldr	r2, [pc, #132]	; (8007468 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d108      	bne.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a14      	ldr	r2, [pc, #80]	; (8007468 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d009      	beq.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007424:	d004      	beq.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a10      	ldr	r2, [pc, #64]	; (800746c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d10c      	bne.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007436:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	4313      	orrs	r3, r2
 8007440:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	40012c00 	.word	0x40012c00
 800746c:	40014000 	.word	0x40014000

08007470 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007488:	2302      	movs	r3, #2
 800748a:	e060      	b.n	800754e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	041b      	lsls	r3, r3, #16
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a14      	ldr	r2, [pc, #80]	; (800755c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d115      	bne.n	800753c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	051b      	lsls	r3, r3, #20
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40012c00 	.word	0x40012c00

08007560 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e040      	b.n	8007630 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d106      	bne.n	80075c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fa feb4 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2224      	movs	r2, #36	; 0x24
 80075c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0201 	bic.w	r2, r2, #1
 80075d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fa54 	bl	8007a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f825 	bl	8007638 <UART_SetConfig>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e01b      	b.n	8007630 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fad3 	bl	8007bd4 <UART_CheckIdleState>
 800762e:	4603      	mov	r3, r0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800763c:	b08a      	sub	sp, #40	; 0x28
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	431a      	orrs	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	431a      	orrs	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	4313      	orrs	r3, r2
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	4bb4      	ldr	r3, [pc, #720]	; (8007938 <UART_SetConfig+0x300>)
 8007668:	4013      	ands	r3, r2
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007670:	430b      	orrs	r3, r1
 8007672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4aa9      	ldr	r2, [pc, #676]	; (800793c <UART_SetConfig+0x304>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d004      	beq.n	80076a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a0:	4313      	orrs	r3, r2
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b4:	430a      	orrs	r2, r1
 80076b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4aa0      	ldr	r2, [pc, #640]	; (8007940 <UART_SetConfig+0x308>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d126      	bne.n	8007710 <UART_SetConfig+0xd8>
 80076c2:	4ba0      	ldr	r3, [pc, #640]	; (8007944 <UART_SetConfig+0x30c>)
 80076c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c8:	f003 0303 	and.w	r3, r3, #3
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d81b      	bhi.n	8007708 <UART_SetConfig+0xd0>
 80076d0:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <UART_SetConfig+0xa0>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	080076e9 	.word	0x080076e9
 80076dc:	080076f9 	.word	0x080076f9
 80076e0:	080076f1 	.word	0x080076f1
 80076e4:	08007701 	.word	0x08007701
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ee:	e080      	b.n	80077f2 <UART_SetConfig+0x1ba>
 80076f0:	2302      	movs	r3, #2
 80076f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076f6:	e07c      	b.n	80077f2 <UART_SetConfig+0x1ba>
 80076f8:	2304      	movs	r3, #4
 80076fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fe:	e078      	b.n	80077f2 <UART_SetConfig+0x1ba>
 8007700:	2308      	movs	r3, #8
 8007702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007706:	e074      	b.n	80077f2 <UART_SetConfig+0x1ba>
 8007708:	2310      	movs	r3, #16
 800770a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770e:	e070      	b.n	80077f2 <UART_SetConfig+0x1ba>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a8c      	ldr	r2, [pc, #560]	; (8007948 <UART_SetConfig+0x310>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d138      	bne.n	800778c <UART_SetConfig+0x154>
 800771a:	4b8a      	ldr	r3, [pc, #552]	; (8007944 <UART_SetConfig+0x30c>)
 800771c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007720:	f003 030c 	and.w	r3, r3, #12
 8007724:	2b0c      	cmp	r3, #12
 8007726:	d82d      	bhi.n	8007784 <UART_SetConfig+0x14c>
 8007728:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <UART_SetConfig+0xf8>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007765 	.word	0x08007765
 8007734:	08007785 	.word	0x08007785
 8007738:	08007785 	.word	0x08007785
 800773c:	08007785 	.word	0x08007785
 8007740:	08007775 	.word	0x08007775
 8007744:	08007785 	.word	0x08007785
 8007748:	08007785 	.word	0x08007785
 800774c:	08007785 	.word	0x08007785
 8007750:	0800776d 	.word	0x0800776d
 8007754:	08007785 	.word	0x08007785
 8007758:	08007785 	.word	0x08007785
 800775c:	08007785 	.word	0x08007785
 8007760:	0800777d 	.word	0x0800777d
 8007764:	2300      	movs	r3, #0
 8007766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800776a:	e042      	b.n	80077f2 <UART_SetConfig+0x1ba>
 800776c:	2302      	movs	r3, #2
 800776e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007772:	e03e      	b.n	80077f2 <UART_SetConfig+0x1ba>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800777a:	e03a      	b.n	80077f2 <UART_SetConfig+0x1ba>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007782:	e036      	b.n	80077f2 <UART_SetConfig+0x1ba>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800778a:	e032      	b.n	80077f2 <UART_SetConfig+0x1ba>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a6a      	ldr	r2, [pc, #424]	; (800793c <UART_SetConfig+0x304>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d12a      	bne.n	80077ec <UART_SetConfig+0x1b4>
 8007796:	4b6b      	ldr	r3, [pc, #428]	; (8007944 <UART_SetConfig+0x30c>)
 8007798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077a4:	d01a      	beq.n	80077dc <UART_SetConfig+0x1a4>
 80077a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077aa:	d81b      	bhi.n	80077e4 <UART_SetConfig+0x1ac>
 80077ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b0:	d00c      	beq.n	80077cc <UART_SetConfig+0x194>
 80077b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b6:	d815      	bhi.n	80077e4 <UART_SetConfig+0x1ac>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <UART_SetConfig+0x18c>
 80077bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c0:	d008      	beq.n	80077d4 <UART_SetConfig+0x19c>
 80077c2:	e00f      	b.n	80077e4 <UART_SetConfig+0x1ac>
 80077c4:	2300      	movs	r3, #0
 80077c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ca:	e012      	b.n	80077f2 <UART_SetConfig+0x1ba>
 80077cc:	2302      	movs	r3, #2
 80077ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d2:	e00e      	b.n	80077f2 <UART_SetConfig+0x1ba>
 80077d4:	2304      	movs	r3, #4
 80077d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077da:	e00a      	b.n	80077f2 <UART_SetConfig+0x1ba>
 80077dc:	2308      	movs	r3, #8
 80077de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077e2:	e006      	b.n	80077f2 <UART_SetConfig+0x1ba>
 80077e4:	2310      	movs	r3, #16
 80077e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ea:	e002      	b.n	80077f2 <UART_SetConfig+0x1ba>
 80077ec:	2310      	movs	r3, #16
 80077ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a51      	ldr	r2, [pc, #324]	; (800793c <UART_SetConfig+0x304>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d17a      	bne.n	80078f2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007800:	2b08      	cmp	r3, #8
 8007802:	d824      	bhi.n	800784e <UART_SetConfig+0x216>
 8007804:	a201      	add	r2, pc, #4	; (adr r2, 800780c <UART_SetConfig+0x1d4>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	08007831 	.word	0x08007831
 8007810:	0800784f 	.word	0x0800784f
 8007814:	08007839 	.word	0x08007839
 8007818:	0800784f 	.word	0x0800784f
 800781c:	0800783f 	.word	0x0800783f
 8007820:	0800784f 	.word	0x0800784f
 8007824:	0800784f 	.word	0x0800784f
 8007828:	0800784f 	.word	0x0800784f
 800782c:	08007847 	.word	0x08007847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007830:	f7fe fa78 	bl	8005d24 <HAL_RCC_GetPCLK1Freq>
 8007834:	61f8      	str	r0, [r7, #28]
        break;
 8007836:	e010      	b.n	800785a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007838:	4b44      	ldr	r3, [pc, #272]	; (800794c <UART_SetConfig+0x314>)
 800783a:	61fb      	str	r3, [r7, #28]
        break;
 800783c:	e00d      	b.n	800785a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800783e:	f7fe f9d9 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8007842:	61f8      	str	r0, [r7, #28]
        break;
 8007844:	e009      	b.n	800785a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784a:	61fb      	str	r3, [r7, #28]
        break;
 800784c:	e005      	b.n	800785a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007858:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8107 	beq.w	8007a70 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	4613      	mov	r3, r2
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4413      	add	r3, r2
 800786c:	69fa      	ldr	r2, [r7, #28]
 800786e:	429a      	cmp	r2, r3
 8007870:	d305      	bcc.n	800787e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	429a      	cmp	r2, r3
 800787c:	d903      	bls.n	8007886 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007884:	e0f4      	b.n	8007a70 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2200      	movs	r2, #0
 800788a:	461c      	mov	r4, r3
 800788c:	4615      	mov	r5, r2
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	022b      	lsls	r3, r5, #8
 8007898:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800789c:	0222      	lsls	r2, r4, #8
 800789e:	68f9      	ldr	r1, [r7, #12]
 80078a0:	6849      	ldr	r1, [r1, #4]
 80078a2:	0849      	lsrs	r1, r1, #1
 80078a4:	2000      	movs	r0, #0
 80078a6:	4688      	mov	r8, r1
 80078a8:	4681      	mov	r9, r0
 80078aa:	eb12 0a08 	adds.w	sl, r2, r8
 80078ae:	eb43 0b09 	adc.w	fp, r3, r9
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	603b      	str	r3, [r7, #0]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c0:	4650      	mov	r0, sl
 80078c2:	4659      	mov	r1, fp
 80078c4:	f7f9 f9e0 	bl	8000c88 <__aeabi_uldivmod>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4613      	mov	r3, r2
 80078ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d6:	d308      	bcc.n	80078ea <UART_SetConfig+0x2b2>
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078de:	d204      	bcs.n	80078ea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	60da      	str	r2, [r3, #12]
 80078e8:	e0c2      	b.n	8007a70 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078f0:	e0be      	b.n	8007a70 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078fa:	d16a      	bne.n	80079d2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80078fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007900:	2b08      	cmp	r3, #8
 8007902:	d834      	bhi.n	800796e <UART_SetConfig+0x336>
 8007904:	a201      	add	r2, pc, #4	; (adr r2, 800790c <UART_SetConfig+0x2d4>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007931 	.word	0x08007931
 8007910:	08007951 	.word	0x08007951
 8007914:	08007959 	.word	0x08007959
 8007918:	0800796f 	.word	0x0800796f
 800791c:	0800795f 	.word	0x0800795f
 8007920:	0800796f 	.word	0x0800796f
 8007924:	0800796f 	.word	0x0800796f
 8007928:	0800796f 	.word	0x0800796f
 800792c:	08007967 	.word	0x08007967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007930:	f7fe f9f8 	bl	8005d24 <HAL_RCC_GetPCLK1Freq>
 8007934:	61f8      	str	r0, [r7, #28]
        break;
 8007936:	e020      	b.n	800797a <UART_SetConfig+0x342>
 8007938:	efff69f3 	.word	0xefff69f3
 800793c:	40008000 	.word	0x40008000
 8007940:	40013800 	.word	0x40013800
 8007944:	40021000 	.word	0x40021000
 8007948:	40004400 	.word	0x40004400
 800794c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007950:	f7fe f9fe 	bl	8005d50 <HAL_RCC_GetPCLK2Freq>
 8007954:	61f8      	str	r0, [r7, #28]
        break;
 8007956:	e010      	b.n	800797a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007958:	4b4c      	ldr	r3, [pc, #304]	; (8007a8c <UART_SetConfig+0x454>)
 800795a:	61fb      	str	r3, [r7, #28]
        break;
 800795c:	e00d      	b.n	800797a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800795e:	f7fe f949 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8007962:	61f8      	str	r0, [r7, #28]
        break;
 8007964:	e009      	b.n	800797a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800796a:	61fb      	str	r3, [r7, #28]
        break;
 800796c:	e005      	b.n	800797a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007978:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d077      	beq.n	8007a70 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	005a      	lsls	r2, r3, #1
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	085b      	lsrs	r3, r3, #1
 800798a:	441a      	add	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b0f      	cmp	r3, #15
 800799a:	d916      	bls.n	80079ca <UART_SetConfig+0x392>
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a2:	d212      	bcs.n	80079ca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f023 030f 	bic.w	r3, r3, #15
 80079ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	8afb      	ldrh	r3, [r7, #22]
 80079bc:	4313      	orrs	r3, r2
 80079be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	8afa      	ldrh	r2, [r7, #22]
 80079c6:	60da      	str	r2, [r3, #12]
 80079c8:	e052      	b.n	8007a70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079d0:	e04e      	b.n	8007a70 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079d6:	2b08      	cmp	r3, #8
 80079d8:	d827      	bhi.n	8007a2a <UART_SetConfig+0x3f2>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <UART_SetConfig+0x3a8>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	08007a05 	.word	0x08007a05
 80079e4:	08007a0d 	.word	0x08007a0d
 80079e8:	08007a15 	.word	0x08007a15
 80079ec:	08007a2b 	.word	0x08007a2b
 80079f0:	08007a1b 	.word	0x08007a1b
 80079f4:	08007a2b 	.word	0x08007a2b
 80079f8:	08007a2b 	.word	0x08007a2b
 80079fc:	08007a2b 	.word	0x08007a2b
 8007a00:	08007a23 	.word	0x08007a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a04:	f7fe f98e 	bl	8005d24 <HAL_RCC_GetPCLK1Freq>
 8007a08:	61f8      	str	r0, [r7, #28]
        break;
 8007a0a:	e014      	b.n	8007a36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a0c:	f7fe f9a0 	bl	8005d50 <HAL_RCC_GetPCLK2Freq>
 8007a10:	61f8      	str	r0, [r7, #28]
        break;
 8007a12:	e010      	b.n	8007a36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a14:	4b1d      	ldr	r3, [pc, #116]	; (8007a8c <UART_SetConfig+0x454>)
 8007a16:	61fb      	str	r3, [r7, #28]
        break;
 8007a18:	e00d      	b.n	8007a36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a1a:	f7fe f8eb 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8007a1e:	61f8      	str	r0, [r7, #28]
        break;
 8007a20:	e009      	b.n	8007a36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a26:	61fb      	str	r3, [r7, #28]
        break;
 8007a28:	e005      	b.n	8007a36 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a34:	bf00      	nop
    }

    if (pclk != 0U)
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d019      	beq.n	8007a70 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	085a      	lsrs	r2, r3, #1
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	441a      	add	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	2b0f      	cmp	r3, #15
 8007a54:	d909      	bls.n	8007a6a <UART_SetConfig+0x432>
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a5c:	d205      	bcs.n	8007a6a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60da      	str	r2, [r3, #12]
 8007a68:	e002      	b.n	8007a70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3728      	adds	r7, #40	; 0x28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a8a:	bf00      	nop
 8007a8c:	00f42400 	.word	0x00f42400

08007a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	f003 0308 	and.w	r3, r3, #8
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00a      	beq.n	8007aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	f003 0304 	and.w	r3, r3, #4
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	f003 0310 	and.w	r3, r3, #16
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01a      	beq.n	8007ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b8e:	d10a      	bne.n	8007ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]
  }
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b098      	sub	sp, #96	; 0x60
 8007bd8:	af02      	add	r7, sp, #8
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007be4:	f7fa fc9e 	bl	8002524 <HAL_GetTick>
 8007be8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d12e      	bne.n	8007c56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c00:	2200      	movs	r2, #0
 8007c02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f88c 	bl	8007d24 <UART_WaitOnFlagUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d021      	beq.n	8007c56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c26:	653b      	str	r3, [r7, #80]	; 0x50
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c30:	647b      	str	r3, [r7, #68]	; 0x44
 8007c32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e6      	bne.n	8007c12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e062      	b.n	8007d1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d149      	bne.n	8007cf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f856 	bl	8007d24 <UART_WaitOnFlagUntilTimeout>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d03c      	beq.n	8007cf8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e6      	bne.n	8007c7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cd0:	61fa      	str	r2, [r7, #28]
 8007cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e5      	bne.n	8007cb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e011      	b.n	8007d1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3758      	adds	r7, #88	; 0x58
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	4613      	mov	r3, r2
 8007d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d34:	e04f      	b.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3c:	d04b      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d3e:	f7fa fbf1 	bl	8002524 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d302      	bcc.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e04e      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0304 	and.w	r3, r3, #4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d037      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b80      	cmp	r3, #128	; 0x80
 8007d6a:	d034      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b40      	cmp	r3, #64	; 0x40
 8007d70:	d031      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	f003 0308 	and.w	r3, r3, #8
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d110      	bne.n	8007da2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2208      	movs	r2, #8
 8007d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 f838 	bl	8007dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2208      	movs	r2, #8
 8007d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e029      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db0:	d111      	bne.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 f81e 	bl	8007dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e00f      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69da      	ldr	r2, [r3, #28]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4013      	ands	r3, r2
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	bf0c      	ite	eq
 8007de6:	2301      	moveq	r3, #1
 8007de8:	2300      	movne	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d0a0      	beq.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b095      	sub	sp, #84	; 0x54
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e24:	643b      	str	r3, [r7, #64]	; 0x40
 8007e26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	f023 0301 	bic.w	r3, r3, #1
 8007e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e5      	bne.n	8007e38 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d118      	bne.n	8007ea6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f023 0310 	bic.w	r3, r3, #16
 8007e88:	647b      	str	r3, [r7, #68]	; 0x44
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e92:	61bb      	str	r3, [r7, #24]
 8007e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	6979      	ldr	r1, [r7, #20]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e6      	bne.n	8007e74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007eba:	bf00      	nop
 8007ebc:	3754      	adds	r7, #84	; 0x54
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <__cvt>:
 8007ec6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eca:	ec55 4b10 	vmov	r4, r5, d0
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	460e      	mov	r6, r1
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	462b      	mov	r3, r5
 8007ed6:	bfbb      	ittet	lt
 8007ed8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007edc:	461d      	movlt	r5, r3
 8007ede:	2300      	movge	r3, #0
 8007ee0:	232d      	movlt	r3, #45	; 0x2d
 8007ee2:	700b      	strb	r3, [r1, #0]
 8007ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ee6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007eea:	4691      	mov	r9, r2
 8007eec:	f023 0820 	bic.w	r8, r3, #32
 8007ef0:	bfbc      	itt	lt
 8007ef2:	4622      	movlt	r2, r4
 8007ef4:	4614      	movlt	r4, r2
 8007ef6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007efa:	d005      	beq.n	8007f08 <__cvt+0x42>
 8007efc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f00:	d100      	bne.n	8007f04 <__cvt+0x3e>
 8007f02:	3601      	adds	r6, #1
 8007f04:	2102      	movs	r1, #2
 8007f06:	e000      	b.n	8007f0a <__cvt+0x44>
 8007f08:	2103      	movs	r1, #3
 8007f0a:	ab03      	add	r3, sp, #12
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	ab02      	add	r3, sp, #8
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	ec45 4b10 	vmov	d0, r4, r5
 8007f16:	4653      	mov	r3, sl
 8007f18:	4632      	mov	r2, r6
 8007f1a:	f001 f881 	bl	8009020 <_dtoa_r>
 8007f1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f22:	4607      	mov	r7, r0
 8007f24:	d102      	bne.n	8007f2c <__cvt+0x66>
 8007f26:	f019 0f01 	tst.w	r9, #1
 8007f2a:	d022      	beq.n	8007f72 <__cvt+0xac>
 8007f2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f30:	eb07 0906 	add.w	r9, r7, r6
 8007f34:	d110      	bne.n	8007f58 <__cvt+0x92>
 8007f36:	783b      	ldrb	r3, [r7, #0]
 8007f38:	2b30      	cmp	r3, #48	; 0x30
 8007f3a:	d10a      	bne.n	8007f52 <__cvt+0x8c>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2300      	movs	r3, #0
 8007f40:	4620      	mov	r0, r4
 8007f42:	4629      	mov	r1, r5
 8007f44:	f7f8 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f48:	b918      	cbnz	r0, 8007f52 <__cvt+0x8c>
 8007f4a:	f1c6 0601 	rsb	r6, r6, #1
 8007f4e:	f8ca 6000 	str.w	r6, [sl]
 8007f52:	f8da 3000 	ldr.w	r3, [sl]
 8007f56:	4499      	add	r9, r3
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f7f8 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f64:	b108      	cbz	r0, 8007f6a <__cvt+0xa4>
 8007f66:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f6a:	2230      	movs	r2, #48	; 0x30
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	454b      	cmp	r3, r9
 8007f70:	d307      	bcc.n	8007f82 <__cvt+0xbc>
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f76:	1bdb      	subs	r3, r3, r7
 8007f78:	4638      	mov	r0, r7
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	b004      	add	sp, #16
 8007f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f82:	1c59      	adds	r1, r3, #1
 8007f84:	9103      	str	r1, [sp, #12]
 8007f86:	701a      	strb	r2, [r3, #0]
 8007f88:	e7f0      	b.n	8007f6c <__cvt+0xa6>

08007f8a <__exponent>:
 8007f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	bfb8      	it	lt
 8007f92:	4249      	neglt	r1, r1
 8007f94:	f803 2b02 	strb.w	r2, [r3], #2
 8007f98:	bfb4      	ite	lt
 8007f9a:	222d      	movlt	r2, #45	; 0x2d
 8007f9c:	222b      	movge	r2, #43	; 0x2b
 8007f9e:	2909      	cmp	r1, #9
 8007fa0:	7042      	strb	r2, [r0, #1]
 8007fa2:	dd2a      	ble.n	8007ffa <__exponent+0x70>
 8007fa4:	f10d 0207 	add.w	r2, sp, #7
 8007fa8:	4617      	mov	r7, r2
 8007faa:	260a      	movs	r6, #10
 8007fac:	4694      	mov	ip, r2
 8007fae:	fb91 f5f6 	sdiv	r5, r1, r6
 8007fb2:	fb06 1415 	mls	r4, r6, r5, r1
 8007fb6:	3430      	adds	r4, #48	; 0x30
 8007fb8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	2c63      	cmp	r4, #99	; 0x63
 8007fc0:	f102 32ff 	add.w	r2, r2, #4294967295
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	dcf1      	bgt.n	8007fac <__exponent+0x22>
 8007fc8:	3130      	adds	r1, #48	; 0x30
 8007fca:	f1ac 0402 	sub.w	r4, ip, #2
 8007fce:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007fd2:	1c41      	adds	r1, r0, #1
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	42ba      	cmp	r2, r7
 8007fd8:	d30a      	bcc.n	8007ff0 <__exponent+0x66>
 8007fda:	f10d 0209 	add.w	r2, sp, #9
 8007fde:	eba2 020c 	sub.w	r2, r2, ip
 8007fe2:	42bc      	cmp	r4, r7
 8007fe4:	bf88      	it	hi
 8007fe6:	2200      	movhi	r2, #0
 8007fe8:	4413      	add	r3, r2
 8007fea:	1a18      	subs	r0, r3, r0
 8007fec:	b003      	add	sp, #12
 8007fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ff4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007ff8:	e7ed      	b.n	8007fd6 <__exponent+0x4c>
 8007ffa:	2330      	movs	r3, #48	; 0x30
 8007ffc:	3130      	adds	r1, #48	; 0x30
 8007ffe:	7083      	strb	r3, [r0, #2]
 8008000:	70c1      	strb	r1, [r0, #3]
 8008002:	1d03      	adds	r3, r0, #4
 8008004:	e7f1      	b.n	8007fea <__exponent+0x60>
	...

08008008 <_printf_float>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	ed2d 8b02 	vpush	{d8}
 8008010:	b08d      	sub	sp, #52	; 0x34
 8008012:	460c      	mov	r4, r1
 8008014:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008018:	4616      	mov	r6, r2
 800801a:	461f      	mov	r7, r3
 800801c:	4605      	mov	r5, r0
 800801e:	f000 fef7 	bl	8008e10 <_localeconv_r>
 8008022:	f8d0 a000 	ldr.w	sl, [r0]
 8008026:	4650      	mov	r0, sl
 8008028:	f7f8 f922 	bl	8000270 <strlen>
 800802c:	2300      	movs	r3, #0
 800802e:	930a      	str	r3, [sp, #40]	; 0x28
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	f8d8 3000 	ldr.w	r3, [r8]
 8008038:	f894 b018 	ldrb.w	fp, [r4, #24]
 800803c:	3307      	adds	r3, #7
 800803e:	f023 0307 	bic.w	r3, r3, #7
 8008042:	f103 0208 	add.w	r2, r3, #8
 8008046:	f8c8 2000 	str.w	r2, [r8]
 800804a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800804e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008052:	9307      	str	r3, [sp, #28]
 8008054:	f8cd 8018 	str.w	r8, [sp, #24]
 8008058:	ee08 0a10 	vmov	s16, r0
 800805c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008064:	4b9e      	ldr	r3, [pc, #632]	; (80082e0 <_printf_float+0x2d8>)
 8008066:	f04f 32ff 	mov.w	r2, #4294967295
 800806a:	f7f8 fd5f 	bl	8000b2c <__aeabi_dcmpun>
 800806e:	bb88      	cbnz	r0, 80080d4 <_printf_float+0xcc>
 8008070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008074:	4b9a      	ldr	r3, [pc, #616]	; (80082e0 <_printf_float+0x2d8>)
 8008076:	f04f 32ff 	mov.w	r2, #4294967295
 800807a:	f7f8 fd39 	bl	8000af0 <__aeabi_dcmple>
 800807e:	bb48      	cbnz	r0, 80080d4 <_printf_float+0xcc>
 8008080:	2200      	movs	r2, #0
 8008082:	2300      	movs	r3, #0
 8008084:	4640      	mov	r0, r8
 8008086:	4649      	mov	r1, r9
 8008088:	f7f8 fd28 	bl	8000adc <__aeabi_dcmplt>
 800808c:	b110      	cbz	r0, 8008094 <_printf_float+0x8c>
 800808e:	232d      	movs	r3, #45	; 0x2d
 8008090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008094:	4a93      	ldr	r2, [pc, #588]	; (80082e4 <_printf_float+0x2dc>)
 8008096:	4b94      	ldr	r3, [pc, #592]	; (80082e8 <_printf_float+0x2e0>)
 8008098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800809c:	bf94      	ite	ls
 800809e:	4690      	movls	r8, r2
 80080a0:	4698      	movhi	r8, r3
 80080a2:	2303      	movs	r3, #3
 80080a4:	6123      	str	r3, [r4, #16]
 80080a6:	9b05      	ldr	r3, [sp, #20]
 80080a8:	f023 0304 	bic.w	r3, r3, #4
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	f04f 0900 	mov.w	r9, #0
 80080b2:	9700      	str	r7, [sp, #0]
 80080b4:	4633      	mov	r3, r6
 80080b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80080b8:	4621      	mov	r1, r4
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 f9da 	bl	8008474 <_printf_common>
 80080c0:	3001      	adds	r0, #1
 80080c2:	f040 8090 	bne.w	80081e6 <_printf_float+0x1de>
 80080c6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ca:	b00d      	add	sp, #52	; 0x34
 80080cc:	ecbd 8b02 	vpop	{d8}
 80080d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d4:	4642      	mov	r2, r8
 80080d6:	464b      	mov	r3, r9
 80080d8:	4640      	mov	r0, r8
 80080da:	4649      	mov	r1, r9
 80080dc:	f7f8 fd26 	bl	8000b2c <__aeabi_dcmpun>
 80080e0:	b140      	cbz	r0, 80080f4 <_printf_float+0xec>
 80080e2:	464b      	mov	r3, r9
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bfbc      	itt	lt
 80080e8:	232d      	movlt	r3, #45	; 0x2d
 80080ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080ee:	4a7f      	ldr	r2, [pc, #508]	; (80082ec <_printf_float+0x2e4>)
 80080f0:	4b7f      	ldr	r3, [pc, #508]	; (80082f0 <_printf_float+0x2e8>)
 80080f2:	e7d1      	b.n	8008098 <_printf_float+0x90>
 80080f4:	6863      	ldr	r3, [r4, #4]
 80080f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80080fa:	9206      	str	r2, [sp, #24]
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	d13f      	bne.n	8008180 <_printf_float+0x178>
 8008100:	2306      	movs	r3, #6
 8008102:	6063      	str	r3, [r4, #4]
 8008104:	9b05      	ldr	r3, [sp, #20]
 8008106:	6861      	ldr	r1, [r4, #4]
 8008108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800810c:	2300      	movs	r3, #0
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	ab0a      	add	r3, sp, #40	; 0x28
 8008112:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008116:	ab09      	add	r3, sp, #36	; 0x24
 8008118:	ec49 8b10 	vmov	d0, r8, r9
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	6022      	str	r2, [r4, #0]
 8008120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008124:	4628      	mov	r0, r5
 8008126:	f7ff fece 	bl	8007ec6 <__cvt>
 800812a:	9b06      	ldr	r3, [sp, #24]
 800812c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800812e:	2b47      	cmp	r3, #71	; 0x47
 8008130:	4680      	mov	r8, r0
 8008132:	d108      	bne.n	8008146 <_printf_float+0x13e>
 8008134:	1cc8      	adds	r0, r1, #3
 8008136:	db02      	blt.n	800813e <_printf_float+0x136>
 8008138:	6863      	ldr	r3, [r4, #4]
 800813a:	4299      	cmp	r1, r3
 800813c:	dd41      	ble.n	80081c2 <_printf_float+0x1ba>
 800813e:	f1ab 0302 	sub.w	r3, fp, #2
 8008142:	fa5f fb83 	uxtb.w	fp, r3
 8008146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800814a:	d820      	bhi.n	800818e <_printf_float+0x186>
 800814c:	3901      	subs	r1, #1
 800814e:	465a      	mov	r2, fp
 8008150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008154:	9109      	str	r1, [sp, #36]	; 0x24
 8008156:	f7ff ff18 	bl	8007f8a <__exponent>
 800815a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800815c:	1813      	adds	r3, r2, r0
 800815e:	2a01      	cmp	r2, #1
 8008160:	4681      	mov	r9, r0
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	dc02      	bgt.n	800816c <_printf_float+0x164>
 8008166:	6822      	ldr	r2, [r4, #0]
 8008168:	07d2      	lsls	r2, r2, #31
 800816a:	d501      	bpl.n	8008170 <_printf_float+0x168>
 800816c:	3301      	adds	r3, #1
 800816e:	6123      	str	r3, [r4, #16]
 8008170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008174:	2b00      	cmp	r3, #0
 8008176:	d09c      	beq.n	80080b2 <_printf_float+0xaa>
 8008178:	232d      	movs	r3, #45	; 0x2d
 800817a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800817e:	e798      	b.n	80080b2 <_printf_float+0xaa>
 8008180:	9a06      	ldr	r2, [sp, #24]
 8008182:	2a47      	cmp	r2, #71	; 0x47
 8008184:	d1be      	bne.n	8008104 <_printf_float+0xfc>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1bc      	bne.n	8008104 <_printf_float+0xfc>
 800818a:	2301      	movs	r3, #1
 800818c:	e7b9      	b.n	8008102 <_printf_float+0xfa>
 800818e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008192:	d118      	bne.n	80081c6 <_printf_float+0x1be>
 8008194:	2900      	cmp	r1, #0
 8008196:	6863      	ldr	r3, [r4, #4]
 8008198:	dd0b      	ble.n	80081b2 <_printf_float+0x1aa>
 800819a:	6121      	str	r1, [r4, #16]
 800819c:	b913      	cbnz	r3, 80081a4 <_printf_float+0x19c>
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	07d0      	lsls	r0, r2, #31
 80081a2:	d502      	bpl.n	80081aa <_printf_float+0x1a2>
 80081a4:	3301      	adds	r3, #1
 80081a6:	440b      	add	r3, r1
 80081a8:	6123      	str	r3, [r4, #16]
 80081aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80081ac:	f04f 0900 	mov.w	r9, #0
 80081b0:	e7de      	b.n	8008170 <_printf_float+0x168>
 80081b2:	b913      	cbnz	r3, 80081ba <_printf_float+0x1b2>
 80081b4:	6822      	ldr	r2, [r4, #0]
 80081b6:	07d2      	lsls	r2, r2, #31
 80081b8:	d501      	bpl.n	80081be <_printf_float+0x1b6>
 80081ba:	3302      	adds	r3, #2
 80081bc:	e7f4      	b.n	80081a8 <_printf_float+0x1a0>
 80081be:	2301      	movs	r3, #1
 80081c0:	e7f2      	b.n	80081a8 <_printf_float+0x1a0>
 80081c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c8:	4299      	cmp	r1, r3
 80081ca:	db05      	blt.n	80081d8 <_printf_float+0x1d0>
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	6121      	str	r1, [r4, #16]
 80081d0:	07d8      	lsls	r0, r3, #31
 80081d2:	d5ea      	bpl.n	80081aa <_printf_float+0x1a2>
 80081d4:	1c4b      	adds	r3, r1, #1
 80081d6:	e7e7      	b.n	80081a8 <_printf_float+0x1a0>
 80081d8:	2900      	cmp	r1, #0
 80081da:	bfd4      	ite	le
 80081dc:	f1c1 0202 	rsble	r2, r1, #2
 80081e0:	2201      	movgt	r2, #1
 80081e2:	4413      	add	r3, r2
 80081e4:	e7e0      	b.n	80081a8 <_printf_float+0x1a0>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	055a      	lsls	r2, r3, #21
 80081ea:	d407      	bmi.n	80081fc <_printf_float+0x1f4>
 80081ec:	6923      	ldr	r3, [r4, #16]
 80081ee:	4642      	mov	r2, r8
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	d12c      	bne.n	8008254 <_printf_float+0x24c>
 80081fa:	e764      	b.n	80080c6 <_printf_float+0xbe>
 80081fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008200:	f240 80e0 	bls.w	80083c4 <_printf_float+0x3bc>
 8008204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008208:	2200      	movs	r2, #0
 800820a:	2300      	movs	r3, #0
 800820c:	f7f8 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008210:	2800      	cmp	r0, #0
 8008212:	d034      	beq.n	800827e <_printf_float+0x276>
 8008214:	4a37      	ldr	r2, [pc, #220]	; (80082f4 <_printf_float+0x2ec>)
 8008216:	2301      	movs	r3, #1
 8008218:	4631      	mov	r1, r6
 800821a:	4628      	mov	r0, r5
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	f43f af51 	beq.w	80080c6 <_printf_float+0xbe>
 8008224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008228:	429a      	cmp	r2, r3
 800822a:	db02      	blt.n	8008232 <_printf_float+0x22a>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	07d8      	lsls	r0, r3, #31
 8008230:	d510      	bpl.n	8008254 <_printf_float+0x24c>
 8008232:	ee18 3a10 	vmov	r3, s16
 8008236:	4652      	mov	r2, sl
 8008238:	4631      	mov	r1, r6
 800823a:	4628      	mov	r0, r5
 800823c:	47b8      	blx	r7
 800823e:	3001      	adds	r0, #1
 8008240:	f43f af41 	beq.w	80080c6 <_printf_float+0xbe>
 8008244:	f04f 0800 	mov.w	r8, #0
 8008248:	f104 091a 	add.w	r9, r4, #26
 800824c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824e:	3b01      	subs	r3, #1
 8008250:	4543      	cmp	r3, r8
 8008252:	dc09      	bgt.n	8008268 <_printf_float+0x260>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	079b      	lsls	r3, r3, #30
 8008258:	f100 8107 	bmi.w	800846a <_printf_float+0x462>
 800825c:	68e0      	ldr	r0, [r4, #12]
 800825e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008260:	4298      	cmp	r0, r3
 8008262:	bfb8      	it	lt
 8008264:	4618      	movlt	r0, r3
 8008266:	e730      	b.n	80080ca <_printf_float+0xc2>
 8008268:	2301      	movs	r3, #1
 800826a:	464a      	mov	r2, r9
 800826c:	4631      	mov	r1, r6
 800826e:	4628      	mov	r0, r5
 8008270:	47b8      	blx	r7
 8008272:	3001      	adds	r0, #1
 8008274:	f43f af27 	beq.w	80080c6 <_printf_float+0xbe>
 8008278:	f108 0801 	add.w	r8, r8, #1
 800827c:	e7e6      	b.n	800824c <_printf_float+0x244>
 800827e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	dc39      	bgt.n	80082f8 <_printf_float+0x2f0>
 8008284:	4a1b      	ldr	r2, [pc, #108]	; (80082f4 <_printf_float+0x2ec>)
 8008286:	2301      	movs	r3, #1
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	47b8      	blx	r7
 800828e:	3001      	adds	r0, #1
 8008290:	f43f af19 	beq.w	80080c6 <_printf_float+0xbe>
 8008294:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008298:	4313      	orrs	r3, r2
 800829a:	d102      	bne.n	80082a2 <_printf_float+0x29a>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	07d9      	lsls	r1, r3, #31
 80082a0:	d5d8      	bpl.n	8008254 <_printf_float+0x24c>
 80082a2:	ee18 3a10 	vmov	r3, s16
 80082a6:	4652      	mov	r2, sl
 80082a8:	4631      	mov	r1, r6
 80082aa:	4628      	mov	r0, r5
 80082ac:	47b8      	blx	r7
 80082ae:	3001      	adds	r0, #1
 80082b0:	f43f af09 	beq.w	80080c6 <_printf_float+0xbe>
 80082b4:	f04f 0900 	mov.w	r9, #0
 80082b8:	f104 0a1a 	add.w	sl, r4, #26
 80082bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082be:	425b      	negs	r3, r3
 80082c0:	454b      	cmp	r3, r9
 80082c2:	dc01      	bgt.n	80082c8 <_printf_float+0x2c0>
 80082c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c6:	e792      	b.n	80081ee <_printf_float+0x1e6>
 80082c8:	2301      	movs	r3, #1
 80082ca:	4652      	mov	r2, sl
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	f43f aef7 	beq.w	80080c6 <_printf_float+0xbe>
 80082d8:	f109 0901 	add.w	r9, r9, #1
 80082dc:	e7ee      	b.n	80082bc <_printf_float+0x2b4>
 80082de:	bf00      	nop
 80082e0:	7fefffff 	.word	0x7fefffff
 80082e4:	0800c700 	.word	0x0800c700
 80082e8:	0800c704 	.word	0x0800c704
 80082ec:	0800c708 	.word	0x0800c708
 80082f0:	0800c70c 	.word	0x0800c70c
 80082f4:	0800c710 	.word	0x0800c710
 80082f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082fc:	429a      	cmp	r2, r3
 80082fe:	bfa8      	it	ge
 8008300:	461a      	movge	r2, r3
 8008302:	2a00      	cmp	r2, #0
 8008304:	4691      	mov	r9, r2
 8008306:	dc37      	bgt.n	8008378 <_printf_float+0x370>
 8008308:	f04f 0b00 	mov.w	fp, #0
 800830c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008310:	f104 021a 	add.w	r2, r4, #26
 8008314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008316:	9305      	str	r3, [sp, #20]
 8008318:	eba3 0309 	sub.w	r3, r3, r9
 800831c:	455b      	cmp	r3, fp
 800831e:	dc33      	bgt.n	8008388 <_printf_float+0x380>
 8008320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008324:	429a      	cmp	r2, r3
 8008326:	db3b      	blt.n	80083a0 <_printf_float+0x398>
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	07da      	lsls	r2, r3, #31
 800832c:	d438      	bmi.n	80083a0 <_printf_float+0x398>
 800832e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008332:	eba2 0903 	sub.w	r9, r2, r3
 8008336:	9b05      	ldr	r3, [sp, #20]
 8008338:	1ad2      	subs	r2, r2, r3
 800833a:	4591      	cmp	r9, r2
 800833c:	bfa8      	it	ge
 800833e:	4691      	movge	r9, r2
 8008340:	f1b9 0f00 	cmp.w	r9, #0
 8008344:	dc35      	bgt.n	80083b2 <_printf_float+0x3aa>
 8008346:	f04f 0800 	mov.w	r8, #0
 800834a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800834e:	f104 0a1a 	add.w	sl, r4, #26
 8008352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008356:	1a9b      	subs	r3, r3, r2
 8008358:	eba3 0309 	sub.w	r3, r3, r9
 800835c:	4543      	cmp	r3, r8
 800835e:	f77f af79 	ble.w	8008254 <_printf_float+0x24c>
 8008362:	2301      	movs	r3, #1
 8008364:	4652      	mov	r2, sl
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	47b8      	blx	r7
 800836c:	3001      	adds	r0, #1
 800836e:	f43f aeaa 	beq.w	80080c6 <_printf_float+0xbe>
 8008372:	f108 0801 	add.w	r8, r8, #1
 8008376:	e7ec      	b.n	8008352 <_printf_float+0x34a>
 8008378:	4613      	mov	r3, r2
 800837a:	4631      	mov	r1, r6
 800837c:	4642      	mov	r2, r8
 800837e:	4628      	mov	r0, r5
 8008380:	47b8      	blx	r7
 8008382:	3001      	adds	r0, #1
 8008384:	d1c0      	bne.n	8008308 <_printf_float+0x300>
 8008386:	e69e      	b.n	80080c6 <_printf_float+0xbe>
 8008388:	2301      	movs	r3, #1
 800838a:	4631      	mov	r1, r6
 800838c:	4628      	mov	r0, r5
 800838e:	9205      	str	r2, [sp, #20]
 8008390:	47b8      	blx	r7
 8008392:	3001      	adds	r0, #1
 8008394:	f43f ae97 	beq.w	80080c6 <_printf_float+0xbe>
 8008398:	9a05      	ldr	r2, [sp, #20]
 800839a:	f10b 0b01 	add.w	fp, fp, #1
 800839e:	e7b9      	b.n	8008314 <_printf_float+0x30c>
 80083a0:	ee18 3a10 	vmov	r3, s16
 80083a4:	4652      	mov	r2, sl
 80083a6:	4631      	mov	r1, r6
 80083a8:	4628      	mov	r0, r5
 80083aa:	47b8      	blx	r7
 80083ac:	3001      	adds	r0, #1
 80083ae:	d1be      	bne.n	800832e <_printf_float+0x326>
 80083b0:	e689      	b.n	80080c6 <_printf_float+0xbe>
 80083b2:	9a05      	ldr	r2, [sp, #20]
 80083b4:	464b      	mov	r3, r9
 80083b6:	4442      	add	r2, r8
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	d1c1      	bne.n	8008346 <_printf_float+0x33e>
 80083c2:	e680      	b.n	80080c6 <_printf_float+0xbe>
 80083c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083c6:	2a01      	cmp	r2, #1
 80083c8:	dc01      	bgt.n	80083ce <_printf_float+0x3c6>
 80083ca:	07db      	lsls	r3, r3, #31
 80083cc:	d53a      	bpl.n	8008444 <_printf_float+0x43c>
 80083ce:	2301      	movs	r3, #1
 80083d0:	4642      	mov	r2, r8
 80083d2:	4631      	mov	r1, r6
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b8      	blx	r7
 80083d8:	3001      	adds	r0, #1
 80083da:	f43f ae74 	beq.w	80080c6 <_printf_float+0xbe>
 80083de:	ee18 3a10 	vmov	r3, s16
 80083e2:	4652      	mov	r2, sl
 80083e4:	4631      	mov	r1, r6
 80083e6:	4628      	mov	r0, r5
 80083e8:	47b8      	blx	r7
 80083ea:	3001      	adds	r0, #1
 80083ec:	f43f ae6b 	beq.w	80080c6 <_printf_float+0xbe>
 80083f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083f4:	2200      	movs	r2, #0
 80083f6:	2300      	movs	r3, #0
 80083f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80083fc:	f7f8 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8008400:	b9d8      	cbnz	r0, 800843a <_printf_float+0x432>
 8008402:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008406:	f108 0201 	add.w	r2, r8, #1
 800840a:	4631      	mov	r1, r6
 800840c:	4628      	mov	r0, r5
 800840e:	47b8      	blx	r7
 8008410:	3001      	adds	r0, #1
 8008412:	d10e      	bne.n	8008432 <_printf_float+0x42a>
 8008414:	e657      	b.n	80080c6 <_printf_float+0xbe>
 8008416:	2301      	movs	r3, #1
 8008418:	4652      	mov	r2, sl
 800841a:	4631      	mov	r1, r6
 800841c:	4628      	mov	r0, r5
 800841e:	47b8      	blx	r7
 8008420:	3001      	adds	r0, #1
 8008422:	f43f ae50 	beq.w	80080c6 <_printf_float+0xbe>
 8008426:	f108 0801 	add.w	r8, r8, #1
 800842a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800842c:	3b01      	subs	r3, #1
 800842e:	4543      	cmp	r3, r8
 8008430:	dcf1      	bgt.n	8008416 <_printf_float+0x40e>
 8008432:	464b      	mov	r3, r9
 8008434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008438:	e6da      	b.n	80081f0 <_printf_float+0x1e8>
 800843a:	f04f 0800 	mov.w	r8, #0
 800843e:	f104 0a1a 	add.w	sl, r4, #26
 8008442:	e7f2      	b.n	800842a <_printf_float+0x422>
 8008444:	2301      	movs	r3, #1
 8008446:	4642      	mov	r2, r8
 8008448:	e7df      	b.n	800840a <_printf_float+0x402>
 800844a:	2301      	movs	r3, #1
 800844c:	464a      	mov	r2, r9
 800844e:	4631      	mov	r1, r6
 8008450:	4628      	mov	r0, r5
 8008452:	47b8      	blx	r7
 8008454:	3001      	adds	r0, #1
 8008456:	f43f ae36 	beq.w	80080c6 <_printf_float+0xbe>
 800845a:	f108 0801 	add.w	r8, r8, #1
 800845e:	68e3      	ldr	r3, [r4, #12]
 8008460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008462:	1a5b      	subs	r3, r3, r1
 8008464:	4543      	cmp	r3, r8
 8008466:	dcf0      	bgt.n	800844a <_printf_float+0x442>
 8008468:	e6f8      	b.n	800825c <_printf_float+0x254>
 800846a:	f04f 0800 	mov.w	r8, #0
 800846e:	f104 0919 	add.w	r9, r4, #25
 8008472:	e7f4      	b.n	800845e <_printf_float+0x456>

08008474 <_printf_common>:
 8008474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008478:	4616      	mov	r6, r2
 800847a:	4699      	mov	r9, r3
 800847c:	688a      	ldr	r2, [r1, #8]
 800847e:	690b      	ldr	r3, [r1, #16]
 8008480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008484:	4293      	cmp	r3, r2
 8008486:	bfb8      	it	lt
 8008488:	4613      	movlt	r3, r2
 800848a:	6033      	str	r3, [r6, #0]
 800848c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008490:	4607      	mov	r7, r0
 8008492:	460c      	mov	r4, r1
 8008494:	b10a      	cbz	r2, 800849a <_printf_common+0x26>
 8008496:	3301      	adds	r3, #1
 8008498:	6033      	str	r3, [r6, #0]
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	0699      	lsls	r1, r3, #26
 800849e:	bf42      	ittt	mi
 80084a0:	6833      	ldrmi	r3, [r6, #0]
 80084a2:	3302      	addmi	r3, #2
 80084a4:	6033      	strmi	r3, [r6, #0]
 80084a6:	6825      	ldr	r5, [r4, #0]
 80084a8:	f015 0506 	ands.w	r5, r5, #6
 80084ac:	d106      	bne.n	80084bc <_printf_common+0x48>
 80084ae:	f104 0a19 	add.w	sl, r4, #25
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	6832      	ldr	r2, [r6, #0]
 80084b6:	1a9b      	subs	r3, r3, r2
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dc26      	bgt.n	800850a <_printf_common+0x96>
 80084bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084c0:	1e13      	subs	r3, r2, #0
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	bf18      	it	ne
 80084c6:	2301      	movne	r3, #1
 80084c8:	0692      	lsls	r2, r2, #26
 80084ca:	d42b      	bmi.n	8008524 <_printf_common+0xb0>
 80084cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d0:	4649      	mov	r1, r9
 80084d2:	4638      	mov	r0, r7
 80084d4:	47c0      	blx	r8
 80084d6:	3001      	adds	r0, #1
 80084d8:	d01e      	beq.n	8008518 <_printf_common+0xa4>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	6922      	ldr	r2, [r4, #16]
 80084de:	f003 0306 	and.w	r3, r3, #6
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	bf02      	ittt	eq
 80084e6:	68e5      	ldreq	r5, [r4, #12]
 80084e8:	6833      	ldreq	r3, [r6, #0]
 80084ea:	1aed      	subeq	r5, r5, r3
 80084ec:	68a3      	ldr	r3, [r4, #8]
 80084ee:	bf0c      	ite	eq
 80084f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084f4:	2500      	movne	r5, #0
 80084f6:	4293      	cmp	r3, r2
 80084f8:	bfc4      	itt	gt
 80084fa:	1a9b      	subgt	r3, r3, r2
 80084fc:	18ed      	addgt	r5, r5, r3
 80084fe:	2600      	movs	r6, #0
 8008500:	341a      	adds	r4, #26
 8008502:	42b5      	cmp	r5, r6
 8008504:	d11a      	bne.n	800853c <_printf_common+0xc8>
 8008506:	2000      	movs	r0, #0
 8008508:	e008      	b.n	800851c <_printf_common+0xa8>
 800850a:	2301      	movs	r3, #1
 800850c:	4652      	mov	r2, sl
 800850e:	4649      	mov	r1, r9
 8008510:	4638      	mov	r0, r7
 8008512:	47c0      	blx	r8
 8008514:	3001      	adds	r0, #1
 8008516:	d103      	bne.n	8008520 <_printf_common+0xac>
 8008518:	f04f 30ff 	mov.w	r0, #4294967295
 800851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008520:	3501      	adds	r5, #1
 8008522:	e7c6      	b.n	80084b2 <_printf_common+0x3e>
 8008524:	18e1      	adds	r1, r4, r3
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	2030      	movs	r0, #48	; 0x30
 800852a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800852e:	4422      	add	r2, r4
 8008530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008538:	3302      	adds	r3, #2
 800853a:	e7c7      	b.n	80084cc <_printf_common+0x58>
 800853c:	2301      	movs	r3, #1
 800853e:	4622      	mov	r2, r4
 8008540:	4649      	mov	r1, r9
 8008542:	4638      	mov	r0, r7
 8008544:	47c0      	blx	r8
 8008546:	3001      	adds	r0, #1
 8008548:	d0e6      	beq.n	8008518 <_printf_common+0xa4>
 800854a:	3601      	adds	r6, #1
 800854c:	e7d9      	b.n	8008502 <_printf_common+0x8e>
	...

08008550 <_printf_i>:
 8008550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	7e0f      	ldrb	r7, [r1, #24]
 8008556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008558:	2f78      	cmp	r7, #120	; 0x78
 800855a:	4691      	mov	r9, r2
 800855c:	4680      	mov	r8, r0
 800855e:	460c      	mov	r4, r1
 8008560:	469a      	mov	sl, r3
 8008562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008566:	d807      	bhi.n	8008578 <_printf_i+0x28>
 8008568:	2f62      	cmp	r7, #98	; 0x62
 800856a:	d80a      	bhi.n	8008582 <_printf_i+0x32>
 800856c:	2f00      	cmp	r7, #0
 800856e:	f000 80d4 	beq.w	800871a <_printf_i+0x1ca>
 8008572:	2f58      	cmp	r7, #88	; 0x58
 8008574:	f000 80c0 	beq.w	80086f8 <_printf_i+0x1a8>
 8008578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800857c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008580:	e03a      	b.n	80085f8 <_printf_i+0xa8>
 8008582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008586:	2b15      	cmp	r3, #21
 8008588:	d8f6      	bhi.n	8008578 <_printf_i+0x28>
 800858a:	a101      	add	r1, pc, #4	; (adr r1, 8008590 <_printf_i+0x40>)
 800858c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008590:	080085e9 	.word	0x080085e9
 8008594:	080085fd 	.word	0x080085fd
 8008598:	08008579 	.word	0x08008579
 800859c:	08008579 	.word	0x08008579
 80085a0:	08008579 	.word	0x08008579
 80085a4:	08008579 	.word	0x08008579
 80085a8:	080085fd 	.word	0x080085fd
 80085ac:	08008579 	.word	0x08008579
 80085b0:	08008579 	.word	0x08008579
 80085b4:	08008579 	.word	0x08008579
 80085b8:	08008579 	.word	0x08008579
 80085bc:	08008701 	.word	0x08008701
 80085c0:	08008629 	.word	0x08008629
 80085c4:	080086bb 	.word	0x080086bb
 80085c8:	08008579 	.word	0x08008579
 80085cc:	08008579 	.word	0x08008579
 80085d0:	08008723 	.word	0x08008723
 80085d4:	08008579 	.word	0x08008579
 80085d8:	08008629 	.word	0x08008629
 80085dc:	08008579 	.word	0x08008579
 80085e0:	08008579 	.word	0x08008579
 80085e4:	080086c3 	.word	0x080086c3
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	1d1a      	adds	r2, r3, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	602a      	str	r2, [r5, #0]
 80085f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085f8:	2301      	movs	r3, #1
 80085fa:	e09f      	b.n	800873c <_printf_i+0x1ec>
 80085fc:	6820      	ldr	r0, [r4, #0]
 80085fe:	682b      	ldr	r3, [r5, #0]
 8008600:	0607      	lsls	r7, r0, #24
 8008602:	f103 0104 	add.w	r1, r3, #4
 8008606:	6029      	str	r1, [r5, #0]
 8008608:	d501      	bpl.n	800860e <_printf_i+0xbe>
 800860a:	681e      	ldr	r6, [r3, #0]
 800860c:	e003      	b.n	8008616 <_printf_i+0xc6>
 800860e:	0646      	lsls	r6, r0, #25
 8008610:	d5fb      	bpl.n	800860a <_printf_i+0xba>
 8008612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008616:	2e00      	cmp	r6, #0
 8008618:	da03      	bge.n	8008622 <_printf_i+0xd2>
 800861a:	232d      	movs	r3, #45	; 0x2d
 800861c:	4276      	negs	r6, r6
 800861e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008622:	485a      	ldr	r0, [pc, #360]	; (800878c <_printf_i+0x23c>)
 8008624:	230a      	movs	r3, #10
 8008626:	e012      	b.n	800864e <_printf_i+0xfe>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	6820      	ldr	r0, [r4, #0]
 800862c:	1d19      	adds	r1, r3, #4
 800862e:	6029      	str	r1, [r5, #0]
 8008630:	0605      	lsls	r5, r0, #24
 8008632:	d501      	bpl.n	8008638 <_printf_i+0xe8>
 8008634:	681e      	ldr	r6, [r3, #0]
 8008636:	e002      	b.n	800863e <_printf_i+0xee>
 8008638:	0641      	lsls	r1, r0, #25
 800863a:	d5fb      	bpl.n	8008634 <_printf_i+0xe4>
 800863c:	881e      	ldrh	r6, [r3, #0]
 800863e:	4853      	ldr	r0, [pc, #332]	; (800878c <_printf_i+0x23c>)
 8008640:	2f6f      	cmp	r7, #111	; 0x6f
 8008642:	bf0c      	ite	eq
 8008644:	2308      	moveq	r3, #8
 8008646:	230a      	movne	r3, #10
 8008648:	2100      	movs	r1, #0
 800864a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800864e:	6865      	ldr	r5, [r4, #4]
 8008650:	60a5      	str	r5, [r4, #8]
 8008652:	2d00      	cmp	r5, #0
 8008654:	bfa2      	ittt	ge
 8008656:	6821      	ldrge	r1, [r4, #0]
 8008658:	f021 0104 	bicge.w	r1, r1, #4
 800865c:	6021      	strge	r1, [r4, #0]
 800865e:	b90e      	cbnz	r6, 8008664 <_printf_i+0x114>
 8008660:	2d00      	cmp	r5, #0
 8008662:	d04b      	beq.n	80086fc <_printf_i+0x1ac>
 8008664:	4615      	mov	r5, r2
 8008666:	fbb6 f1f3 	udiv	r1, r6, r3
 800866a:	fb03 6711 	mls	r7, r3, r1, r6
 800866e:	5dc7      	ldrb	r7, [r0, r7]
 8008670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008674:	4637      	mov	r7, r6
 8008676:	42bb      	cmp	r3, r7
 8008678:	460e      	mov	r6, r1
 800867a:	d9f4      	bls.n	8008666 <_printf_i+0x116>
 800867c:	2b08      	cmp	r3, #8
 800867e:	d10b      	bne.n	8008698 <_printf_i+0x148>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	07de      	lsls	r6, r3, #31
 8008684:	d508      	bpl.n	8008698 <_printf_i+0x148>
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	6861      	ldr	r1, [r4, #4]
 800868a:	4299      	cmp	r1, r3
 800868c:	bfde      	ittt	le
 800868e:	2330      	movle	r3, #48	; 0x30
 8008690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008698:	1b52      	subs	r2, r2, r5
 800869a:	6122      	str	r2, [r4, #16]
 800869c:	f8cd a000 	str.w	sl, [sp]
 80086a0:	464b      	mov	r3, r9
 80086a2:	aa03      	add	r2, sp, #12
 80086a4:	4621      	mov	r1, r4
 80086a6:	4640      	mov	r0, r8
 80086a8:	f7ff fee4 	bl	8008474 <_printf_common>
 80086ac:	3001      	adds	r0, #1
 80086ae:	d14a      	bne.n	8008746 <_printf_i+0x1f6>
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295
 80086b4:	b004      	add	sp, #16
 80086b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	f043 0320 	orr.w	r3, r3, #32
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	4833      	ldr	r0, [pc, #204]	; (8008790 <_printf_i+0x240>)
 80086c4:	2778      	movs	r7, #120	; 0x78
 80086c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	6829      	ldr	r1, [r5, #0]
 80086ce:	061f      	lsls	r7, r3, #24
 80086d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80086d4:	d402      	bmi.n	80086dc <_printf_i+0x18c>
 80086d6:	065f      	lsls	r7, r3, #25
 80086d8:	bf48      	it	mi
 80086da:	b2b6      	uxthmi	r6, r6
 80086dc:	07df      	lsls	r7, r3, #31
 80086de:	bf48      	it	mi
 80086e0:	f043 0320 	orrmi.w	r3, r3, #32
 80086e4:	6029      	str	r1, [r5, #0]
 80086e6:	bf48      	it	mi
 80086e8:	6023      	strmi	r3, [r4, #0]
 80086ea:	b91e      	cbnz	r6, 80086f4 <_printf_i+0x1a4>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	f023 0320 	bic.w	r3, r3, #32
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	2310      	movs	r3, #16
 80086f6:	e7a7      	b.n	8008648 <_printf_i+0xf8>
 80086f8:	4824      	ldr	r0, [pc, #144]	; (800878c <_printf_i+0x23c>)
 80086fa:	e7e4      	b.n	80086c6 <_printf_i+0x176>
 80086fc:	4615      	mov	r5, r2
 80086fe:	e7bd      	b.n	800867c <_printf_i+0x12c>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	6826      	ldr	r6, [r4, #0]
 8008704:	6961      	ldr	r1, [r4, #20]
 8008706:	1d18      	adds	r0, r3, #4
 8008708:	6028      	str	r0, [r5, #0]
 800870a:	0635      	lsls	r5, r6, #24
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	d501      	bpl.n	8008714 <_printf_i+0x1c4>
 8008710:	6019      	str	r1, [r3, #0]
 8008712:	e002      	b.n	800871a <_printf_i+0x1ca>
 8008714:	0670      	lsls	r0, r6, #25
 8008716:	d5fb      	bpl.n	8008710 <_printf_i+0x1c0>
 8008718:	8019      	strh	r1, [r3, #0]
 800871a:	2300      	movs	r3, #0
 800871c:	6123      	str	r3, [r4, #16]
 800871e:	4615      	mov	r5, r2
 8008720:	e7bc      	b.n	800869c <_printf_i+0x14c>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	1d1a      	adds	r2, r3, #4
 8008726:	602a      	str	r2, [r5, #0]
 8008728:	681d      	ldr	r5, [r3, #0]
 800872a:	6862      	ldr	r2, [r4, #4]
 800872c:	2100      	movs	r1, #0
 800872e:	4628      	mov	r0, r5
 8008730:	f7f7 fd4e 	bl	80001d0 <memchr>
 8008734:	b108      	cbz	r0, 800873a <_printf_i+0x1ea>
 8008736:	1b40      	subs	r0, r0, r5
 8008738:	6060      	str	r0, [r4, #4]
 800873a:	6863      	ldr	r3, [r4, #4]
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	2300      	movs	r3, #0
 8008740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008744:	e7aa      	b.n	800869c <_printf_i+0x14c>
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	462a      	mov	r2, r5
 800874a:	4649      	mov	r1, r9
 800874c:	4640      	mov	r0, r8
 800874e:	47d0      	blx	sl
 8008750:	3001      	adds	r0, #1
 8008752:	d0ad      	beq.n	80086b0 <_printf_i+0x160>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	079b      	lsls	r3, r3, #30
 8008758:	d413      	bmi.n	8008782 <_printf_i+0x232>
 800875a:	68e0      	ldr	r0, [r4, #12]
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	4298      	cmp	r0, r3
 8008760:	bfb8      	it	lt
 8008762:	4618      	movlt	r0, r3
 8008764:	e7a6      	b.n	80086b4 <_printf_i+0x164>
 8008766:	2301      	movs	r3, #1
 8008768:	4632      	mov	r2, r6
 800876a:	4649      	mov	r1, r9
 800876c:	4640      	mov	r0, r8
 800876e:	47d0      	blx	sl
 8008770:	3001      	adds	r0, #1
 8008772:	d09d      	beq.n	80086b0 <_printf_i+0x160>
 8008774:	3501      	adds	r5, #1
 8008776:	68e3      	ldr	r3, [r4, #12]
 8008778:	9903      	ldr	r1, [sp, #12]
 800877a:	1a5b      	subs	r3, r3, r1
 800877c:	42ab      	cmp	r3, r5
 800877e:	dcf2      	bgt.n	8008766 <_printf_i+0x216>
 8008780:	e7eb      	b.n	800875a <_printf_i+0x20a>
 8008782:	2500      	movs	r5, #0
 8008784:	f104 0619 	add.w	r6, r4, #25
 8008788:	e7f5      	b.n	8008776 <_printf_i+0x226>
 800878a:	bf00      	nop
 800878c:	0800c712 	.word	0x0800c712
 8008790:	0800c723 	.word	0x0800c723

08008794 <_scanf_float>:
 8008794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008798:	b087      	sub	sp, #28
 800879a:	4617      	mov	r7, r2
 800879c:	9303      	str	r3, [sp, #12]
 800879e:	688b      	ldr	r3, [r1, #8]
 80087a0:	1e5a      	subs	r2, r3, #1
 80087a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80087a6:	bf83      	ittte	hi
 80087a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80087ac:	195b      	addhi	r3, r3, r5
 80087ae:	9302      	strhi	r3, [sp, #8]
 80087b0:	2300      	movls	r3, #0
 80087b2:	bf86      	itte	hi
 80087b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80087b8:	608b      	strhi	r3, [r1, #8]
 80087ba:	9302      	strls	r3, [sp, #8]
 80087bc:	680b      	ldr	r3, [r1, #0]
 80087be:	468b      	mov	fp, r1
 80087c0:	2500      	movs	r5, #0
 80087c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80087c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80087ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80087ce:	4680      	mov	r8, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	465e      	mov	r6, fp
 80087d4:	46aa      	mov	sl, r5
 80087d6:	46a9      	mov	r9, r5
 80087d8:	9501      	str	r5, [sp, #4]
 80087da:	68a2      	ldr	r2, [r4, #8]
 80087dc:	b152      	cbz	r2, 80087f4 <_scanf_float+0x60>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b4e      	cmp	r3, #78	; 0x4e
 80087e4:	d864      	bhi.n	80088b0 <_scanf_float+0x11c>
 80087e6:	2b40      	cmp	r3, #64	; 0x40
 80087e8:	d83c      	bhi.n	8008864 <_scanf_float+0xd0>
 80087ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80087ee:	b2c8      	uxtb	r0, r1
 80087f0:	280e      	cmp	r0, #14
 80087f2:	d93a      	bls.n	800886a <_scanf_float+0xd6>
 80087f4:	f1b9 0f00 	cmp.w	r9, #0
 80087f8:	d003      	beq.n	8008802 <_scanf_float+0x6e>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008806:	f1ba 0f01 	cmp.w	sl, #1
 800880a:	f200 8113 	bhi.w	8008a34 <_scanf_float+0x2a0>
 800880e:	455e      	cmp	r6, fp
 8008810:	f200 8105 	bhi.w	8008a1e <_scanf_float+0x28a>
 8008814:	2501      	movs	r5, #1
 8008816:	4628      	mov	r0, r5
 8008818:	b007      	add	sp, #28
 800881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008822:	2a0d      	cmp	r2, #13
 8008824:	d8e6      	bhi.n	80087f4 <_scanf_float+0x60>
 8008826:	a101      	add	r1, pc, #4	; (adr r1, 800882c <_scanf_float+0x98>)
 8008828:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800882c:	0800896b 	.word	0x0800896b
 8008830:	080087f5 	.word	0x080087f5
 8008834:	080087f5 	.word	0x080087f5
 8008838:	080087f5 	.word	0x080087f5
 800883c:	080089cb 	.word	0x080089cb
 8008840:	080089a3 	.word	0x080089a3
 8008844:	080087f5 	.word	0x080087f5
 8008848:	080087f5 	.word	0x080087f5
 800884c:	08008979 	.word	0x08008979
 8008850:	080087f5 	.word	0x080087f5
 8008854:	080087f5 	.word	0x080087f5
 8008858:	080087f5 	.word	0x080087f5
 800885c:	080087f5 	.word	0x080087f5
 8008860:	08008931 	.word	0x08008931
 8008864:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008868:	e7db      	b.n	8008822 <_scanf_float+0x8e>
 800886a:	290e      	cmp	r1, #14
 800886c:	d8c2      	bhi.n	80087f4 <_scanf_float+0x60>
 800886e:	a001      	add	r0, pc, #4	; (adr r0, 8008874 <_scanf_float+0xe0>)
 8008870:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008874:	08008923 	.word	0x08008923
 8008878:	080087f5 	.word	0x080087f5
 800887c:	08008923 	.word	0x08008923
 8008880:	080089b7 	.word	0x080089b7
 8008884:	080087f5 	.word	0x080087f5
 8008888:	080088d1 	.word	0x080088d1
 800888c:	0800890d 	.word	0x0800890d
 8008890:	0800890d 	.word	0x0800890d
 8008894:	0800890d 	.word	0x0800890d
 8008898:	0800890d 	.word	0x0800890d
 800889c:	0800890d 	.word	0x0800890d
 80088a0:	0800890d 	.word	0x0800890d
 80088a4:	0800890d 	.word	0x0800890d
 80088a8:	0800890d 	.word	0x0800890d
 80088ac:	0800890d 	.word	0x0800890d
 80088b0:	2b6e      	cmp	r3, #110	; 0x6e
 80088b2:	d809      	bhi.n	80088c8 <_scanf_float+0x134>
 80088b4:	2b60      	cmp	r3, #96	; 0x60
 80088b6:	d8b2      	bhi.n	800881e <_scanf_float+0x8a>
 80088b8:	2b54      	cmp	r3, #84	; 0x54
 80088ba:	d077      	beq.n	80089ac <_scanf_float+0x218>
 80088bc:	2b59      	cmp	r3, #89	; 0x59
 80088be:	d199      	bne.n	80087f4 <_scanf_float+0x60>
 80088c0:	2d07      	cmp	r5, #7
 80088c2:	d197      	bne.n	80087f4 <_scanf_float+0x60>
 80088c4:	2508      	movs	r5, #8
 80088c6:	e029      	b.n	800891c <_scanf_float+0x188>
 80088c8:	2b74      	cmp	r3, #116	; 0x74
 80088ca:	d06f      	beq.n	80089ac <_scanf_float+0x218>
 80088cc:	2b79      	cmp	r3, #121	; 0x79
 80088ce:	e7f6      	b.n	80088be <_scanf_float+0x12a>
 80088d0:	6821      	ldr	r1, [r4, #0]
 80088d2:	05c8      	lsls	r0, r1, #23
 80088d4:	d51a      	bpl.n	800890c <_scanf_float+0x178>
 80088d6:	9b02      	ldr	r3, [sp, #8]
 80088d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80088dc:	6021      	str	r1, [r4, #0]
 80088de:	f109 0901 	add.w	r9, r9, #1
 80088e2:	b11b      	cbz	r3, 80088ec <_scanf_float+0x158>
 80088e4:	3b01      	subs	r3, #1
 80088e6:	3201      	adds	r2, #1
 80088e8:	9302      	str	r3, [sp, #8]
 80088ea:	60a2      	str	r2, [r4, #8]
 80088ec:	68a3      	ldr	r3, [r4, #8]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	60a3      	str	r3, [r4, #8]
 80088f2:	6923      	ldr	r3, [r4, #16]
 80088f4:	3301      	adds	r3, #1
 80088f6:	6123      	str	r3, [r4, #16]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	607b      	str	r3, [r7, #4]
 8008900:	f340 8084 	ble.w	8008a0c <_scanf_float+0x278>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	603b      	str	r3, [r7, #0]
 800890a:	e766      	b.n	80087da <_scanf_float+0x46>
 800890c:	eb1a 0f05 	cmn.w	sl, r5
 8008910:	f47f af70 	bne.w	80087f4 <_scanf_float+0x60>
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800891a:	6022      	str	r2, [r4, #0]
 800891c:	f806 3b01 	strb.w	r3, [r6], #1
 8008920:	e7e4      	b.n	80088ec <_scanf_float+0x158>
 8008922:	6822      	ldr	r2, [r4, #0]
 8008924:	0610      	lsls	r0, r2, #24
 8008926:	f57f af65 	bpl.w	80087f4 <_scanf_float+0x60>
 800892a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800892e:	e7f4      	b.n	800891a <_scanf_float+0x186>
 8008930:	f1ba 0f00 	cmp.w	sl, #0
 8008934:	d10e      	bne.n	8008954 <_scanf_float+0x1c0>
 8008936:	f1b9 0f00 	cmp.w	r9, #0
 800893a:	d10e      	bne.n	800895a <_scanf_float+0x1c6>
 800893c:	6822      	ldr	r2, [r4, #0]
 800893e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008942:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008946:	d108      	bne.n	800895a <_scanf_float+0x1c6>
 8008948:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800894c:	6022      	str	r2, [r4, #0]
 800894e:	f04f 0a01 	mov.w	sl, #1
 8008952:	e7e3      	b.n	800891c <_scanf_float+0x188>
 8008954:	f1ba 0f02 	cmp.w	sl, #2
 8008958:	d055      	beq.n	8008a06 <_scanf_float+0x272>
 800895a:	2d01      	cmp	r5, #1
 800895c:	d002      	beq.n	8008964 <_scanf_float+0x1d0>
 800895e:	2d04      	cmp	r5, #4
 8008960:	f47f af48 	bne.w	80087f4 <_scanf_float+0x60>
 8008964:	3501      	adds	r5, #1
 8008966:	b2ed      	uxtb	r5, r5
 8008968:	e7d8      	b.n	800891c <_scanf_float+0x188>
 800896a:	f1ba 0f01 	cmp.w	sl, #1
 800896e:	f47f af41 	bne.w	80087f4 <_scanf_float+0x60>
 8008972:	f04f 0a02 	mov.w	sl, #2
 8008976:	e7d1      	b.n	800891c <_scanf_float+0x188>
 8008978:	b97d      	cbnz	r5, 800899a <_scanf_float+0x206>
 800897a:	f1b9 0f00 	cmp.w	r9, #0
 800897e:	f47f af3c 	bne.w	80087fa <_scanf_float+0x66>
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008988:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800898c:	f47f af39 	bne.w	8008802 <_scanf_float+0x6e>
 8008990:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008994:	6022      	str	r2, [r4, #0]
 8008996:	2501      	movs	r5, #1
 8008998:	e7c0      	b.n	800891c <_scanf_float+0x188>
 800899a:	2d03      	cmp	r5, #3
 800899c:	d0e2      	beq.n	8008964 <_scanf_float+0x1d0>
 800899e:	2d05      	cmp	r5, #5
 80089a0:	e7de      	b.n	8008960 <_scanf_float+0x1cc>
 80089a2:	2d02      	cmp	r5, #2
 80089a4:	f47f af26 	bne.w	80087f4 <_scanf_float+0x60>
 80089a8:	2503      	movs	r5, #3
 80089aa:	e7b7      	b.n	800891c <_scanf_float+0x188>
 80089ac:	2d06      	cmp	r5, #6
 80089ae:	f47f af21 	bne.w	80087f4 <_scanf_float+0x60>
 80089b2:	2507      	movs	r5, #7
 80089b4:	e7b2      	b.n	800891c <_scanf_float+0x188>
 80089b6:	6822      	ldr	r2, [r4, #0]
 80089b8:	0591      	lsls	r1, r2, #22
 80089ba:	f57f af1b 	bpl.w	80087f4 <_scanf_float+0x60>
 80089be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80089c2:	6022      	str	r2, [r4, #0]
 80089c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80089c8:	e7a8      	b.n	800891c <_scanf_float+0x188>
 80089ca:	6822      	ldr	r2, [r4, #0]
 80089cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80089d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80089d4:	d006      	beq.n	80089e4 <_scanf_float+0x250>
 80089d6:	0550      	lsls	r0, r2, #21
 80089d8:	f57f af0c 	bpl.w	80087f4 <_scanf_float+0x60>
 80089dc:	f1b9 0f00 	cmp.w	r9, #0
 80089e0:	f43f af0f 	beq.w	8008802 <_scanf_float+0x6e>
 80089e4:	0591      	lsls	r1, r2, #22
 80089e6:	bf58      	it	pl
 80089e8:	9901      	ldrpl	r1, [sp, #4]
 80089ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089ee:	bf58      	it	pl
 80089f0:	eba9 0101 	subpl.w	r1, r9, r1
 80089f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80089f8:	bf58      	it	pl
 80089fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80089fe:	6022      	str	r2, [r4, #0]
 8008a00:	f04f 0900 	mov.w	r9, #0
 8008a04:	e78a      	b.n	800891c <_scanf_float+0x188>
 8008a06:	f04f 0a03 	mov.w	sl, #3
 8008a0a:	e787      	b.n	800891c <_scanf_float+0x188>
 8008a0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a10:	4639      	mov	r1, r7
 8008a12:	4640      	mov	r0, r8
 8008a14:	4798      	blx	r3
 8008a16:	2800      	cmp	r0, #0
 8008a18:	f43f aedf 	beq.w	80087da <_scanf_float+0x46>
 8008a1c:	e6ea      	b.n	80087f4 <_scanf_float+0x60>
 8008a1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a26:	463a      	mov	r2, r7
 8008a28:	4640      	mov	r0, r8
 8008a2a:	4798      	blx	r3
 8008a2c:	6923      	ldr	r3, [r4, #16]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	6123      	str	r3, [r4, #16]
 8008a32:	e6ec      	b.n	800880e <_scanf_float+0x7a>
 8008a34:	1e6b      	subs	r3, r5, #1
 8008a36:	2b06      	cmp	r3, #6
 8008a38:	d825      	bhi.n	8008a86 <_scanf_float+0x2f2>
 8008a3a:	2d02      	cmp	r5, #2
 8008a3c:	d836      	bhi.n	8008aac <_scanf_float+0x318>
 8008a3e:	455e      	cmp	r6, fp
 8008a40:	f67f aee8 	bls.w	8008814 <_scanf_float+0x80>
 8008a44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a4c:	463a      	mov	r2, r7
 8008a4e:	4640      	mov	r0, r8
 8008a50:	4798      	blx	r3
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	6123      	str	r3, [r4, #16]
 8008a58:	e7f1      	b.n	8008a3e <_scanf_float+0x2aa>
 8008a5a:	9802      	ldr	r0, [sp, #8]
 8008a5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a64:	9002      	str	r0, [sp, #8]
 8008a66:	463a      	mov	r2, r7
 8008a68:	4640      	mov	r0, r8
 8008a6a:	4798      	blx	r3
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	6123      	str	r3, [r4, #16]
 8008a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a76:	fa5f fa8a 	uxtb.w	sl, sl
 8008a7a:	f1ba 0f02 	cmp.w	sl, #2
 8008a7e:	d1ec      	bne.n	8008a5a <_scanf_float+0x2c6>
 8008a80:	3d03      	subs	r5, #3
 8008a82:	b2ed      	uxtb	r5, r5
 8008a84:	1b76      	subs	r6, r6, r5
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	05da      	lsls	r2, r3, #23
 8008a8a:	d52f      	bpl.n	8008aec <_scanf_float+0x358>
 8008a8c:	055b      	lsls	r3, r3, #21
 8008a8e:	d510      	bpl.n	8008ab2 <_scanf_float+0x31e>
 8008a90:	455e      	cmp	r6, fp
 8008a92:	f67f aebf 	bls.w	8008814 <_scanf_float+0x80>
 8008a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a9e:	463a      	mov	r2, r7
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4798      	blx	r3
 8008aa4:	6923      	ldr	r3, [r4, #16]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	e7f1      	b.n	8008a90 <_scanf_float+0x2fc>
 8008aac:	46aa      	mov	sl, r5
 8008aae:	9602      	str	r6, [sp, #8]
 8008ab0:	e7df      	b.n	8008a72 <_scanf_float+0x2de>
 8008ab2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	2965      	cmp	r1, #101	; 0x65
 8008aba:	f103 33ff 	add.w	r3, r3, #4294967295
 8008abe:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ac2:	6123      	str	r3, [r4, #16]
 8008ac4:	d00c      	beq.n	8008ae0 <_scanf_float+0x34c>
 8008ac6:	2945      	cmp	r1, #69	; 0x45
 8008ac8:	d00a      	beq.n	8008ae0 <_scanf_float+0x34c>
 8008aca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ace:	463a      	mov	r2, r7
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	4798      	blx	r3
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	1eb5      	subs	r5, r6, #2
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ae4:	463a      	mov	r2, r7
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	4798      	blx	r3
 8008aea:	462e      	mov	r6, r5
 8008aec:	6825      	ldr	r5, [r4, #0]
 8008aee:	f015 0510 	ands.w	r5, r5, #16
 8008af2:	d158      	bne.n	8008ba6 <_scanf_float+0x412>
 8008af4:	7035      	strb	r5, [r6, #0]
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b00:	d11c      	bne.n	8008b3c <_scanf_float+0x3a8>
 8008b02:	9b01      	ldr	r3, [sp, #4]
 8008b04:	454b      	cmp	r3, r9
 8008b06:	eba3 0209 	sub.w	r2, r3, r9
 8008b0a:	d124      	bne.n	8008b56 <_scanf_float+0x3c2>
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4659      	mov	r1, fp
 8008b10:	4640      	mov	r0, r8
 8008b12:	f002 fc31 	bl	800b378 <_strtod_r>
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	6821      	ldr	r1, [r4, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f011 0f02 	tst.w	r1, #2
 8008b20:	ec57 6b10 	vmov	r6, r7, d0
 8008b24:	f103 0204 	add.w	r2, r3, #4
 8008b28:	d020      	beq.n	8008b6c <_scanf_float+0x3d8>
 8008b2a:	9903      	ldr	r1, [sp, #12]
 8008b2c:	600a      	str	r2, [r1, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	e9c3 6700 	strd	r6, r7, [r3]
 8008b34:	68e3      	ldr	r3, [r4, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60e3      	str	r3, [r4, #12]
 8008b3a:	e66c      	b.n	8008816 <_scanf_float+0x82>
 8008b3c:	9b04      	ldr	r3, [sp, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0e4      	beq.n	8008b0c <_scanf_float+0x378>
 8008b42:	9905      	ldr	r1, [sp, #20]
 8008b44:	230a      	movs	r3, #10
 8008b46:	462a      	mov	r2, r5
 8008b48:	3101      	adds	r1, #1
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	f002 fc9c 	bl	800b488 <_strtol_r>
 8008b50:	9b04      	ldr	r3, [sp, #16]
 8008b52:	9e05      	ldr	r6, [sp, #20]
 8008b54:	1ac2      	subs	r2, r0, r3
 8008b56:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b5a:	429e      	cmp	r6, r3
 8008b5c:	bf28      	it	cs
 8008b5e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b62:	4912      	ldr	r1, [pc, #72]	; (8008bac <_scanf_float+0x418>)
 8008b64:	4630      	mov	r0, r6
 8008b66:	f000 f8e7 	bl	8008d38 <siprintf>
 8008b6a:	e7cf      	b.n	8008b0c <_scanf_float+0x378>
 8008b6c:	f011 0f04 	tst.w	r1, #4
 8008b70:	9903      	ldr	r1, [sp, #12]
 8008b72:	600a      	str	r2, [r1, #0]
 8008b74:	d1db      	bne.n	8008b2e <_scanf_float+0x39a>
 8008b76:	f8d3 8000 	ldr.w	r8, [r3]
 8008b7a:	ee10 2a10 	vmov	r2, s0
 8008b7e:	ee10 0a10 	vmov	r0, s0
 8008b82:	463b      	mov	r3, r7
 8008b84:	4639      	mov	r1, r7
 8008b86:	f7f7 ffd1 	bl	8000b2c <__aeabi_dcmpun>
 8008b8a:	b128      	cbz	r0, 8008b98 <_scanf_float+0x404>
 8008b8c:	4808      	ldr	r0, [pc, #32]	; (8008bb0 <_scanf_float+0x41c>)
 8008b8e:	f000 f9b7 	bl	8008f00 <nanf>
 8008b92:	ed88 0a00 	vstr	s0, [r8]
 8008b96:	e7cd      	b.n	8008b34 <_scanf_float+0x3a0>
 8008b98:	4630      	mov	r0, r6
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	f7f8 f824 	bl	8000be8 <__aeabi_d2f>
 8008ba0:	f8c8 0000 	str.w	r0, [r8]
 8008ba4:	e7c6      	b.n	8008b34 <_scanf_float+0x3a0>
 8008ba6:	2500      	movs	r5, #0
 8008ba8:	e635      	b.n	8008816 <_scanf_float+0x82>
 8008baa:	bf00      	nop
 8008bac:	0800c734 	.word	0x0800c734
 8008bb0:	0800cac5 	.word	0x0800cac5

08008bb4 <std>:
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	4604      	mov	r4, r0
 8008bba:	e9c0 3300 	strd	r3, r3, [r0]
 8008bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bc2:	6083      	str	r3, [r0, #8]
 8008bc4:	8181      	strh	r1, [r0, #12]
 8008bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8008bc8:	81c2      	strh	r2, [r0, #14]
 8008bca:	6183      	str	r3, [r0, #24]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	2208      	movs	r2, #8
 8008bd0:	305c      	adds	r0, #92	; 0x5c
 8008bd2:	f000 f914 	bl	8008dfe <memset>
 8008bd6:	4b0d      	ldr	r3, [pc, #52]	; (8008c0c <std+0x58>)
 8008bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8008bda:	4b0d      	ldr	r3, [pc, #52]	; (8008c10 <std+0x5c>)
 8008bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bde:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <std+0x60>)
 8008be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008be2:	4b0d      	ldr	r3, [pc, #52]	; (8008c18 <std+0x64>)
 8008be4:	6323      	str	r3, [r4, #48]	; 0x30
 8008be6:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <std+0x68>)
 8008be8:	6224      	str	r4, [r4, #32]
 8008bea:	429c      	cmp	r4, r3
 8008bec:	d006      	beq.n	8008bfc <std+0x48>
 8008bee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008bf2:	4294      	cmp	r4, r2
 8008bf4:	d002      	beq.n	8008bfc <std+0x48>
 8008bf6:	33d0      	adds	r3, #208	; 0xd0
 8008bf8:	429c      	cmp	r4, r3
 8008bfa:	d105      	bne.n	8008c08 <std+0x54>
 8008bfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c04:	f000 b978 	b.w	8008ef8 <__retarget_lock_init_recursive>
 8008c08:	bd10      	pop	{r4, pc}
 8008c0a:	bf00      	nop
 8008c0c:	08008d79 	.word	0x08008d79
 8008c10:	08008d9b 	.word	0x08008d9b
 8008c14:	08008dd3 	.word	0x08008dd3
 8008c18:	08008df7 	.word	0x08008df7
 8008c1c:	200004dc 	.word	0x200004dc

08008c20 <stdio_exit_handler>:
 8008c20:	4a02      	ldr	r2, [pc, #8]	; (8008c2c <stdio_exit_handler+0xc>)
 8008c22:	4903      	ldr	r1, [pc, #12]	; (8008c30 <stdio_exit_handler+0x10>)
 8008c24:	4803      	ldr	r0, [pc, #12]	; (8008c34 <stdio_exit_handler+0x14>)
 8008c26:	f000 b869 	b.w	8008cfc <_fwalk_sglue>
 8008c2a:	bf00      	nop
 8008c2c:	2000000c 	.word	0x2000000c
 8008c30:	0800b849 	.word	0x0800b849
 8008c34:	20000018 	.word	0x20000018

08008c38 <cleanup_stdio>:
 8008c38:	6841      	ldr	r1, [r0, #4]
 8008c3a:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <cleanup_stdio+0x34>)
 8008c3c:	4299      	cmp	r1, r3
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	4604      	mov	r4, r0
 8008c42:	d001      	beq.n	8008c48 <cleanup_stdio+0x10>
 8008c44:	f002 fe00 	bl	800b848 <_fflush_r>
 8008c48:	68a1      	ldr	r1, [r4, #8]
 8008c4a:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <cleanup_stdio+0x38>)
 8008c4c:	4299      	cmp	r1, r3
 8008c4e:	d002      	beq.n	8008c56 <cleanup_stdio+0x1e>
 8008c50:	4620      	mov	r0, r4
 8008c52:	f002 fdf9 	bl	800b848 <_fflush_r>
 8008c56:	68e1      	ldr	r1, [r4, #12]
 8008c58:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <cleanup_stdio+0x3c>)
 8008c5a:	4299      	cmp	r1, r3
 8008c5c:	d004      	beq.n	8008c68 <cleanup_stdio+0x30>
 8008c5e:	4620      	mov	r0, r4
 8008c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c64:	f002 bdf0 	b.w	800b848 <_fflush_r>
 8008c68:	bd10      	pop	{r4, pc}
 8008c6a:	bf00      	nop
 8008c6c:	200004dc 	.word	0x200004dc
 8008c70:	20000544 	.word	0x20000544
 8008c74:	200005ac 	.word	0x200005ac

08008c78 <global_stdio_init.part.0>:
 8008c78:	b510      	push	{r4, lr}
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <global_stdio_init.part.0+0x30>)
 8008c7c:	4c0b      	ldr	r4, [pc, #44]	; (8008cac <global_stdio_init.part.0+0x34>)
 8008c7e:	4a0c      	ldr	r2, [pc, #48]	; (8008cb0 <global_stdio_init.part.0+0x38>)
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	4620      	mov	r0, r4
 8008c84:	2200      	movs	r2, #0
 8008c86:	2104      	movs	r1, #4
 8008c88:	f7ff ff94 	bl	8008bb4 <std>
 8008c8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008c90:	2201      	movs	r2, #1
 8008c92:	2109      	movs	r1, #9
 8008c94:	f7ff ff8e 	bl	8008bb4 <std>
 8008c98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca2:	2112      	movs	r1, #18
 8008ca4:	f7ff bf86 	b.w	8008bb4 <std>
 8008ca8:	20000614 	.word	0x20000614
 8008cac:	200004dc 	.word	0x200004dc
 8008cb0:	08008c21 	.word	0x08008c21

08008cb4 <__sfp_lock_acquire>:
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <__sfp_lock_acquire+0x8>)
 8008cb6:	f000 b920 	b.w	8008efa <__retarget_lock_acquire_recursive>
 8008cba:	bf00      	nop
 8008cbc:	2000061d 	.word	0x2000061d

08008cc0 <__sfp_lock_release>:
 8008cc0:	4801      	ldr	r0, [pc, #4]	; (8008cc8 <__sfp_lock_release+0x8>)
 8008cc2:	f000 b91b 	b.w	8008efc <__retarget_lock_release_recursive>
 8008cc6:	bf00      	nop
 8008cc8:	2000061d 	.word	0x2000061d

08008ccc <__sinit>:
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	4604      	mov	r4, r0
 8008cd0:	f7ff fff0 	bl	8008cb4 <__sfp_lock_acquire>
 8008cd4:	6a23      	ldr	r3, [r4, #32]
 8008cd6:	b11b      	cbz	r3, 8008ce0 <__sinit+0x14>
 8008cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cdc:	f7ff bff0 	b.w	8008cc0 <__sfp_lock_release>
 8008ce0:	4b04      	ldr	r3, [pc, #16]	; (8008cf4 <__sinit+0x28>)
 8008ce2:	6223      	str	r3, [r4, #32]
 8008ce4:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <__sinit+0x2c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1f5      	bne.n	8008cd8 <__sinit+0xc>
 8008cec:	f7ff ffc4 	bl	8008c78 <global_stdio_init.part.0>
 8008cf0:	e7f2      	b.n	8008cd8 <__sinit+0xc>
 8008cf2:	bf00      	nop
 8008cf4:	08008c39 	.word	0x08008c39
 8008cf8:	20000614 	.word	0x20000614

08008cfc <_fwalk_sglue>:
 8008cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d00:	4607      	mov	r7, r0
 8008d02:	4688      	mov	r8, r1
 8008d04:	4614      	mov	r4, r2
 8008d06:	2600      	movs	r6, #0
 8008d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8008d10:	d505      	bpl.n	8008d1e <_fwalk_sglue+0x22>
 8008d12:	6824      	ldr	r4, [r4, #0]
 8008d14:	2c00      	cmp	r4, #0
 8008d16:	d1f7      	bne.n	8008d08 <_fwalk_sglue+0xc>
 8008d18:	4630      	mov	r0, r6
 8008d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1e:	89ab      	ldrh	r3, [r5, #12]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d907      	bls.n	8008d34 <_fwalk_sglue+0x38>
 8008d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	d003      	beq.n	8008d34 <_fwalk_sglue+0x38>
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	4638      	mov	r0, r7
 8008d30:	47c0      	blx	r8
 8008d32:	4306      	orrs	r6, r0
 8008d34:	3568      	adds	r5, #104	; 0x68
 8008d36:	e7e9      	b.n	8008d0c <_fwalk_sglue+0x10>

08008d38 <siprintf>:
 8008d38:	b40e      	push	{r1, r2, r3}
 8008d3a:	b500      	push	{lr}
 8008d3c:	b09c      	sub	sp, #112	; 0x70
 8008d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d40:	9002      	str	r0, [sp, #8]
 8008d42:	9006      	str	r0, [sp, #24]
 8008d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d48:	4809      	ldr	r0, [pc, #36]	; (8008d70 <siprintf+0x38>)
 8008d4a:	9107      	str	r1, [sp, #28]
 8008d4c:	9104      	str	r1, [sp, #16]
 8008d4e:	4909      	ldr	r1, [pc, #36]	; (8008d74 <siprintf+0x3c>)
 8008d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d54:	9105      	str	r1, [sp, #20]
 8008d56:	6800      	ldr	r0, [r0, #0]
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	a902      	add	r1, sp, #8
 8008d5c:	f002 fbf0 	bl	800b540 <_svfiprintf_r>
 8008d60:	9b02      	ldr	r3, [sp, #8]
 8008d62:	2200      	movs	r2, #0
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	b01c      	add	sp, #112	; 0x70
 8008d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d6c:	b003      	add	sp, #12
 8008d6e:	4770      	bx	lr
 8008d70:	20000064 	.word	0x20000064
 8008d74:	ffff0208 	.word	0xffff0208

08008d78 <__sread>:
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d80:	f000 f86c 	bl	8008e5c <_read_r>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	bfab      	itete	ge
 8008d88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d8c:	181b      	addge	r3, r3, r0
 8008d8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d92:	bfac      	ite	ge
 8008d94:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d96:	81a3      	strhlt	r3, [r4, #12]
 8008d98:	bd10      	pop	{r4, pc}

08008d9a <__swrite>:
 8008d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9e:	461f      	mov	r7, r3
 8008da0:	898b      	ldrh	r3, [r1, #12]
 8008da2:	05db      	lsls	r3, r3, #23
 8008da4:	4605      	mov	r5, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	4616      	mov	r6, r2
 8008daa:	d505      	bpl.n	8008db8 <__swrite+0x1e>
 8008dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db0:	2302      	movs	r3, #2
 8008db2:	2200      	movs	r2, #0
 8008db4:	f000 f840 	bl	8008e38 <_lseek_r>
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dc2:	81a3      	strh	r3, [r4, #12]
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	463b      	mov	r3, r7
 8008dc8:	4628      	mov	r0, r5
 8008dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dce:	f000 b857 	b.w	8008e80 <_write_r>

08008dd2 <__sseek>:
 8008dd2:	b510      	push	{r4, lr}
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dda:	f000 f82d 	bl	8008e38 <_lseek_r>
 8008dde:	1c43      	adds	r3, r0, #1
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	bf15      	itete	ne
 8008de4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dee:	81a3      	strheq	r3, [r4, #12]
 8008df0:	bf18      	it	ne
 8008df2:	81a3      	strhne	r3, [r4, #12]
 8008df4:	bd10      	pop	{r4, pc}

08008df6 <__sclose>:
 8008df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfa:	f000 b80d 	b.w	8008e18 <_close_r>

08008dfe <memset>:
 8008dfe:	4402      	add	r2, r0
 8008e00:	4603      	mov	r3, r0
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d100      	bne.n	8008e08 <memset+0xa>
 8008e06:	4770      	bx	lr
 8008e08:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0c:	e7f9      	b.n	8008e02 <memset+0x4>
	...

08008e10 <_localeconv_r>:
 8008e10:	4800      	ldr	r0, [pc, #0]	; (8008e14 <_localeconv_r+0x4>)
 8008e12:	4770      	bx	lr
 8008e14:	20000158 	.word	0x20000158

08008e18 <_close_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d06      	ldr	r5, [pc, #24]	; (8008e34 <_close_r+0x1c>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	602b      	str	r3, [r5, #0]
 8008e24:	f7f8 ff43 	bl	8001cae <_close>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_close_r+0x1a>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_close_r+0x1a>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	20000618 	.word	0x20000618

08008e38 <_lseek_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d07      	ldr	r5, [pc, #28]	; (8008e58 <_lseek_r+0x20>)
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	4608      	mov	r0, r1
 8008e40:	4611      	mov	r1, r2
 8008e42:	2200      	movs	r2, #0
 8008e44:	602a      	str	r2, [r5, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	f7f8 ff58 	bl	8001cfc <_lseek>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_lseek_r+0x1e>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_lseek_r+0x1e>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	20000618 	.word	0x20000618

08008e5c <_read_r>:
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	4d07      	ldr	r5, [pc, #28]	; (8008e7c <_read_r+0x20>)
 8008e60:	4604      	mov	r4, r0
 8008e62:	4608      	mov	r0, r1
 8008e64:	4611      	mov	r1, r2
 8008e66:	2200      	movs	r2, #0
 8008e68:	602a      	str	r2, [r5, #0]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f7f8 fee6 	bl	8001c3c <_read>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d102      	bne.n	8008e7a <_read_r+0x1e>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	b103      	cbz	r3, 8008e7a <_read_r+0x1e>
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	20000618 	.word	0x20000618

08008e80 <_write_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4d07      	ldr	r5, [pc, #28]	; (8008ea0 <_write_r+0x20>)
 8008e84:	4604      	mov	r4, r0
 8008e86:	4608      	mov	r0, r1
 8008e88:	4611      	mov	r1, r2
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	602a      	str	r2, [r5, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f7f8 fef1 	bl	8001c76 <_write>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_write_r+0x1e>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_write_r+0x1e>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20000618 	.word	0x20000618

08008ea4 <__errno>:
 8008ea4:	4b01      	ldr	r3, [pc, #4]	; (8008eac <__errno+0x8>)
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	20000064 	.word	0x20000064

08008eb0 <__libc_init_array>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	4d0d      	ldr	r5, [pc, #52]	; (8008ee8 <__libc_init_array+0x38>)
 8008eb4:	4c0d      	ldr	r4, [pc, #52]	; (8008eec <__libc_init_array+0x3c>)
 8008eb6:	1b64      	subs	r4, r4, r5
 8008eb8:	10a4      	asrs	r4, r4, #2
 8008eba:	2600      	movs	r6, #0
 8008ebc:	42a6      	cmp	r6, r4
 8008ebe:	d109      	bne.n	8008ed4 <__libc_init_array+0x24>
 8008ec0:	4d0b      	ldr	r5, [pc, #44]	; (8008ef0 <__libc_init_array+0x40>)
 8008ec2:	4c0c      	ldr	r4, [pc, #48]	; (8008ef4 <__libc_init_array+0x44>)
 8008ec4:	f003 fbd8 	bl	800c678 <_init>
 8008ec8:	1b64      	subs	r4, r4, r5
 8008eca:	10a4      	asrs	r4, r4, #2
 8008ecc:	2600      	movs	r6, #0
 8008ece:	42a6      	cmp	r6, r4
 8008ed0:	d105      	bne.n	8008ede <__libc_init_array+0x2e>
 8008ed2:	bd70      	pop	{r4, r5, r6, pc}
 8008ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed8:	4798      	blx	r3
 8008eda:	3601      	adds	r6, #1
 8008edc:	e7ee      	b.n	8008ebc <__libc_init_array+0xc>
 8008ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee2:	4798      	blx	r3
 8008ee4:	3601      	adds	r6, #1
 8008ee6:	e7f2      	b.n	8008ece <__libc_init_array+0x1e>
 8008ee8:	0800cb30 	.word	0x0800cb30
 8008eec:	0800cb30 	.word	0x0800cb30
 8008ef0:	0800cb30 	.word	0x0800cb30
 8008ef4:	0800cb34 	.word	0x0800cb34

08008ef8 <__retarget_lock_init_recursive>:
 8008ef8:	4770      	bx	lr

08008efa <__retarget_lock_acquire_recursive>:
 8008efa:	4770      	bx	lr

08008efc <__retarget_lock_release_recursive>:
 8008efc:	4770      	bx	lr
	...

08008f00 <nanf>:
 8008f00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008f08 <nanf+0x8>
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	7fc00000 	.word	0x7fc00000

08008f0c <quorem>:
 8008f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	6903      	ldr	r3, [r0, #16]
 8008f12:	690c      	ldr	r4, [r1, #16]
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	4607      	mov	r7, r0
 8008f18:	db7e      	blt.n	8009018 <quorem+0x10c>
 8008f1a:	3c01      	subs	r4, #1
 8008f1c:	f101 0814 	add.w	r8, r1, #20
 8008f20:	f100 0514 	add.w	r5, r0, #20
 8008f24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f32:	3301      	adds	r3, #1
 8008f34:	429a      	cmp	r2, r3
 8008f36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f42:	d331      	bcc.n	8008fa8 <quorem+0x9c>
 8008f44:	f04f 0e00 	mov.w	lr, #0
 8008f48:	4640      	mov	r0, r8
 8008f4a:	46ac      	mov	ip, r5
 8008f4c:	46f2      	mov	sl, lr
 8008f4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f52:	b293      	uxth	r3, r2
 8008f54:	fb06 e303 	mla	r3, r6, r3, lr
 8008f58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f5c:	0c1a      	lsrs	r2, r3, #16
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	ebaa 0303 	sub.w	r3, sl, r3
 8008f64:	f8dc a000 	ldr.w	sl, [ip]
 8008f68:	fa13 f38a 	uxtah	r3, r3, sl
 8008f6c:	fb06 220e 	mla	r2, r6, lr, r2
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	9b00      	ldr	r3, [sp, #0]
 8008f74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f78:	b292      	uxth	r2, r2
 8008f7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f82:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f86:	4581      	cmp	r9, r0
 8008f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f8c:	f84c 3b04 	str.w	r3, [ip], #4
 8008f90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f94:	d2db      	bcs.n	8008f4e <quorem+0x42>
 8008f96:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f9a:	b92b      	cbnz	r3, 8008fa8 <quorem+0x9c>
 8008f9c:	9b01      	ldr	r3, [sp, #4]
 8008f9e:	3b04      	subs	r3, #4
 8008fa0:	429d      	cmp	r5, r3
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	d32c      	bcc.n	8009000 <quorem+0xf4>
 8008fa6:	613c      	str	r4, [r7, #16]
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f001 f9f1 	bl	800a390 <__mcmp>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	db22      	blt.n	8008ff8 <quorem+0xec>
 8008fb2:	3601      	adds	r6, #1
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fbc:	f8d1 c000 	ldr.w	ip, [r1]
 8008fc0:	b293      	uxth	r3, r2
 8008fc2:	1ac3      	subs	r3, r0, r3
 8008fc4:	0c12      	lsrs	r2, r2, #16
 8008fc6:	fa13 f38c 	uxtah	r3, r3, ip
 8008fca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008fce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fd8:	45c1      	cmp	r9, r8
 8008fda:	f841 3b04 	str.w	r3, [r1], #4
 8008fde:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008fe2:	d2e9      	bcs.n	8008fb8 <quorem+0xac>
 8008fe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fe8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fec:	b922      	cbnz	r2, 8008ff8 <quorem+0xec>
 8008fee:	3b04      	subs	r3, #4
 8008ff0:	429d      	cmp	r5, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	d30a      	bcc.n	800900c <quorem+0x100>
 8008ff6:	613c      	str	r4, [r7, #16]
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	b003      	add	sp, #12
 8008ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009000:	6812      	ldr	r2, [r2, #0]
 8009002:	3b04      	subs	r3, #4
 8009004:	2a00      	cmp	r2, #0
 8009006:	d1ce      	bne.n	8008fa6 <quorem+0x9a>
 8009008:	3c01      	subs	r4, #1
 800900a:	e7c9      	b.n	8008fa0 <quorem+0x94>
 800900c:	6812      	ldr	r2, [r2, #0]
 800900e:	3b04      	subs	r3, #4
 8009010:	2a00      	cmp	r2, #0
 8009012:	d1f0      	bne.n	8008ff6 <quorem+0xea>
 8009014:	3c01      	subs	r4, #1
 8009016:	e7eb      	b.n	8008ff0 <quorem+0xe4>
 8009018:	2000      	movs	r0, #0
 800901a:	e7ee      	b.n	8008ffa <quorem+0xee>
 800901c:	0000      	movs	r0, r0
	...

08009020 <_dtoa_r>:
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	ed2d 8b04 	vpush	{d8-d9}
 8009028:	69c5      	ldr	r5, [r0, #28]
 800902a:	b093      	sub	sp, #76	; 0x4c
 800902c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009030:	ec57 6b10 	vmov	r6, r7, d0
 8009034:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009038:	9107      	str	r1, [sp, #28]
 800903a:	4604      	mov	r4, r0
 800903c:	920a      	str	r2, [sp, #40]	; 0x28
 800903e:	930d      	str	r3, [sp, #52]	; 0x34
 8009040:	b975      	cbnz	r5, 8009060 <_dtoa_r+0x40>
 8009042:	2010      	movs	r0, #16
 8009044:	f000 fe2a 	bl	8009c9c <malloc>
 8009048:	4602      	mov	r2, r0
 800904a:	61e0      	str	r0, [r4, #28]
 800904c:	b920      	cbnz	r0, 8009058 <_dtoa_r+0x38>
 800904e:	4bae      	ldr	r3, [pc, #696]	; (8009308 <_dtoa_r+0x2e8>)
 8009050:	21ef      	movs	r1, #239	; 0xef
 8009052:	48ae      	ldr	r0, [pc, #696]	; (800930c <_dtoa_r+0x2ec>)
 8009054:	f002 fc74 	bl	800b940 <__assert_func>
 8009058:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800905c:	6005      	str	r5, [r0, #0]
 800905e:	60c5      	str	r5, [r0, #12]
 8009060:	69e3      	ldr	r3, [r4, #28]
 8009062:	6819      	ldr	r1, [r3, #0]
 8009064:	b151      	cbz	r1, 800907c <_dtoa_r+0x5c>
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	604a      	str	r2, [r1, #4]
 800906a:	2301      	movs	r3, #1
 800906c:	4093      	lsls	r3, r2
 800906e:	608b      	str	r3, [r1, #8]
 8009070:	4620      	mov	r0, r4
 8009072:	f000 ff07 	bl	8009e84 <_Bfree>
 8009076:	69e3      	ldr	r3, [r4, #28]
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	1e3b      	subs	r3, r7, #0
 800907e:	bfbb      	ittet	lt
 8009080:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009084:	9303      	strlt	r3, [sp, #12]
 8009086:	2300      	movge	r3, #0
 8009088:	2201      	movlt	r2, #1
 800908a:	bfac      	ite	ge
 800908c:	f8c8 3000 	strge.w	r3, [r8]
 8009090:	f8c8 2000 	strlt.w	r2, [r8]
 8009094:	4b9e      	ldr	r3, [pc, #632]	; (8009310 <_dtoa_r+0x2f0>)
 8009096:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800909a:	ea33 0308 	bics.w	r3, r3, r8
 800909e:	d11b      	bne.n	80090d8 <_dtoa_r+0xb8>
 80090a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80090ac:	4333      	orrs	r3, r6
 80090ae:	f000 8593 	beq.w	8009bd8 <_dtoa_r+0xbb8>
 80090b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b4:	b963      	cbnz	r3, 80090d0 <_dtoa_r+0xb0>
 80090b6:	4b97      	ldr	r3, [pc, #604]	; (8009314 <_dtoa_r+0x2f4>)
 80090b8:	e027      	b.n	800910a <_dtoa_r+0xea>
 80090ba:	4b97      	ldr	r3, [pc, #604]	; (8009318 <_dtoa_r+0x2f8>)
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	3308      	adds	r3, #8
 80090c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	9800      	ldr	r0, [sp, #0]
 80090c6:	b013      	add	sp, #76	; 0x4c
 80090c8:	ecbd 8b04 	vpop	{d8-d9}
 80090cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d0:	4b90      	ldr	r3, [pc, #576]	; (8009314 <_dtoa_r+0x2f4>)
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	3303      	adds	r3, #3
 80090d6:	e7f3      	b.n	80090c0 <_dtoa_r+0xa0>
 80090d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090dc:	2200      	movs	r2, #0
 80090de:	ec51 0b17 	vmov	r0, r1, d7
 80090e2:	eeb0 8a47 	vmov.f32	s16, s14
 80090e6:	eef0 8a67 	vmov.f32	s17, s15
 80090ea:	2300      	movs	r3, #0
 80090ec:	f7f7 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80090f0:	4681      	mov	r9, r0
 80090f2:	b160      	cbz	r0, 800910e <_dtoa_r+0xee>
 80090f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090f6:	2301      	movs	r3, #1
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 8568 	beq.w	8009bd2 <_dtoa_r+0xbb2>
 8009102:	4b86      	ldr	r3, [pc, #536]	; (800931c <_dtoa_r+0x2fc>)
 8009104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	3b01      	subs	r3, #1
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	e7da      	b.n	80090c4 <_dtoa_r+0xa4>
 800910e:	aa10      	add	r2, sp, #64	; 0x40
 8009110:	a911      	add	r1, sp, #68	; 0x44
 8009112:	4620      	mov	r0, r4
 8009114:	eeb0 0a48 	vmov.f32	s0, s16
 8009118:	eef0 0a68 	vmov.f32	s1, s17
 800911c:	f001 fa4e 	bl	800a5bc <__d2b>
 8009120:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009124:	4682      	mov	sl, r0
 8009126:	2d00      	cmp	r5, #0
 8009128:	d07f      	beq.n	800922a <_dtoa_r+0x20a>
 800912a:	ee18 3a90 	vmov	r3, s17
 800912e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009132:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009136:	ec51 0b18 	vmov	r0, r1, d8
 800913a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800913e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009142:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009146:	4619      	mov	r1, r3
 8009148:	2200      	movs	r2, #0
 800914a:	4b75      	ldr	r3, [pc, #468]	; (8009320 <_dtoa_r+0x300>)
 800914c:	f7f7 f89c 	bl	8000288 <__aeabi_dsub>
 8009150:	a367      	add	r3, pc, #412	; (adr r3, 80092f0 <_dtoa_r+0x2d0>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 fa4f 	bl	80005f8 <__aeabi_dmul>
 800915a:	a367      	add	r3, pc, #412	; (adr r3, 80092f8 <_dtoa_r+0x2d8>)
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	f7f7 f894 	bl	800028c <__adddf3>
 8009164:	4606      	mov	r6, r0
 8009166:	4628      	mov	r0, r5
 8009168:	460f      	mov	r7, r1
 800916a:	f7f7 f9db 	bl	8000524 <__aeabi_i2d>
 800916e:	a364      	add	r3, pc, #400	; (adr r3, 8009300 <_dtoa_r+0x2e0>)
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f7f7 fa40 	bl	80005f8 <__aeabi_dmul>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4630      	mov	r0, r6
 800917e:	4639      	mov	r1, r7
 8009180:	f7f7 f884 	bl	800028c <__adddf3>
 8009184:	4606      	mov	r6, r0
 8009186:	460f      	mov	r7, r1
 8009188:	f7f7 fce6 	bl	8000b58 <__aeabi_d2iz>
 800918c:	2200      	movs	r2, #0
 800918e:	4683      	mov	fp, r0
 8009190:	2300      	movs	r3, #0
 8009192:	4630      	mov	r0, r6
 8009194:	4639      	mov	r1, r7
 8009196:	f7f7 fca1 	bl	8000adc <__aeabi_dcmplt>
 800919a:	b148      	cbz	r0, 80091b0 <_dtoa_r+0x190>
 800919c:	4658      	mov	r0, fp
 800919e:	f7f7 f9c1 	bl	8000524 <__aeabi_i2d>
 80091a2:	4632      	mov	r2, r6
 80091a4:	463b      	mov	r3, r7
 80091a6:	f7f7 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80091aa:	b908      	cbnz	r0, 80091b0 <_dtoa_r+0x190>
 80091ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091b0:	f1bb 0f16 	cmp.w	fp, #22
 80091b4:	d857      	bhi.n	8009266 <_dtoa_r+0x246>
 80091b6:	4b5b      	ldr	r3, [pc, #364]	; (8009324 <_dtoa_r+0x304>)
 80091b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	ec51 0b18 	vmov	r0, r1, d8
 80091c4:	f7f7 fc8a 	bl	8000adc <__aeabi_dcmplt>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d04e      	beq.n	800926a <_dtoa_r+0x24a>
 80091cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091d0:	2300      	movs	r3, #0
 80091d2:	930c      	str	r3, [sp, #48]	; 0x30
 80091d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091d6:	1b5b      	subs	r3, r3, r5
 80091d8:	1e5a      	subs	r2, r3, #1
 80091da:	bf45      	ittet	mi
 80091dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80091e0:	9305      	strmi	r3, [sp, #20]
 80091e2:	2300      	movpl	r3, #0
 80091e4:	2300      	movmi	r3, #0
 80091e6:	9206      	str	r2, [sp, #24]
 80091e8:	bf54      	ite	pl
 80091ea:	9305      	strpl	r3, [sp, #20]
 80091ec:	9306      	strmi	r3, [sp, #24]
 80091ee:	f1bb 0f00 	cmp.w	fp, #0
 80091f2:	db3c      	blt.n	800926e <_dtoa_r+0x24e>
 80091f4:	9b06      	ldr	r3, [sp, #24]
 80091f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80091fa:	445b      	add	r3, fp
 80091fc:	9306      	str	r3, [sp, #24]
 80091fe:	2300      	movs	r3, #0
 8009200:	9308      	str	r3, [sp, #32]
 8009202:	9b07      	ldr	r3, [sp, #28]
 8009204:	2b09      	cmp	r3, #9
 8009206:	d868      	bhi.n	80092da <_dtoa_r+0x2ba>
 8009208:	2b05      	cmp	r3, #5
 800920a:	bfc4      	itt	gt
 800920c:	3b04      	subgt	r3, #4
 800920e:	9307      	strgt	r3, [sp, #28]
 8009210:	9b07      	ldr	r3, [sp, #28]
 8009212:	f1a3 0302 	sub.w	r3, r3, #2
 8009216:	bfcc      	ite	gt
 8009218:	2500      	movgt	r5, #0
 800921a:	2501      	movle	r5, #1
 800921c:	2b03      	cmp	r3, #3
 800921e:	f200 8085 	bhi.w	800932c <_dtoa_r+0x30c>
 8009222:	e8df f003 	tbb	[pc, r3]
 8009226:	3b2e      	.short	0x3b2e
 8009228:	5839      	.short	0x5839
 800922a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800922e:	441d      	add	r5, r3
 8009230:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009234:	2b20      	cmp	r3, #32
 8009236:	bfc1      	itttt	gt
 8009238:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800923c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009240:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009244:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009248:	bfd6      	itet	le
 800924a:	f1c3 0320 	rsble	r3, r3, #32
 800924e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009252:	fa06 f003 	lslle.w	r0, r6, r3
 8009256:	f7f7 f955 	bl	8000504 <__aeabi_ui2d>
 800925a:	2201      	movs	r2, #1
 800925c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009260:	3d01      	subs	r5, #1
 8009262:	920e      	str	r2, [sp, #56]	; 0x38
 8009264:	e76f      	b.n	8009146 <_dtoa_r+0x126>
 8009266:	2301      	movs	r3, #1
 8009268:	e7b3      	b.n	80091d2 <_dtoa_r+0x1b2>
 800926a:	900c      	str	r0, [sp, #48]	; 0x30
 800926c:	e7b2      	b.n	80091d4 <_dtoa_r+0x1b4>
 800926e:	9b05      	ldr	r3, [sp, #20]
 8009270:	eba3 030b 	sub.w	r3, r3, fp
 8009274:	9305      	str	r3, [sp, #20]
 8009276:	f1cb 0300 	rsb	r3, fp, #0
 800927a:	9308      	str	r3, [sp, #32]
 800927c:	2300      	movs	r3, #0
 800927e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009280:	e7bf      	b.n	8009202 <_dtoa_r+0x1e2>
 8009282:	2300      	movs	r3, #0
 8009284:	9309      	str	r3, [sp, #36]	; 0x24
 8009286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009288:	2b00      	cmp	r3, #0
 800928a:	dc52      	bgt.n	8009332 <_dtoa_r+0x312>
 800928c:	2301      	movs	r3, #1
 800928e:	9301      	str	r3, [sp, #4]
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	461a      	mov	r2, r3
 8009294:	920a      	str	r2, [sp, #40]	; 0x28
 8009296:	e00b      	b.n	80092b0 <_dtoa_r+0x290>
 8009298:	2301      	movs	r3, #1
 800929a:	e7f3      	b.n	8009284 <_dtoa_r+0x264>
 800929c:	2300      	movs	r3, #0
 800929e:	9309      	str	r3, [sp, #36]	; 0x24
 80092a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a2:	445b      	add	r3, fp
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	3301      	adds	r3, #1
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	bfb8      	it	lt
 80092ae:	2301      	movlt	r3, #1
 80092b0:	69e0      	ldr	r0, [r4, #28]
 80092b2:	2100      	movs	r1, #0
 80092b4:	2204      	movs	r2, #4
 80092b6:	f102 0614 	add.w	r6, r2, #20
 80092ba:	429e      	cmp	r6, r3
 80092bc:	d93d      	bls.n	800933a <_dtoa_r+0x31a>
 80092be:	6041      	str	r1, [r0, #4]
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 fd9f 	bl	8009e04 <_Balloc>
 80092c6:	9000      	str	r0, [sp, #0]
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d139      	bne.n	8009340 <_dtoa_r+0x320>
 80092cc:	4b16      	ldr	r3, [pc, #88]	; (8009328 <_dtoa_r+0x308>)
 80092ce:	4602      	mov	r2, r0
 80092d0:	f240 11af 	movw	r1, #431	; 0x1af
 80092d4:	e6bd      	b.n	8009052 <_dtoa_r+0x32>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e7e1      	b.n	800929e <_dtoa_r+0x27e>
 80092da:	2501      	movs	r5, #1
 80092dc:	2300      	movs	r3, #0
 80092de:	9307      	str	r3, [sp, #28]
 80092e0:	9509      	str	r5, [sp, #36]	; 0x24
 80092e2:	f04f 33ff 	mov.w	r3, #4294967295
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	2200      	movs	r2, #0
 80092ec:	2312      	movs	r3, #18
 80092ee:	e7d1      	b.n	8009294 <_dtoa_r+0x274>
 80092f0:	636f4361 	.word	0x636f4361
 80092f4:	3fd287a7 	.word	0x3fd287a7
 80092f8:	8b60c8b3 	.word	0x8b60c8b3
 80092fc:	3fc68a28 	.word	0x3fc68a28
 8009300:	509f79fb 	.word	0x509f79fb
 8009304:	3fd34413 	.word	0x3fd34413
 8009308:	0800c746 	.word	0x0800c746
 800930c:	0800c75d 	.word	0x0800c75d
 8009310:	7ff00000 	.word	0x7ff00000
 8009314:	0800c742 	.word	0x0800c742
 8009318:	0800c739 	.word	0x0800c739
 800931c:	0800c711 	.word	0x0800c711
 8009320:	3ff80000 	.word	0x3ff80000
 8009324:	0800c848 	.word	0x0800c848
 8009328:	0800c7b5 	.word	0x0800c7b5
 800932c:	2301      	movs	r3, #1
 800932e:	9309      	str	r3, [sp, #36]	; 0x24
 8009330:	e7d7      	b.n	80092e2 <_dtoa_r+0x2c2>
 8009332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	9304      	str	r3, [sp, #16]
 8009338:	e7ba      	b.n	80092b0 <_dtoa_r+0x290>
 800933a:	3101      	adds	r1, #1
 800933c:	0052      	lsls	r2, r2, #1
 800933e:	e7ba      	b.n	80092b6 <_dtoa_r+0x296>
 8009340:	69e3      	ldr	r3, [r4, #28]
 8009342:	9a00      	ldr	r2, [sp, #0]
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	2b0e      	cmp	r3, #14
 800934a:	f200 80a8 	bhi.w	800949e <_dtoa_r+0x47e>
 800934e:	2d00      	cmp	r5, #0
 8009350:	f000 80a5 	beq.w	800949e <_dtoa_r+0x47e>
 8009354:	f1bb 0f00 	cmp.w	fp, #0
 8009358:	dd38      	ble.n	80093cc <_dtoa_r+0x3ac>
 800935a:	4bc0      	ldr	r3, [pc, #768]	; (800965c <_dtoa_r+0x63c>)
 800935c:	f00b 020f 	and.w	r2, fp, #15
 8009360:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009364:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009368:	e9d3 6700 	ldrd	r6, r7, [r3]
 800936c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009370:	d019      	beq.n	80093a6 <_dtoa_r+0x386>
 8009372:	4bbb      	ldr	r3, [pc, #748]	; (8009660 <_dtoa_r+0x640>)
 8009374:	ec51 0b18 	vmov	r0, r1, d8
 8009378:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800937c:	f7f7 fa66 	bl	800084c <__aeabi_ddiv>
 8009380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009384:	f008 080f 	and.w	r8, r8, #15
 8009388:	2503      	movs	r5, #3
 800938a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009660 <_dtoa_r+0x640>
 800938e:	f1b8 0f00 	cmp.w	r8, #0
 8009392:	d10a      	bne.n	80093aa <_dtoa_r+0x38a>
 8009394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009398:	4632      	mov	r2, r6
 800939a:	463b      	mov	r3, r7
 800939c:	f7f7 fa56 	bl	800084c <__aeabi_ddiv>
 80093a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a4:	e02b      	b.n	80093fe <_dtoa_r+0x3de>
 80093a6:	2502      	movs	r5, #2
 80093a8:	e7ef      	b.n	800938a <_dtoa_r+0x36a>
 80093aa:	f018 0f01 	tst.w	r8, #1
 80093ae:	d008      	beq.n	80093c2 <_dtoa_r+0x3a2>
 80093b0:	4630      	mov	r0, r6
 80093b2:	4639      	mov	r1, r7
 80093b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80093b8:	f7f7 f91e 	bl	80005f8 <__aeabi_dmul>
 80093bc:	3501      	adds	r5, #1
 80093be:	4606      	mov	r6, r0
 80093c0:	460f      	mov	r7, r1
 80093c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80093c6:	f109 0908 	add.w	r9, r9, #8
 80093ca:	e7e0      	b.n	800938e <_dtoa_r+0x36e>
 80093cc:	f000 809f 	beq.w	800950e <_dtoa_r+0x4ee>
 80093d0:	f1cb 0600 	rsb	r6, fp, #0
 80093d4:	4ba1      	ldr	r3, [pc, #644]	; (800965c <_dtoa_r+0x63c>)
 80093d6:	4fa2      	ldr	r7, [pc, #648]	; (8009660 <_dtoa_r+0x640>)
 80093d8:	f006 020f 	and.w	r2, r6, #15
 80093dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	ec51 0b18 	vmov	r0, r1, d8
 80093e8:	f7f7 f906 	bl	80005f8 <__aeabi_dmul>
 80093ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093f0:	1136      	asrs	r6, r6, #4
 80093f2:	2300      	movs	r3, #0
 80093f4:	2502      	movs	r5, #2
 80093f6:	2e00      	cmp	r6, #0
 80093f8:	d17e      	bne.n	80094f8 <_dtoa_r+0x4d8>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1d0      	bne.n	80093a0 <_dtoa_r+0x380>
 80093fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009400:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 8084 	beq.w	8009512 <_dtoa_r+0x4f2>
 800940a:	4b96      	ldr	r3, [pc, #600]	; (8009664 <_dtoa_r+0x644>)
 800940c:	2200      	movs	r2, #0
 800940e:	4640      	mov	r0, r8
 8009410:	4649      	mov	r1, r9
 8009412:	f7f7 fb63 	bl	8000adc <__aeabi_dcmplt>
 8009416:	2800      	cmp	r0, #0
 8009418:	d07b      	beq.n	8009512 <_dtoa_r+0x4f2>
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d078      	beq.n	8009512 <_dtoa_r+0x4f2>
 8009420:	9b01      	ldr	r3, [sp, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dd39      	ble.n	800949a <_dtoa_r+0x47a>
 8009426:	4b90      	ldr	r3, [pc, #576]	; (8009668 <_dtoa_r+0x648>)
 8009428:	2200      	movs	r2, #0
 800942a:	4640      	mov	r0, r8
 800942c:	4649      	mov	r1, r9
 800942e:	f7f7 f8e3 	bl	80005f8 <__aeabi_dmul>
 8009432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009436:	9e01      	ldr	r6, [sp, #4]
 8009438:	f10b 37ff 	add.w	r7, fp, #4294967295
 800943c:	3501      	adds	r5, #1
 800943e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009442:	4628      	mov	r0, r5
 8009444:	f7f7 f86e 	bl	8000524 <__aeabi_i2d>
 8009448:	4642      	mov	r2, r8
 800944a:	464b      	mov	r3, r9
 800944c:	f7f7 f8d4 	bl	80005f8 <__aeabi_dmul>
 8009450:	4b86      	ldr	r3, [pc, #536]	; (800966c <_dtoa_r+0x64c>)
 8009452:	2200      	movs	r2, #0
 8009454:	f7f6 ff1a 	bl	800028c <__adddf3>
 8009458:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800945c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009460:	9303      	str	r3, [sp, #12]
 8009462:	2e00      	cmp	r6, #0
 8009464:	d158      	bne.n	8009518 <_dtoa_r+0x4f8>
 8009466:	4b82      	ldr	r3, [pc, #520]	; (8009670 <_dtoa_r+0x650>)
 8009468:	2200      	movs	r2, #0
 800946a:	4640      	mov	r0, r8
 800946c:	4649      	mov	r1, r9
 800946e:	f7f6 ff0b 	bl	8000288 <__aeabi_dsub>
 8009472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009476:	4680      	mov	r8, r0
 8009478:	4689      	mov	r9, r1
 800947a:	f7f7 fb4d 	bl	8000b18 <__aeabi_dcmpgt>
 800947e:	2800      	cmp	r0, #0
 8009480:	f040 8296 	bne.w	80099b0 <_dtoa_r+0x990>
 8009484:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009488:	4640      	mov	r0, r8
 800948a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800948e:	4649      	mov	r1, r9
 8009490:	f7f7 fb24 	bl	8000adc <__aeabi_dcmplt>
 8009494:	2800      	cmp	r0, #0
 8009496:	f040 8289 	bne.w	80099ac <_dtoa_r+0x98c>
 800949a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800949e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f2c0 814e 	blt.w	8009742 <_dtoa_r+0x722>
 80094a6:	f1bb 0f0e 	cmp.w	fp, #14
 80094aa:	f300 814a 	bgt.w	8009742 <_dtoa_r+0x722>
 80094ae:	4b6b      	ldr	r3, [pc, #428]	; (800965c <_dtoa_r+0x63c>)
 80094b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80094b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f280 80dc 	bge.w	8009678 <_dtoa_r+0x658>
 80094c0:	9b04      	ldr	r3, [sp, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f300 80d8 	bgt.w	8009678 <_dtoa_r+0x658>
 80094c8:	f040 826f 	bne.w	80099aa <_dtoa_r+0x98a>
 80094cc:	4b68      	ldr	r3, [pc, #416]	; (8009670 <_dtoa_r+0x650>)
 80094ce:	2200      	movs	r2, #0
 80094d0:	4640      	mov	r0, r8
 80094d2:	4649      	mov	r1, r9
 80094d4:	f7f7 f890 	bl	80005f8 <__aeabi_dmul>
 80094d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094dc:	f7f7 fb12 	bl	8000b04 <__aeabi_dcmpge>
 80094e0:	9e04      	ldr	r6, [sp, #16]
 80094e2:	4637      	mov	r7, r6
 80094e4:	2800      	cmp	r0, #0
 80094e6:	f040 8245 	bne.w	8009974 <_dtoa_r+0x954>
 80094ea:	9d00      	ldr	r5, [sp, #0]
 80094ec:	2331      	movs	r3, #49	; 0x31
 80094ee:	f805 3b01 	strb.w	r3, [r5], #1
 80094f2:	f10b 0b01 	add.w	fp, fp, #1
 80094f6:	e241      	b.n	800997c <_dtoa_r+0x95c>
 80094f8:	07f2      	lsls	r2, r6, #31
 80094fa:	d505      	bpl.n	8009508 <_dtoa_r+0x4e8>
 80094fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009500:	f7f7 f87a 	bl	80005f8 <__aeabi_dmul>
 8009504:	3501      	adds	r5, #1
 8009506:	2301      	movs	r3, #1
 8009508:	1076      	asrs	r6, r6, #1
 800950a:	3708      	adds	r7, #8
 800950c:	e773      	b.n	80093f6 <_dtoa_r+0x3d6>
 800950e:	2502      	movs	r5, #2
 8009510:	e775      	b.n	80093fe <_dtoa_r+0x3de>
 8009512:	9e04      	ldr	r6, [sp, #16]
 8009514:	465f      	mov	r7, fp
 8009516:	e792      	b.n	800943e <_dtoa_r+0x41e>
 8009518:	9900      	ldr	r1, [sp, #0]
 800951a:	4b50      	ldr	r3, [pc, #320]	; (800965c <_dtoa_r+0x63c>)
 800951c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009520:	4431      	add	r1, r6
 8009522:	9102      	str	r1, [sp, #8]
 8009524:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009526:	eeb0 9a47 	vmov.f32	s18, s14
 800952a:	eef0 9a67 	vmov.f32	s19, s15
 800952e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009532:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009536:	2900      	cmp	r1, #0
 8009538:	d044      	beq.n	80095c4 <_dtoa_r+0x5a4>
 800953a:	494e      	ldr	r1, [pc, #312]	; (8009674 <_dtoa_r+0x654>)
 800953c:	2000      	movs	r0, #0
 800953e:	f7f7 f985 	bl	800084c <__aeabi_ddiv>
 8009542:	ec53 2b19 	vmov	r2, r3, d9
 8009546:	f7f6 fe9f 	bl	8000288 <__aeabi_dsub>
 800954a:	9d00      	ldr	r5, [sp, #0]
 800954c:	ec41 0b19 	vmov	d9, r0, r1
 8009550:	4649      	mov	r1, r9
 8009552:	4640      	mov	r0, r8
 8009554:	f7f7 fb00 	bl	8000b58 <__aeabi_d2iz>
 8009558:	4606      	mov	r6, r0
 800955a:	f7f6 ffe3 	bl	8000524 <__aeabi_i2d>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	4640      	mov	r0, r8
 8009564:	4649      	mov	r1, r9
 8009566:	f7f6 fe8f 	bl	8000288 <__aeabi_dsub>
 800956a:	3630      	adds	r6, #48	; 0x30
 800956c:	f805 6b01 	strb.w	r6, [r5], #1
 8009570:	ec53 2b19 	vmov	r2, r3, d9
 8009574:	4680      	mov	r8, r0
 8009576:	4689      	mov	r9, r1
 8009578:	f7f7 fab0 	bl	8000adc <__aeabi_dcmplt>
 800957c:	2800      	cmp	r0, #0
 800957e:	d164      	bne.n	800964a <_dtoa_r+0x62a>
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	4937      	ldr	r1, [pc, #220]	; (8009664 <_dtoa_r+0x644>)
 8009586:	2000      	movs	r0, #0
 8009588:	f7f6 fe7e 	bl	8000288 <__aeabi_dsub>
 800958c:	ec53 2b19 	vmov	r2, r3, d9
 8009590:	f7f7 faa4 	bl	8000adc <__aeabi_dcmplt>
 8009594:	2800      	cmp	r0, #0
 8009596:	f040 80b6 	bne.w	8009706 <_dtoa_r+0x6e6>
 800959a:	9b02      	ldr	r3, [sp, #8]
 800959c:	429d      	cmp	r5, r3
 800959e:	f43f af7c 	beq.w	800949a <_dtoa_r+0x47a>
 80095a2:	4b31      	ldr	r3, [pc, #196]	; (8009668 <_dtoa_r+0x648>)
 80095a4:	ec51 0b19 	vmov	r0, r1, d9
 80095a8:	2200      	movs	r2, #0
 80095aa:	f7f7 f825 	bl	80005f8 <__aeabi_dmul>
 80095ae:	4b2e      	ldr	r3, [pc, #184]	; (8009668 <_dtoa_r+0x648>)
 80095b0:	ec41 0b19 	vmov	d9, r0, r1
 80095b4:	2200      	movs	r2, #0
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f7 f81d 	bl	80005f8 <__aeabi_dmul>
 80095be:	4680      	mov	r8, r0
 80095c0:	4689      	mov	r9, r1
 80095c2:	e7c5      	b.n	8009550 <_dtoa_r+0x530>
 80095c4:	ec51 0b17 	vmov	r0, r1, d7
 80095c8:	f7f7 f816 	bl	80005f8 <__aeabi_dmul>
 80095cc:	9b02      	ldr	r3, [sp, #8]
 80095ce:	9d00      	ldr	r5, [sp, #0]
 80095d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80095d2:	ec41 0b19 	vmov	d9, r0, r1
 80095d6:	4649      	mov	r1, r9
 80095d8:	4640      	mov	r0, r8
 80095da:	f7f7 fabd 	bl	8000b58 <__aeabi_d2iz>
 80095de:	4606      	mov	r6, r0
 80095e0:	f7f6 ffa0 	bl	8000524 <__aeabi_i2d>
 80095e4:	3630      	adds	r6, #48	; 0x30
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4640      	mov	r0, r8
 80095ec:	4649      	mov	r1, r9
 80095ee:	f7f6 fe4b 	bl	8000288 <__aeabi_dsub>
 80095f2:	f805 6b01 	strb.w	r6, [r5], #1
 80095f6:	9b02      	ldr	r3, [sp, #8]
 80095f8:	429d      	cmp	r5, r3
 80095fa:	4680      	mov	r8, r0
 80095fc:	4689      	mov	r9, r1
 80095fe:	f04f 0200 	mov.w	r2, #0
 8009602:	d124      	bne.n	800964e <_dtoa_r+0x62e>
 8009604:	4b1b      	ldr	r3, [pc, #108]	; (8009674 <_dtoa_r+0x654>)
 8009606:	ec51 0b19 	vmov	r0, r1, d9
 800960a:	f7f6 fe3f 	bl	800028c <__adddf3>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	f7f7 fa7f 	bl	8000b18 <__aeabi_dcmpgt>
 800961a:	2800      	cmp	r0, #0
 800961c:	d173      	bne.n	8009706 <_dtoa_r+0x6e6>
 800961e:	ec53 2b19 	vmov	r2, r3, d9
 8009622:	4914      	ldr	r1, [pc, #80]	; (8009674 <_dtoa_r+0x654>)
 8009624:	2000      	movs	r0, #0
 8009626:	f7f6 fe2f 	bl	8000288 <__aeabi_dsub>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4640      	mov	r0, r8
 8009630:	4649      	mov	r1, r9
 8009632:	f7f7 fa53 	bl	8000adc <__aeabi_dcmplt>
 8009636:	2800      	cmp	r0, #0
 8009638:	f43f af2f 	beq.w	800949a <_dtoa_r+0x47a>
 800963c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800963e:	1e6b      	subs	r3, r5, #1
 8009640:	930f      	str	r3, [sp, #60]	; 0x3c
 8009642:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009646:	2b30      	cmp	r3, #48	; 0x30
 8009648:	d0f8      	beq.n	800963c <_dtoa_r+0x61c>
 800964a:	46bb      	mov	fp, r7
 800964c:	e04a      	b.n	80096e4 <_dtoa_r+0x6c4>
 800964e:	4b06      	ldr	r3, [pc, #24]	; (8009668 <_dtoa_r+0x648>)
 8009650:	f7f6 ffd2 	bl	80005f8 <__aeabi_dmul>
 8009654:	4680      	mov	r8, r0
 8009656:	4689      	mov	r9, r1
 8009658:	e7bd      	b.n	80095d6 <_dtoa_r+0x5b6>
 800965a:	bf00      	nop
 800965c:	0800c848 	.word	0x0800c848
 8009660:	0800c820 	.word	0x0800c820
 8009664:	3ff00000 	.word	0x3ff00000
 8009668:	40240000 	.word	0x40240000
 800966c:	401c0000 	.word	0x401c0000
 8009670:	40140000 	.word	0x40140000
 8009674:	3fe00000 	.word	0x3fe00000
 8009678:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800967c:	9d00      	ldr	r5, [sp, #0]
 800967e:	4642      	mov	r2, r8
 8009680:	464b      	mov	r3, r9
 8009682:	4630      	mov	r0, r6
 8009684:	4639      	mov	r1, r7
 8009686:	f7f7 f8e1 	bl	800084c <__aeabi_ddiv>
 800968a:	f7f7 fa65 	bl	8000b58 <__aeabi_d2iz>
 800968e:	9001      	str	r0, [sp, #4]
 8009690:	f7f6 ff48 	bl	8000524 <__aeabi_i2d>
 8009694:	4642      	mov	r2, r8
 8009696:	464b      	mov	r3, r9
 8009698:	f7f6 ffae 	bl	80005f8 <__aeabi_dmul>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f6 fdf0 	bl	8000288 <__aeabi_dsub>
 80096a8:	9e01      	ldr	r6, [sp, #4]
 80096aa:	9f04      	ldr	r7, [sp, #16]
 80096ac:	3630      	adds	r6, #48	; 0x30
 80096ae:	f805 6b01 	strb.w	r6, [r5], #1
 80096b2:	9e00      	ldr	r6, [sp, #0]
 80096b4:	1bae      	subs	r6, r5, r6
 80096b6:	42b7      	cmp	r7, r6
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	d134      	bne.n	8009728 <_dtoa_r+0x708>
 80096be:	f7f6 fde5 	bl	800028c <__adddf3>
 80096c2:	4642      	mov	r2, r8
 80096c4:	464b      	mov	r3, r9
 80096c6:	4606      	mov	r6, r0
 80096c8:	460f      	mov	r7, r1
 80096ca:	f7f7 fa25 	bl	8000b18 <__aeabi_dcmpgt>
 80096ce:	b9c8      	cbnz	r0, 8009704 <_dtoa_r+0x6e4>
 80096d0:	4642      	mov	r2, r8
 80096d2:	464b      	mov	r3, r9
 80096d4:	4630      	mov	r0, r6
 80096d6:	4639      	mov	r1, r7
 80096d8:	f7f7 f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80096dc:	b110      	cbz	r0, 80096e4 <_dtoa_r+0x6c4>
 80096de:	9b01      	ldr	r3, [sp, #4]
 80096e0:	07db      	lsls	r3, r3, #31
 80096e2:	d40f      	bmi.n	8009704 <_dtoa_r+0x6e4>
 80096e4:	4651      	mov	r1, sl
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 fbcc 	bl	8009e84 <_Bfree>
 80096ec:	2300      	movs	r3, #0
 80096ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096f0:	702b      	strb	r3, [r5, #0]
 80096f2:	f10b 0301 	add.w	r3, fp, #1
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f43f ace2 	beq.w	80090c4 <_dtoa_r+0xa4>
 8009700:	601d      	str	r5, [r3, #0]
 8009702:	e4df      	b.n	80090c4 <_dtoa_r+0xa4>
 8009704:	465f      	mov	r7, fp
 8009706:	462b      	mov	r3, r5
 8009708:	461d      	mov	r5, r3
 800970a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800970e:	2a39      	cmp	r2, #57	; 0x39
 8009710:	d106      	bne.n	8009720 <_dtoa_r+0x700>
 8009712:	9a00      	ldr	r2, [sp, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d1f7      	bne.n	8009708 <_dtoa_r+0x6e8>
 8009718:	9900      	ldr	r1, [sp, #0]
 800971a:	2230      	movs	r2, #48	; 0x30
 800971c:	3701      	adds	r7, #1
 800971e:	700a      	strb	r2, [r1, #0]
 8009720:	781a      	ldrb	r2, [r3, #0]
 8009722:	3201      	adds	r2, #1
 8009724:	701a      	strb	r2, [r3, #0]
 8009726:	e790      	b.n	800964a <_dtoa_r+0x62a>
 8009728:	4ba3      	ldr	r3, [pc, #652]	; (80099b8 <_dtoa_r+0x998>)
 800972a:	2200      	movs	r2, #0
 800972c:	f7f6 ff64 	bl	80005f8 <__aeabi_dmul>
 8009730:	2200      	movs	r2, #0
 8009732:	2300      	movs	r3, #0
 8009734:	4606      	mov	r6, r0
 8009736:	460f      	mov	r7, r1
 8009738:	f7f7 f9c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800973c:	2800      	cmp	r0, #0
 800973e:	d09e      	beq.n	800967e <_dtoa_r+0x65e>
 8009740:	e7d0      	b.n	80096e4 <_dtoa_r+0x6c4>
 8009742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009744:	2a00      	cmp	r2, #0
 8009746:	f000 80ca 	beq.w	80098de <_dtoa_r+0x8be>
 800974a:	9a07      	ldr	r2, [sp, #28]
 800974c:	2a01      	cmp	r2, #1
 800974e:	f300 80ad 	bgt.w	80098ac <_dtoa_r+0x88c>
 8009752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009754:	2a00      	cmp	r2, #0
 8009756:	f000 80a5 	beq.w	80098a4 <_dtoa_r+0x884>
 800975a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800975e:	9e08      	ldr	r6, [sp, #32]
 8009760:	9d05      	ldr	r5, [sp, #20]
 8009762:	9a05      	ldr	r2, [sp, #20]
 8009764:	441a      	add	r2, r3
 8009766:	9205      	str	r2, [sp, #20]
 8009768:	9a06      	ldr	r2, [sp, #24]
 800976a:	2101      	movs	r1, #1
 800976c:	441a      	add	r2, r3
 800976e:	4620      	mov	r0, r4
 8009770:	9206      	str	r2, [sp, #24]
 8009772:	f000 fc87 	bl	800a084 <__i2b>
 8009776:	4607      	mov	r7, r0
 8009778:	b165      	cbz	r5, 8009794 <_dtoa_r+0x774>
 800977a:	9b06      	ldr	r3, [sp, #24]
 800977c:	2b00      	cmp	r3, #0
 800977e:	dd09      	ble.n	8009794 <_dtoa_r+0x774>
 8009780:	42ab      	cmp	r3, r5
 8009782:	9a05      	ldr	r2, [sp, #20]
 8009784:	bfa8      	it	ge
 8009786:	462b      	movge	r3, r5
 8009788:	1ad2      	subs	r2, r2, r3
 800978a:	9205      	str	r2, [sp, #20]
 800978c:	9a06      	ldr	r2, [sp, #24]
 800978e:	1aed      	subs	r5, r5, r3
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	9306      	str	r3, [sp, #24]
 8009794:	9b08      	ldr	r3, [sp, #32]
 8009796:	b1f3      	cbz	r3, 80097d6 <_dtoa_r+0x7b6>
 8009798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 80a3 	beq.w	80098e6 <_dtoa_r+0x8c6>
 80097a0:	2e00      	cmp	r6, #0
 80097a2:	dd10      	ble.n	80097c6 <_dtoa_r+0x7a6>
 80097a4:	4639      	mov	r1, r7
 80097a6:	4632      	mov	r2, r6
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 fd2b 	bl	800a204 <__pow5mult>
 80097ae:	4652      	mov	r2, sl
 80097b0:	4601      	mov	r1, r0
 80097b2:	4607      	mov	r7, r0
 80097b4:	4620      	mov	r0, r4
 80097b6:	f000 fc7b 	bl	800a0b0 <__multiply>
 80097ba:	4651      	mov	r1, sl
 80097bc:	4680      	mov	r8, r0
 80097be:	4620      	mov	r0, r4
 80097c0:	f000 fb60 	bl	8009e84 <_Bfree>
 80097c4:	46c2      	mov	sl, r8
 80097c6:	9b08      	ldr	r3, [sp, #32]
 80097c8:	1b9a      	subs	r2, r3, r6
 80097ca:	d004      	beq.n	80097d6 <_dtoa_r+0x7b6>
 80097cc:	4651      	mov	r1, sl
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 fd18 	bl	800a204 <__pow5mult>
 80097d4:	4682      	mov	sl, r0
 80097d6:	2101      	movs	r1, #1
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 fc53 	bl	800a084 <__i2b>
 80097de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	4606      	mov	r6, r0
 80097e4:	f340 8081 	ble.w	80098ea <_dtoa_r+0x8ca>
 80097e8:	461a      	mov	r2, r3
 80097ea:	4601      	mov	r1, r0
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 fd09 	bl	800a204 <__pow5mult>
 80097f2:	9b07      	ldr	r3, [sp, #28]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	4606      	mov	r6, r0
 80097f8:	dd7a      	ble.n	80098f0 <_dtoa_r+0x8d0>
 80097fa:	f04f 0800 	mov.w	r8, #0
 80097fe:	6933      	ldr	r3, [r6, #16]
 8009800:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009804:	6918      	ldr	r0, [r3, #16]
 8009806:	f000 fbef 	bl	8009fe8 <__hi0bits>
 800980a:	f1c0 0020 	rsb	r0, r0, #32
 800980e:	9b06      	ldr	r3, [sp, #24]
 8009810:	4418      	add	r0, r3
 8009812:	f010 001f 	ands.w	r0, r0, #31
 8009816:	f000 8094 	beq.w	8009942 <_dtoa_r+0x922>
 800981a:	f1c0 0320 	rsb	r3, r0, #32
 800981e:	2b04      	cmp	r3, #4
 8009820:	f340 8085 	ble.w	800992e <_dtoa_r+0x90e>
 8009824:	9b05      	ldr	r3, [sp, #20]
 8009826:	f1c0 001c 	rsb	r0, r0, #28
 800982a:	4403      	add	r3, r0
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	9b06      	ldr	r3, [sp, #24]
 8009830:	4403      	add	r3, r0
 8009832:	4405      	add	r5, r0
 8009834:	9306      	str	r3, [sp, #24]
 8009836:	9b05      	ldr	r3, [sp, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	dd05      	ble.n	8009848 <_dtoa_r+0x828>
 800983c:	4651      	mov	r1, sl
 800983e:	461a      	mov	r2, r3
 8009840:	4620      	mov	r0, r4
 8009842:	f000 fd39 	bl	800a2b8 <__lshift>
 8009846:	4682      	mov	sl, r0
 8009848:	9b06      	ldr	r3, [sp, #24]
 800984a:	2b00      	cmp	r3, #0
 800984c:	dd05      	ble.n	800985a <_dtoa_r+0x83a>
 800984e:	4631      	mov	r1, r6
 8009850:	461a      	mov	r2, r3
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fd30 	bl	800a2b8 <__lshift>
 8009858:	4606      	mov	r6, r0
 800985a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800985c:	2b00      	cmp	r3, #0
 800985e:	d072      	beq.n	8009946 <_dtoa_r+0x926>
 8009860:	4631      	mov	r1, r6
 8009862:	4650      	mov	r0, sl
 8009864:	f000 fd94 	bl	800a390 <__mcmp>
 8009868:	2800      	cmp	r0, #0
 800986a:	da6c      	bge.n	8009946 <_dtoa_r+0x926>
 800986c:	2300      	movs	r3, #0
 800986e:	4651      	mov	r1, sl
 8009870:	220a      	movs	r2, #10
 8009872:	4620      	mov	r0, r4
 8009874:	f000 fb28 	bl	8009ec8 <__multadd>
 8009878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800987e:	4682      	mov	sl, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 81b0 	beq.w	8009be6 <_dtoa_r+0xbc6>
 8009886:	2300      	movs	r3, #0
 8009888:	4639      	mov	r1, r7
 800988a:	220a      	movs	r2, #10
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fb1b 	bl	8009ec8 <__multadd>
 8009892:	9b01      	ldr	r3, [sp, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	4607      	mov	r7, r0
 8009898:	f300 8096 	bgt.w	80099c8 <_dtoa_r+0x9a8>
 800989c:	9b07      	ldr	r3, [sp, #28]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	dc59      	bgt.n	8009956 <_dtoa_r+0x936>
 80098a2:	e091      	b.n	80099c8 <_dtoa_r+0x9a8>
 80098a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098aa:	e758      	b.n	800975e <_dtoa_r+0x73e>
 80098ac:	9b04      	ldr	r3, [sp, #16]
 80098ae:	1e5e      	subs	r6, r3, #1
 80098b0:	9b08      	ldr	r3, [sp, #32]
 80098b2:	42b3      	cmp	r3, r6
 80098b4:	bfbf      	itttt	lt
 80098b6:	9b08      	ldrlt	r3, [sp, #32]
 80098b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80098ba:	9608      	strlt	r6, [sp, #32]
 80098bc:	1af3      	sublt	r3, r6, r3
 80098be:	bfb4      	ite	lt
 80098c0:	18d2      	addlt	r2, r2, r3
 80098c2:	1b9e      	subge	r6, r3, r6
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	bfbc      	itt	lt
 80098c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80098ca:	2600      	movlt	r6, #0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	bfb7      	itett	lt
 80098d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80098d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80098d8:	1a9d      	sublt	r5, r3, r2
 80098da:	2300      	movlt	r3, #0
 80098dc:	e741      	b.n	8009762 <_dtoa_r+0x742>
 80098de:	9e08      	ldr	r6, [sp, #32]
 80098e0:	9d05      	ldr	r5, [sp, #20]
 80098e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80098e4:	e748      	b.n	8009778 <_dtoa_r+0x758>
 80098e6:	9a08      	ldr	r2, [sp, #32]
 80098e8:	e770      	b.n	80097cc <_dtoa_r+0x7ac>
 80098ea:	9b07      	ldr	r3, [sp, #28]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	dc19      	bgt.n	8009924 <_dtoa_r+0x904>
 80098f0:	9b02      	ldr	r3, [sp, #8]
 80098f2:	b9bb      	cbnz	r3, 8009924 <_dtoa_r+0x904>
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098fa:	b99b      	cbnz	r3, 8009924 <_dtoa_r+0x904>
 80098fc:	9b03      	ldr	r3, [sp, #12]
 80098fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009902:	0d1b      	lsrs	r3, r3, #20
 8009904:	051b      	lsls	r3, r3, #20
 8009906:	b183      	cbz	r3, 800992a <_dtoa_r+0x90a>
 8009908:	9b05      	ldr	r3, [sp, #20]
 800990a:	3301      	adds	r3, #1
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	9b06      	ldr	r3, [sp, #24]
 8009910:	3301      	adds	r3, #1
 8009912:	9306      	str	r3, [sp, #24]
 8009914:	f04f 0801 	mov.w	r8, #1
 8009918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800991a:	2b00      	cmp	r3, #0
 800991c:	f47f af6f 	bne.w	80097fe <_dtoa_r+0x7de>
 8009920:	2001      	movs	r0, #1
 8009922:	e774      	b.n	800980e <_dtoa_r+0x7ee>
 8009924:	f04f 0800 	mov.w	r8, #0
 8009928:	e7f6      	b.n	8009918 <_dtoa_r+0x8f8>
 800992a:	4698      	mov	r8, r3
 800992c:	e7f4      	b.n	8009918 <_dtoa_r+0x8f8>
 800992e:	d082      	beq.n	8009836 <_dtoa_r+0x816>
 8009930:	9a05      	ldr	r2, [sp, #20]
 8009932:	331c      	adds	r3, #28
 8009934:	441a      	add	r2, r3
 8009936:	9205      	str	r2, [sp, #20]
 8009938:	9a06      	ldr	r2, [sp, #24]
 800993a:	441a      	add	r2, r3
 800993c:	441d      	add	r5, r3
 800993e:	9206      	str	r2, [sp, #24]
 8009940:	e779      	b.n	8009836 <_dtoa_r+0x816>
 8009942:	4603      	mov	r3, r0
 8009944:	e7f4      	b.n	8009930 <_dtoa_r+0x910>
 8009946:	9b04      	ldr	r3, [sp, #16]
 8009948:	2b00      	cmp	r3, #0
 800994a:	dc37      	bgt.n	80099bc <_dtoa_r+0x99c>
 800994c:	9b07      	ldr	r3, [sp, #28]
 800994e:	2b02      	cmp	r3, #2
 8009950:	dd34      	ble.n	80099bc <_dtoa_r+0x99c>
 8009952:	9b04      	ldr	r3, [sp, #16]
 8009954:	9301      	str	r3, [sp, #4]
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	b963      	cbnz	r3, 8009974 <_dtoa_r+0x954>
 800995a:	4631      	mov	r1, r6
 800995c:	2205      	movs	r2, #5
 800995e:	4620      	mov	r0, r4
 8009960:	f000 fab2 	bl	8009ec8 <__multadd>
 8009964:	4601      	mov	r1, r0
 8009966:	4606      	mov	r6, r0
 8009968:	4650      	mov	r0, sl
 800996a:	f000 fd11 	bl	800a390 <__mcmp>
 800996e:	2800      	cmp	r0, #0
 8009970:	f73f adbb 	bgt.w	80094ea <_dtoa_r+0x4ca>
 8009974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009976:	9d00      	ldr	r5, [sp, #0]
 8009978:	ea6f 0b03 	mvn.w	fp, r3
 800997c:	f04f 0800 	mov.w	r8, #0
 8009980:	4631      	mov	r1, r6
 8009982:	4620      	mov	r0, r4
 8009984:	f000 fa7e 	bl	8009e84 <_Bfree>
 8009988:	2f00      	cmp	r7, #0
 800998a:	f43f aeab 	beq.w	80096e4 <_dtoa_r+0x6c4>
 800998e:	f1b8 0f00 	cmp.w	r8, #0
 8009992:	d005      	beq.n	80099a0 <_dtoa_r+0x980>
 8009994:	45b8      	cmp	r8, r7
 8009996:	d003      	beq.n	80099a0 <_dtoa_r+0x980>
 8009998:	4641      	mov	r1, r8
 800999a:	4620      	mov	r0, r4
 800999c:	f000 fa72 	bl	8009e84 <_Bfree>
 80099a0:	4639      	mov	r1, r7
 80099a2:	4620      	mov	r0, r4
 80099a4:	f000 fa6e 	bl	8009e84 <_Bfree>
 80099a8:	e69c      	b.n	80096e4 <_dtoa_r+0x6c4>
 80099aa:	2600      	movs	r6, #0
 80099ac:	4637      	mov	r7, r6
 80099ae:	e7e1      	b.n	8009974 <_dtoa_r+0x954>
 80099b0:	46bb      	mov	fp, r7
 80099b2:	4637      	mov	r7, r6
 80099b4:	e599      	b.n	80094ea <_dtoa_r+0x4ca>
 80099b6:	bf00      	nop
 80099b8:	40240000 	.word	0x40240000
 80099bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 80c8 	beq.w	8009b54 <_dtoa_r+0xb34>
 80099c4:	9b04      	ldr	r3, [sp, #16]
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	2d00      	cmp	r5, #0
 80099ca:	dd05      	ble.n	80099d8 <_dtoa_r+0x9b8>
 80099cc:	4639      	mov	r1, r7
 80099ce:	462a      	mov	r2, r5
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 fc71 	bl	800a2b8 <__lshift>
 80099d6:	4607      	mov	r7, r0
 80099d8:	f1b8 0f00 	cmp.w	r8, #0
 80099dc:	d05b      	beq.n	8009a96 <_dtoa_r+0xa76>
 80099de:	6879      	ldr	r1, [r7, #4]
 80099e0:	4620      	mov	r0, r4
 80099e2:	f000 fa0f 	bl	8009e04 <_Balloc>
 80099e6:	4605      	mov	r5, r0
 80099e8:	b928      	cbnz	r0, 80099f6 <_dtoa_r+0x9d6>
 80099ea:	4b83      	ldr	r3, [pc, #524]	; (8009bf8 <_dtoa_r+0xbd8>)
 80099ec:	4602      	mov	r2, r0
 80099ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80099f2:	f7ff bb2e 	b.w	8009052 <_dtoa_r+0x32>
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	3202      	adds	r2, #2
 80099fa:	0092      	lsls	r2, r2, #2
 80099fc:	f107 010c 	add.w	r1, r7, #12
 8009a00:	300c      	adds	r0, #12
 8009a02:	f001 ff85 	bl	800b910 <memcpy>
 8009a06:	2201      	movs	r2, #1
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f000 fc54 	bl	800a2b8 <__lshift>
 8009a10:	9b00      	ldr	r3, [sp, #0]
 8009a12:	3301      	adds	r3, #1
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	9308      	str	r3, [sp, #32]
 8009a1e:	9b02      	ldr	r3, [sp, #8]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	46b8      	mov	r8, r7
 8009a26:	9306      	str	r3, [sp, #24]
 8009a28:	4607      	mov	r7, r0
 8009a2a:	9b04      	ldr	r3, [sp, #16]
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	4650      	mov	r0, sl
 8009a32:	9301      	str	r3, [sp, #4]
 8009a34:	f7ff fa6a 	bl	8008f0c <quorem>
 8009a38:	4641      	mov	r1, r8
 8009a3a:	9002      	str	r0, [sp, #8]
 8009a3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a40:	4650      	mov	r0, sl
 8009a42:	f000 fca5 	bl	800a390 <__mcmp>
 8009a46:	463a      	mov	r2, r7
 8009a48:	9005      	str	r0, [sp, #20]
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f000 fcbb 	bl	800a3c8 <__mdiff>
 8009a52:	68c2      	ldr	r2, [r0, #12]
 8009a54:	4605      	mov	r5, r0
 8009a56:	bb02      	cbnz	r2, 8009a9a <_dtoa_r+0xa7a>
 8009a58:	4601      	mov	r1, r0
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	f000 fc98 	bl	800a390 <__mcmp>
 8009a60:	4602      	mov	r2, r0
 8009a62:	4629      	mov	r1, r5
 8009a64:	4620      	mov	r0, r4
 8009a66:	9209      	str	r2, [sp, #36]	; 0x24
 8009a68:	f000 fa0c 	bl	8009e84 <_Bfree>
 8009a6c:	9b07      	ldr	r3, [sp, #28]
 8009a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a70:	9d04      	ldr	r5, [sp, #16]
 8009a72:	ea43 0102 	orr.w	r1, r3, r2
 8009a76:	9b06      	ldr	r3, [sp, #24]
 8009a78:	4319      	orrs	r1, r3
 8009a7a:	d110      	bne.n	8009a9e <_dtoa_r+0xa7e>
 8009a7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a80:	d029      	beq.n	8009ad6 <_dtoa_r+0xab6>
 8009a82:	9b05      	ldr	r3, [sp, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	dd02      	ble.n	8009a8e <_dtoa_r+0xa6e>
 8009a88:	9b02      	ldr	r3, [sp, #8]
 8009a8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009a8e:	9b01      	ldr	r3, [sp, #4]
 8009a90:	f883 9000 	strb.w	r9, [r3]
 8009a94:	e774      	b.n	8009980 <_dtoa_r+0x960>
 8009a96:	4638      	mov	r0, r7
 8009a98:	e7ba      	b.n	8009a10 <_dtoa_r+0x9f0>
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	e7e1      	b.n	8009a62 <_dtoa_r+0xa42>
 8009a9e:	9b05      	ldr	r3, [sp, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	db04      	blt.n	8009aae <_dtoa_r+0xa8e>
 8009aa4:	9907      	ldr	r1, [sp, #28]
 8009aa6:	430b      	orrs	r3, r1
 8009aa8:	9906      	ldr	r1, [sp, #24]
 8009aaa:	430b      	orrs	r3, r1
 8009aac:	d120      	bne.n	8009af0 <_dtoa_r+0xad0>
 8009aae:	2a00      	cmp	r2, #0
 8009ab0:	dded      	ble.n	8009a8e <_dtoa_r+0xa6e>
 8009ab2:	4651      	mov	r1, sl
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f000 fbfe 	bl	800a2b8 <__lshift>
 8009abc:	4631      	mov	r1, r6
 8009abe:	4682      	mov	sl, r0
 8009ac0:	f000 fc66 	bl	800a390 <__mcmp>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	dc03      	bgt.n	8009ad0 <_dtoa_r+0xab0>
 8009ac8:	d1e1      	bne.n	8009a8e <_dtoa_r+0xa6e>
 8009aca:	f019 0f01 	tst.w	r9, #1
 8009ace:	d0de      	beq.n	8009a8e <_dtoa_r+0xa6e>
 8009ad0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ad4:	d1d8      	bne.n	8009a88 <_dtoa_r+0xa68>
 8009ad6:	9a01      	ldr	r2, [sp, #4]
 8009ad8:	2339      	movs	r3, #57	; 0x39
 8009ada:	7013      	strb	r3, [r2, #0]
 8009adc:	462b      	mov	r3, r5
 8009ade:	461d      	mov	r5, r3
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ae6:	2a39      	cmp	r2, #57	; 0x39
 8009ae8:	d06c      	beq.n	8009bc4 <_dtoa_r+0xba4>
 8009aea:	3201      	adds	r2, #1
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	e747      	b.n	8009980 <_dtoa_r+0x960>
 8009af0:	2a00      	cmp	r2, #0
 8009af2:	dd07      	ble.n	8009b04 <_dtoa_r+0xae4>
 8009af4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009af8:	d0ed      	beq.n	8009ad6 <_dtoa_r+0xab6>
 8009afa:	9a01      	ldr	r2, [sp, #4]
 8009afc:	f109 0301 	add.w	r3, r9, #1
 8009b00:	7013      	strb	r3, [r2, #0]
 8009b02:	e73d      	b.n	8009980 <_dtoa_r+0x960>
 8009b04:	9b04      	ldr	r3, [sp, #16]
 8009b06:	9a08      	ldr	r2, [sp, #32]
 8009b08:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d043      	beq.n	8009b98 <_dtoa_r+0xb78>
 8009b10:	4651      	mov	r1, sl
 8009b12:	2300      	movs	r3, #0
 8009b14:	220a      	movs	r2, #10
 8009b16:	4620      	mov	r0, r4
 8009b18:	f000 f9d6 	bl	8009ec8 <__multadd>
 8009b1c:	45b8      	cmp	r8, r7
 8009b1e:	4682      	mov	sl, r0
 8009b20:	f04f 0300 	mov.w	r3, #0
 8009b24:	f04f 020a 	mov.w	r2, #10
 8009b28:	4641      	mov	r1, r8
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	d107      	bne.n	8009b3e <_dtoa_r+0xb1e>
 8009b2e:	f000 f9cb 	bl	8009ec8 <__multadd>
 8009b32:	4680      	mov	r8, r0
 8009b34:	4607      	mov	r7, r0
 8009b36:	9b04      	ldr	r3, [sp, #16]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	e775      	b.n	8009a2a <_dtoa_r+0xa0a>
 8009b3e:	f000 f9c3 	bl	8009ec8 <__multadd>
 8009b42:	4639      	mov	r1, r7
 8009b44:	4680      	mov	r8, r0
 8009b46:	2300      	movs	r3, #0
 8009b48:	220a      	movs	r2, #10
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 f9bc 	bl	8009ec8 <__multadd>
 8009b50:	4607      	mov	r7, r0
 8009b52:	e7f0      	b.n	8009b36 <_dtoa_r+0xb16>
 8009b54:	9b04      	ldr	r3, [sp, #16]
 8009b56:	9301      	str	r3, [sp, #4]
 8009b58:	9d00      	ldr	r5, [sp, #0]
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4650      	mov	r0, sl
 8009b5e:	f7ff f9d5 	bl	8008f0c <quorem>
 8009b62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b66:	9b00      	ldr	r3, [sp, #0]
 8009b68:	f805 9b01 	strb.w	r9, [r5], #1
 8009b6c:	1aea      	subs	r2, r5, r3
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	4293      	cmp	r3, r2
 8009b72:	dd07      	ble.n	8009b84 <_dtoa_r+0xb64>
 8009b74:	4651      	mov	r1, sl
 8009b76:	2300      	movs	r3, #0
 8009b78:	220a      	movs	r2, #10
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 f9a4 	bl	8009ec8 <__multadd>
 8009b80:	4682      	mov	sl, r0
 8009b82:	e7ea      	b.n	8009b5a <_dtoa_r+0xb3a>
 8009b84:	9b01      	ldr	r3, [sp, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bfc8      	it	gt
 8009b8a:	461d      	movgt	r5, r3
 8009b8c:	9b00      	ldr	r3, [sp, #0]
 8009b8e:	bfd8      	it	le
 8009b90:	2501      	movle	r5, #1
 8009b92:	441d      	add	r5, r3
 8009b94:	f04f 0800 	mov.w	r8, #0
 8009b98:	4651      	mov	r1, sl
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f000 fb8b 	bl	800a2b8 <__lshift>
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4682      	mov	sl, r0
 8009ba6:	f000 fbf3 	bl	800a390 <__mcmp>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	dc96      	bgt.n	8009adc <_dtoa_r+0xabc>
 8009bae:	d102      	bne.n	8009bb6 <_dtoa_r+0xb96>
 8009bb0:	f019 0f01 	tst.w	r9, #1
 8009bb4:	d192      	bne.n	8009adc <_dtoa_r+0xabc>
 8009bb6:	462b      	mov	r3, r5
 8009bb8:	461d      	mov	r5, r3
 8009bba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bbe:	2a30      	cmp	r2, #48	; 0x30
 8009bc0:	d0fa      	beq.n	8009bb8 <_dtoa_r+0xb98>
 8009bc2:	e6dd      	b.n	8009980 <_dtoa_r+0x960>
 8009bc4:	9a00      	ldr	r2, [sp, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d189      	bne.n	8009ade <_dtoa_r+0xabe>
 8009bca:	f10b 0b01 	add.w	fp, fp, #1
 8009bce:	2331      	movs	r3, #49	; 0x31
 8009bd0:	e796      	b.n	8009b00 <_dtoa_r+0xae0>
 8009bd2:	4b0a      	ldr	r3, [pc, #40]	; (8009bfc <_dtoa_r+0xbdc>)
 8009bd4:	f7ff ba99 	b.w	800910a <_dtoa_r+0xea>
 8009bd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f47f aa6d 	bne.w	80090ba <_dtoa_r+0x9a>
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <_dtoa_r+0xbe0>)
 8009be2:	f7ff ba92 	b.w	800910a <_dtoa_r+0xea>
 8009be6:	9b01      	ldr	r3, [sp, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dcb5      	bgt.n	8009b58 <_dtoa_r+0xb38>
 8009bec:	9b07      	ldr	r3, [sp, #28]
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	f73f aeb1 	bgt.w	8009956 <_dtoa_r+0x936>
 8009bf4:	e7b0      	b.n	8009b58 <_dtoa_r+0xb38>
 8009bf6:	bf00      	nop
 8009bf8:	0800c7b5 	.word	0x0800c7b5
 8009bfc:	0800c710 	.word	0x0800c710
 8009c00:	0800c739 	.word	0x0800c739

08009c04 <_free_r>:
 8009c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c06:	2900      	cmp	r1, #0
 8009c08:	d044      	beq.n	8009c94 <_free_r+0x90>
 8009c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c0e:	9001      	str	r0, [sp, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f1a1 0404 	sub.w	r4, r1, #4
 8009c16:	bfb8      	it	lt
 8009c18:	18e4      	addlt	r4, r4, r3
 8009c1a:	f000 f8e7 	bl	8009dec <__malloc_lock>
 8009c1e:	4a1e      	ldr	r2, [pc, #120]	; (8009c98 <_free_r+0x94>)
 8009c20:	9801      	ldr	r0, [sp, #4]
 8009c22:	6813      	ldr	r3, [r2, #0]
 8009c24:	b933      	cbnz	r3, 8009c34 <_free_r+0x30>
 8009c26:	6063      	str	r3, [r4, #4]
 8009c28:	6014      	str	r4, [r2, #0]
 8009c2a:	b003      	add	sp, #12
 8009c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c30:	f000 b8e2 	b.w	8009df8 <__malloc_unlock>
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	d908      	bls.n	8009c4a <_free_r+0x46>
 8009c38:	6825      	ldr	r5, [r4, #0]
 8009c3a:	1961      	adds	r1, r4, r5
 8009c3c:	428b      	cmp	r3, r1
 8009c3e:	bf01      	itttt	eq
 8009c40:	6819      	ldreq	r1, [r3, #0]
 8009c42:	685b      	ldreq	r3, [r3, #4]
 8009c44:	1949      	addeq	r1, r1, r5
 8009c46:	6021      	streq	r1, [r4, #0]
 8009c48:	e7ed      	b.n	8009c26 <_free_r+0x22>
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	b10b      	cbz	r3, 8009c54 <_free_r+0x50>
 8009c50:	42a3      	cmp	r3, r4
 8009c52:	d9fa      	bls.n	8009c4a <_free_r+0x46>
 8009c54:	6811      	ldr	r1, [r2, #0]
 8009c56:	1855      	adds	r5, r2, r1
 8009c58:	42a5      	cmp	r5, r4
 8009c5a:	d10b      	bne.n	8009c74 <_free_r+0x70>
 8009c5c:	6824      	ldr	r4, [r4, #0]
 8009c5e:	4421      	add	r1, r4
 8009c60:	1854      	adds	r4, r2, r1
 8009c62:	42a3      	cmp	r3, r4
 8009c64:	6011      	str	r1, [r2, #0]
 8009c66:	d1e0      	bne.n	8009c2a <_free_r+0x26>
 8009c68:	681c      	ldr	r4, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	6053      	str	r3, [r2, #4]
 8009c6e:	440c      	add	r4, r1
 8009c70:	6014      	str	r4, [r2, #0]
 8009c72:	e7da      	b.n	8009c2a <_free_r+0x26>
 8009c74:	d902      	bls.n	8009c7c <_free_r+0x78>
 8009c76:	230c      	movs	r3, #12
 8009c78:	6003      	str	r3, [r0, #0]
 8009c7a:	e7d6      	b.n	8009c2a <_free_r+0x26>
 8009c7c:	6825      	ldr	r5, [r4, #0]
 8009c7e:	1961      	adds	r1, r4, r5
 8009c80:	428b      	cmp	r3, r1
 8009c82:	bf04      	itt	eq
 8009c84:	6819      	ldreq	r1, [r3, #0]
 8009c86:	685b      	ldreq	r3, [r3, #4]
 8009c88:	6063      	str	r3, [r4, #4]
 8009c8a:	bf04      	itt	eq
 8009c8c:	1949      	addeq	r1, r1, r5
 8009c8e:	6021      	streq	r1, [r4, #0]
 8009c90:	6054      	str	r4, [r2, #4]
 8009c92:	e7ca      	b.n	8009c2a <_free_r+0x26>
 8009c94:	b003      	add	sp, #12
 8009c96:	bd30      	pop	{r4, r5, pc}
 8009c98:	20000620 	.word	0x20000620

08009c9c <malloc>:
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <malloc+0xc>)
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	f000 b823 	b.w	8009cec <_malloc_r>
 8009ca6:	bf00      	nop
 8009ca8:	20000064 	.word	0x20000064

08009cac <sbrk_aligned>:
 8009cac:	b570      	push	{r4, r5, r6, lr}
 8009cae:	4e0e      	ldr	r6, [pc, #56]	; (8009ce8 <sbrk_aligned+0x3c>)
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	6831      	ldr	r1, [r6, #0]
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	b911      	cbnz	r1, 8009cbe <sbrk_aligned+0x12>
 8009cb8:	f001 fe1a 	bl	800b8f0 <_sbrk_r>
 8009cbc:	6030      	str	r0, [r6, #0]
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f001 fe15 	bl	800b8f0 <_sbrk_r>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	d00a      	beq.n	8009ce0 <sbrk_aligned+0x34>
 8009cca:	1cc4      	adds	r4, r0, #3
 8009ccc:	f024 0403 	bic.w	r4, r4, #3
 8009cd0:	42a0      	cmp	r0, r4
 8009cd2:	d007      	beq.n	8009ce4 <sbrk_aligned+0x38>
 8009cd4:	1a21      	subs	r1, r4, r0
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f001 fe0a 	bl	800b8f0 <_sbrk_r>
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d101      	bne.n	8009ce4 <sbrk_aligned+0x38>
 8009ce0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
 8009ce8:	20000624 	.word	0x20000624

08009cec <_malloc_r>:
 8009cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf0:	1ccd      	adds	r5, r1, #3
 8009cf2:	f025 0503 	bic.w	r5, r5, #3
 8009cf6:	3508      	adds	r5, #8
 8009cf8:	2d0c      	cmp	r5, #12
 8009cfa:	bf38      	it	cc
 8009cfc:	250c      	movcc	r5, #12
 8009cfe:	2d00      	cmp	r5, #0
 8009d00:	4607      	mov	r7, r0
 8009d02:	db01      	blt.n	8009d08 <_malloc_r+0x1c>
 8009d04:	42a9      	cmp	r1, r5
 8009d06:	d905      	bls.n	8009d14 <_malloc_r+0x28>
 8009d08:	230c      	movs	r3, #12
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	2600      	movs	r6, #0
 8009d0e:	4630      	mov	r0, r6
 8009d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009de8 <_malloc_r+0xfc>
 8009d18:	f000 f868 	bl	8009dec <__malloc_lock>
 8009d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d20:	461c      	mov	r4, r3
 8009d22:	bb5c      	cbnz	r4, 8009d7c <_malloc_r+0x90>
 8009d24:	4629      	mov	r1, r5
 8009d26:	4638      	mov	r0, r7
 8009d28:	f7ff ffc0 	bl	8009cac <sbrk_aligned>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	4604      	mov	r4, r0
 8009d30:	d155      	bne.n	8009dde <_malloc_r+0xf2>
 8009d32:	f8d8 4000 	ldr.w	r4, [r8]
 8009d36:	4626      	mov	r6, r4
 8009d38:	2e00      	cmp	r6, #0
 8009d3a:	d145      	bne.n	8009dc8 <_malloc_r+0xdc>
 8009d3c:	2c00      	cmp	r4, #0
 8009d3e:	d048      	beq.n	8009dd2 <_malloc_r+0xe6>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	4631      	mov	r1, r6
 8009d44:	4638      	mov	r0, r7
 8009d46:	eb04 0903 	add.w	r9, r4, r3
 8009d4a:	f001 fdd1 	bl	800b8f0 <_sbrk_r>
 8009d4e:	4581      	cmp	r9, r0
 8009d50:	d13f      	bne.n	8009dd2 <_malloc_r+0xe6>
 8009d52:	6821      	ldr	r1, [r4, #0]
 8009d54:	1a6d      	subs	r5, r5, r1
 8009d56:	4629      	mov	r1, r5
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f7ff ffa7 	bl	8009cac <sbrk_aligned>
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d037      	beq.n	8009dd2 <_malloc_r+0xe6>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	442b      	add	r3, r5
 8009d66:	6023      	str	r3, [r4, #0]
 8009d68:	f8d8 3000 	ldr.w	r3, [r8]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d038      	beq.n	8009de2 <_malloc_r+0xf6>
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	42a2      	cmp	r2, r4
 8009d74:	d12b      	bne.n	8009dce <_malloc_r+0xe2>
 8009d76:	2200      	movs	r2, #0
 8009d78:	605a      	str	r2, [r3, #4]
 8009d7a:	e00f      	b.n	8009d9c <_malloc_r+0xb0>
 8009d7c:	6822      	ldr	r2, [r4, #0]
 8009d7e:	1b52      	subs	r2, r2, r5
 8009d80:	d41f      	bmi.n	8009dc2 <_malloc_r+0xd6>
 8009d82:	2a0b      	cmp	r2, #11
 8009d84:	d917      	bls.n	8009db6 <_malloc_r+0xca>
 8009d86:	1961      	adds	r1, r4, r5
 8009d88:	42a3      	cmp	r3, r4
 8009d8a:	6025      	str	r5, [r4, #0]
 8009d8c:	bf18      	it	ne
 8009d8e:	6059      	strne	r1, [r3, #4]
 8009d90:	6863      	ldr	r3, [r4, #4]
 8009d92:	bf08      	it	eq
 8009d94:	f8c8 1000 	streq.w	r1, [r8]
 8009d98:	5162      	str	r2, [r4, r5]
 8009d9a:	604b      	str	r3, [r1, #4]
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f104 060b 	add.w	r6, r4, #11
 8009da2:	f000 f829 	bl	8009df8 <__malloc_unlock>
 8009da6:	f026 0607 	bic.w	r6, r6, #7
 8009daa:	1d23      	adds	r3, r4, #4
 8009dac:	1af2      	subs	r2, r6, r3
 8009dae:	d0ae      	beq.n	8009d0e <_malloc_r+0x22>
 8009db0:	1b9b      	subs	r3, r3, r6
 8009db2:	50a3      	str	r3, [r4, r2]
 8009db4:	e7ab      	b.n	8009d0e <_malloc_r+0x22>
 8009db6:	42a3      	cmp	r3, r4
 8009db8:	6862      	ldr	r2, [r4, #4]
 8009dba:	d1dd      	bne.n	8009d78 <_malloc_r+0x8c>
 8009dbc:	f8c8 2000 	str.w	r2, [r8]
 8009dc0:	e7ec      	b.n	8009d9c <_malloc_r+0xb0>
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	6864      	ldr	r4, [r4, #4]
 8009dc6:	e7ac      	b.n	8009d22 <_malloc_r+0x36>
 8009dc8:	4634      	mov	r4, r6
 8009dca:	6876      	ldr	r6, [r6, #4]
 8009dcc:	e7b4      	b.n	8009d38 <_malloc_r+0x4c>
 8009dce:	4613      	mov	r3, r2
 8009dd0:	e7cc      	b.n	8009d6c <_malloc_r+0x80>
 8009dd2:	230c      	movs	r3, #12
 8009dd4:	603b      	str	r3, [r7, #0]
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f000 f80e 	bl	8009df8 <__malloc_unlock>
 8009ddc:	e797      	b.n	8009d0e <_malloc_r+0x22>
 8009dde:	6025      	str	r5, [r4, #0]
 8009de0:	e7dc      	b.n	8009d9c <_malloc_r+0xb0>
 8009de2:	605b      	str	r3, [r3, #4]
 8009de4:	deff      	udf	#255	; 0xff
 8009de6:	bf00      	nop
 8009de8:	20000620 	.word	0x20000620

08009dec <__malloc_lock>:
 8009dec:	4801      	ldr	r0, [pc, #4]	; (8009df4 <__malloc_lock+0x8>)
 8009dee:	f7ff b884 	b.w	8008efa <__retarget_lock_acquire_recursive>
 8009df2:	bf00      	nop
 8009df4:	2000061c 	.word	0x2000061c

08009df8 <__malloc_unlock>:
 8009df8:	4801      	ldr	r0, [pc, #4]	; (8009e00 <__malloc_unlock+0x8>)
 8009dfa:	f7ff b87f 	b.w	8008efc <__retarget_lock_release_recursive>
 8009dfe:	bf00      	nop
 8009e00:	2000061c 	.word	0x2000061c

08009e04 <_Balloc>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	69c6      	ldr	r6, [r0, #28]
 8009e08:	4604      	mov	r4, r0
 8009e0a:	460d      	mov	r5, r1
 8009e0c:	b976      	cbnz	r6, 8009e2c <_Balloc+0x28>
 8009e0e:	2010      	movs	r0, #16
 8009e10:	f7ff ff44 	bl	8009c9c <malloc>
 8009e14:	4602      	mov	r2, r0
 8009e16:	61e0      	str	r0, [r4, #28]
 8009e18:	b920      	cbnz	r0, 8009e24 <_Balloc+0x20>
 8009e1a:	4b18      	ldr	r3, [pc, #96]	; (8009e7c <_Balloc+0x78>)
 8009e1c:	4818      	ldr	r0, [pc, #96]	; (8009e80 <_Balloc+0x7c>)
 8009e1e:	216b      	movs	r1, #107	; 0x6b
 8009e20:	f001 fd8e 	bl	800b940 <__assert_func>
 8009e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e28:	6006      	str	r6, [r0, #0]
 8009e2a:	60c6      	str	r6, [r0, #12]
 8009e2c:	69e6      	ldr	r6, [r4, #28]
 8009e2e:	68f3      	ldr	r3, [r6, #12]
 8009e30:	b183      	cbz	r3, 8009e54 <_Balloc+0x50>
 8009e32:	69e3      	ldr	r3, [r4, #28]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e3a:	b9b8      	cbnz	r0, 8009e6c <_Balloc+0x68>
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	fa01 f605 	lsl.w	r6, r1, r5
 8009e42:	1d72      	adds	r2, r6, #5
 8009e44:	0092      	lsls	r2, r2, #2
 8009e46:	4620      	mov	r0, r4
 8009e48:	f001 fd98 	bl	800b97c <_calloc_r>
 8009e4c:	b160      	cbz	r0, 8009e68 <_Balloc+0x64>
 8009e4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e52:	e00e      	b.n	8009e72 <_Balloc+0x6e>
 8009e54:	2221      	movs	r2, #33	; 0x21
 8009e56:	2104      	movs	r1, #4
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f001 fd8f 	bl	800b97c <_calloc_r>
 8009e5e:	69e3      	ldr	r3, [r4, #28]
 8009e60:	60f0      	str	r0, [r6, #12]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1e4      	bne.n	8009e32 <_Balloc+0x2e>
 8009e68:	2000      	movs	r0, #0
 8009e6a:	bd70      	pop	{r4, r5, r6, pc}
 8009e6c:	6802      	ldr	r2, [r0, #0]
 8009e6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e72:	2300      	movs	r3, #0
 8009e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e78:	e7f7      	b.n	8009e6a <_Balloc+0x66>
 8009e7a:	bf00      	nop
 8009e7c:	0800c746 	.word	0x0800c746
 8009e80:	0800c7c6 	.word	0x0800c7c6

08009e84 <_Bfree>:
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	69c6      	ldr	r6, [r0, #28]
 8009e88:	4605      	mov	r5, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	b976      	cbnz	r6, 8009eac <_Bfree+0x28>
 8009e8e:	2010      	movs	r0, #16
 8009e90:	f7ff ff04 	bl	8009c9c <malloc>
 8009e94:	4602      	mov	r2, r0
 8009e96:	61e8      	str	r0, [r5, #28]
 8009e98:	b920      	cbnz	r0, 8009ea4 <_Bfree+0x20>
 8009e9a:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <_Bfree+0x3c>)
 8009e9c:	4809      	ldr	r0, [pc, #36]	; (8009ec4 <_Bfree+0x40>)
 8009e9e:	218f      	movs	r1, #143	; 0x8f
 8009ea0:	f001 fd4e 	bl	800b940 <__assert_func>
 8009ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ea8:	6006      	str	r6, [r0, #0]
 8009eaa:	60c6      	str	r6, [r0, #12]
 8009eac:	b13c      	cbz	r4, 8009ebe <_Bfree+0x3a>
 8009eae:	69eb      	ldr	r3, [r5, #28]
 8009eb0:	6862      	ldr	r2, [r4, #4]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009eb8:	6021      	str	r1, [r4, #0]
 8009eba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ebe:	bd70      	pop	{r4, r5, r6, pc}
 8009ec0:	0800c746 	.word	0x0800c746
 8009ec4:	0800c7c6 	.word	0x0800c7c6

08009ec8 <__multadd>:
 8009ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ecc:	690d      	ldr	r5, [r1, #16]
 8009ece:	4607      	mov	r7, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	461e      	mov	r6, r3
 8009ed4:	f101 0c14 	add.w	ip, r1, #20
 8009ed8:	2000      	movs	r0, #0
 8009eda:	f8dc 3000 	ldr.w	r3, [ip]
 8009ede:	b299      	uxth	r1, r3
 8009ee0:	fb02 6101 	mla	r1, r2, r1, r6
 8009ee4:	0c1e      	lsrs	r6, r3, #16
 8009ee6:	0c0b      	lsrs	r3, r1, #16
 8009ee8:	fb02 3306 	mla	r3, r2, r6, r3
 8009eec:	b289      	uxth	r1, r1
 8009eee:	3001      	adds	r0, #1
 8009ef0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ef4:	4285      	cmp	r5, r0
 8009ef6:	f84c 1b04 	str.w	r1, [ip], #4
 8009efa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009efe:	dcec      	bgt.n	8009eda <__multadd+0x12>
 8009f00:	b30e      	cbz	r6, 8009f46 <__multadd+0x7e>
 8009f02:	68a3      	ldr	r3, [r4, #8]
 8009f04:	42ab      	cmp	r3, r5
 8009f06:	dc19      	bgt.n	8009f3c <__multadd+0x74>
 8009f08:	6861      	ldr	r1, [r4, #4]
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	3101      	adds	r1, #1
 8009f0e:	f7ff ff79 	bl	8009e04 <_Balloc>
 8009f12:	4680      	mov	r8, r0
 8009f14:	b928      	cbnz	r0, 8009f22 <__multadd+0x5a>
 8009f16:	4602      	mov	r2, r0
 8009f18:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <__multadd+0x84>)
 8009f1a:	480d      	ldr	r0, [pc, #52]	; (8009f50 <__multadd+0x88>)
 8009f1c:	21ba      	movs	r1, #186	; 0xba
 8009f1e:	f001 fd0f 	bl	800b940 <__assert_func>
 8009f22:	6922      	ldr	r2, [r4, #16]
 8009f24:	3202      	adds	r2, #2
 8009f26:	f104 010c 	add.w	r1, r4, #12
 8009f2a:	0092      	lsls	r2, r2, #2
 8009f2c:	300c      	adds	r0, #12
 8009f2e:	f001 fcef 	bl	800b910 <memcpy>
 8009f32:	4621      	mov	r1, r4
 8009f34:	4638      	mov	r0, r7
 8009f36:	f7ff ffa5 	bl	8009e84 <_Bfree>
 8009f3a:	4644      	mov	r4, r8
 8009f3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f40:	3501      	adds	r5, #1
 8009f42:	615e      	str	r6, [r3, #20]
 8009f44:	6125      	str	r5, [r4, #16]
 8009f46:	4620      	mov	r0, r4
 8009f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f4c:	0800c7b5 	.word	0x0800c7b5
 8009f50:	0800c7c6 	.word	0x0800c7c6

08009f54 <__s2b>:
 8009f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f58:	460c      	mov	r4, r1
 8009f5a:	4615      	mov	r5, r2
 8009f5c:	461f      	mov	r7, r3
 8009f5e:	2209      	movs	r2, #9
 8009f60:	3308      	adds	r3, #8
 8009f62:	4606      	mov	r6, r0
 8009f64:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f68:	2100      	movs	r1, #0
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	db09      	blt.n	8009f84 <__s2b+0x30>
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7ff ff47 	bl	8009e04 <_Balloc>
 8009f76:	b940      	cbnz	r0, 8009f8a <__s2b+0x36>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <__s2b+0x8c>)
 8009f7c:	4819      	ldr	r0, [pc, #100]	; (8009fe4 <__s2b+0x90>)
 8009f7e:	21d3      	movs	r1, #211	; 0xd3
 8009f80:	f001 fcde 	bl	800b940 <__assert_func>
 8009f84:	0052      	lsls	r2, r2, #1
 8009f86:	3101      	adds	r1, #1
 8009f88:	e7f0      	b.n	8009f6c <__s2b+0x18>
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	6143      	str	r3, [r0, #20]
 8009f8e:	2d09      	cmp	r5, #9
 8009f90:	f04f 0301 	mov.w	r3, #1
 8009f94:	6103      	str	r3, [r0, #16]
 8009f96:	dd16      	ble.n	8009fc6 <__s2b+0x72>
 8009f98:	f104 0909 	add.w	r9, r4, #9
 8009f9c:	46c8      	mov	r8, r9
 8009f9e:	442c      	add	r4, r5
 8009fa0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fa4:	4601      	mov	r1, r0
 8009fa6:	3b30      	subs	r3, #48	; 0x30
 8009fa8:	220a      	movs	r2, #10
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff ff8c 	bl	8009ec8 <__multadd>
 8009fb0:	45a0      	cmp	r8, r4
 8009fb2:	d1f5      	bne.n	8009fa0 <__s2b+0x4c>
 8009fb4:	f1a5 0408 	sub.w	r4, r5, #8
 8009fb8:	444c      	add	r4, r9
 8009fba:	1b2d      	subs	r5, r5, r4
 8009fbc:	1963      	adds	r3, r4, r5
 8009fbe:	42bb      	cmp	r3, r7
 8009fc0:	db04      	blt.n	8009fcc <__s2b+0x78>
 8009fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc6:	340a      	adds	r4, #10
 8009fc8:	2509      	movs	r5, #9
 8009fca:	e7f6      	b.n	8009fba <__s2b+0x66>
 8009fcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fd0:	4601      	mov	r1, r0
 8009fd2:	3b30      	subs	r3, #48	; 0x30
 8009fd4:	220a      	movs	r2, #10
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f7ff ff76 	bl	8009ec8 <__multadd>
 8009fdc:	e7ee      	b.n	8009fbc <__s2b+0x68>
 8009fde:	bf00      	nop
 8009fe0:	0800c7b5 	.word	0x0800c7b5
 8009fe4:	0800c7c6 	.word	0x0800c7c6

08009fe8 <__hi0bits>:
 8009fe8:	0c03      	lsrs	r3, r0, #16
 8009fea:	041b      	lsls	r3, r3, #16
 8009fec:	b9d3      	cbnz	r3, 800a024 <__hi0bits+0x3c>
 8009fee:	0400      	lsls	r0, r0, #16
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ff6:	bf04      	itt	eq
 8009ff8:	0200      	lsleq	r0, r0, #8
 8009ffa:	3308      	addeq	r3, #8
 8009ffc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a000:	bf04      	itt	eq
 800a002:	0100      	lsleq	r0, r0, #4
 800a004:	3304      	addeq	r3, #4
 800a006:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a00a:	bf04      	itt	eq
 800a00c:	0080      	lsleq	r0, r0, #2
 800a00e:	3302      	addeq	r3, #2
 800a010:	2800      	cmp	r0, #0
 800a012:	db05      	blt.n	800a020 <__hi0bits+0x38>
 800a014:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a018:	f103 0301 	add.w	r3, r3, #1
 800a01c:	bf08      	it	eq
 800a01e:	2320      	moveq	r3, #32
 800a020:	4618      	mov	r0, r3
 800a022:	4770      	bx	lr
 800a024:	2300      	movs	r3, #0
 800a026:	e7e4      	b.n	8009ff2 <__hi0bits+0xa>

0800a028 <__lo0bits>:
 800a028:	6803      	ldr	r3, [r0, #0]
 800a02a:	f013 0207 	ands.w	r2, r3, #7
 800a02e:	d00c      	beq.n	800a04a <__lo0bits+0x22>
 800a030:	07d9      	lsls	r1, r3, #31
 800a032:	d422      	bmi.n	800a07a <__lo0bits+0x52>
 800a034:	079a      	lsls	r2, r3, #30
 800a036:	bf49      	itett	mi
 800a038:	085b      	lsrmi	r3, r3, #1
 800a03a:	089b      	lsrpl	r3, r3, #2
 800a03c:	6003      	strmi	r3, [r0, #0]
 800a03e:	2201      	movmi	r2, #1
 800a040:	bf5c      	itt	pl
 800a042:	6003      	strpl	r3, [r0, #0]
 800a044:	2202      	movpl	r2, #2
 800a046:	4610      	mov	r0, r2
 800a048:	4770      	bx	lr
 800a04a:	b299      	uxth	r1, r3
 800a04c:	b909      	cbnz	r1, 800a052 <__lo0bits+0x2a>
 800a04e:	0c1b      	lsrs	r3, r3, #16
 800a050:	2210      	movs	r2, #16
 800a052:	b2d9      	uxtb	r1, r3
 800a054:	b909      	cbnz	r1, 800a05a <__lo0bits+0x32>
 800a056:	3208      	adds	r2, #8
 800a058:	0a1b      	lsrs	r3, r3, #8
 800a05a:	0719      	lsls	r1, r3, #28
 800a05c:	bf04      	itt	eq
 800a05e:	091b      	lsreq	r3, r3, #4
 800a060:	3204      	addeq	r2, #4
 800a062:	0799      	lsls	r1, r3, #30
 800a064:	bf04      	itt	eq
 800a066:	089b      	lsreq	r3, r3, #2
 800a068:	3202      	addeq	r2, #2
 800a06a:	07d9      	lsls	r1, r3, #31
 800a06c:	d403      	bmi.n	800a076 <__lo0bits+0x4e>
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	f102 0201 	add.w	r2, r2, #1
 800a074:	d003      	beq.n	800a07e <__lo0bits+0x56>
 800a076:	6003      	str	r3, [r0, #0]
 800a078:	e7e5      	b.n	800a046 <__lo0bits+0x1e>
 800a07a:	2200      	movs	r2, #0
 800a07c:	e7e3      	b.n	800a046 <__lo0bits+0x1e>
 800a07e:	2220      	movs	r2, #32
 800a080:	e7e1      	b.n	800a046 <__lo0bits+0x1e>
	...

0800a084 <__i2b>:
 800a084:	b510      	push	{r4, lr}
 800a086:	460c      	mov	r4, r1
 800a088:	2101      	movs	r1, #1
 800a08a:	f7ff febb 	bl	8009e04 <_Balloc>
 800a08e:	4602      	mov	r2, r0
 800a090:	b928      	cbnz	r0, 800a09e <__i2b+0x1a>
 800a092:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <__i2b+0x24>)
 800a094:	4805      	ldr	r0, [pc, #20]	; (800a0ac <__i2b+0x28>)
 800a096:	f240 1145 	movw	r1, #325	; 0x145
 800a09a:	f001 fc51 	bl	800b940 <__assert_func>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	6144      	str	r4, [r0, #20]
 800a0a2:	6103      	str	r3, [r0, #16]
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	bf00      	nop
 800a0a8:	0800c7b5 	.word	0x0800c7b5
 800a0ac:	0800c7c6 	.word	0x0800c7c6

0800a0b0 <__multiply>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	4691      	mov	r9, r2
 800a0b6:	690a      	ldr	r2, [r1, #16]
 800a0b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	bfb8      	it	lt
 800a0c0:	460b      	movlt	r3, r1
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	bfbc      	itt	lt
 800a0c6:	464c      	movlt	r4, r9
 800a0c8:	4699      	movlt	r9, r3
 800a0ca:	6927      	ldr	r7, [r4, #16]
 800a0cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0d0:	68a3      	ldr	r3, [r4, #8]
 800a0d2:	6861      	ldr	r1, [r4, #4]
 800a0d4:	eb07 060a 	add.w	r6, r7, sl
 800a0d8:	42b3      	cmp	r3, r6
 800a0da:	b085      	sub	sp, #20
 800a0dc:	bfb8      	it	lt
 800a0de:	3101      	addlt	r1, #1
 800a0e0:	f7ff fe90 	bl	8009e04 <_Balloc>
 800a0e4:	b930      	cbnz	r0, 800a0f4 <__multiply+0x44>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	4b44      	ldr	r3, [pc, #272]	; (800a1fc <__multiply+0x14c>)
 800a0ea:	4845      	ldr	r0, [pc, #276]	; (800a200 <__multiply+0x150>)
 800a0ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a0f0:	f001 fc26 	bl	800b940 <__assert_func>
 800a0f4:	f100 0514 	add.w	r5, r0, #20
 800a0f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0fc:	462b      	mov	r3, r5
 800a0fe:	2200      	movs	r2, #0
 800a100:	4543      	cmp	r3, r8
 800a102:	d321      	bcc.n	800a148 <__multiply+0x98>
 800a104:	f104 0314 	add.w	r3, r4, #20
 800a108:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a10c:	f109 0314 	add.w	r3, r9, #20
 800a110:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a114:	9202      	str	r2, [sp, #8]
 800a116:	1b3a      	subs	r2, r7, r4
 800a118:	3a15      	subs	r2, #21
 800a11a:	f022 0203 	bic.w	r2, r2, #3
 800a11e:	3204      	adds	r2, #4
 800a120:	f104 0115 	add.w	r1, r4, #21
 800a124:	428f      	cmp	r7, r1
 800a126:	bf38      	it	cc
 800a128:	2204      	movcc	r2, #4
 800a12a:	9201      	str	r2, [sp, #4]
 800a12c:	9a02      	ldr	r2, [sp, #8]
 800a12e:	9303      	str	r3, [sp, #12]
 800a130:	429a      	cmp	r2, r3
 800a132:	d80c      	bhi.n	800a14e <__multiply+0x9e>
 800a134:	2e00      	cmp	r6, #0
 800a136:	dd03      	ble.n	800a140 <__multiply+0x90>
 800a138:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d05b      	beq.n	800a1f8 <__multiply+0x148>
 800a140:	6106      	str	r6, [r0, #16]
 800a142:	b005      	add	sp, #20
 800a144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a148:	f843 2b04 	str.w	r2, [r3], #4
 800a14c:	e7d8      	b.n	800a100 <__multiply+0x50>
 800a14e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a152:	f1ba 0f00 	cmp.w	sl, #0
 800a156:	d024      	beq.n	800a1a2 <__multiply+0xf2>
 800a158:	f104 0e14 	add.w	lr, r4, #20
 800a15c:	46a9      	mov	r9, r5
 800a15e:	f04f 0c00 	mov.w	ip, #0
 800a162:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a166:	f8d9 1000 	ldr.w	r1, [r9]
 800a16a:	fa1f fb82 	uxth.w	fp, r2
 800a16e:	b289      	uxth	r1, r1
 800a170:	fb0a 110b 	mla	r1, sl, fp, r1
 800a174:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a178:	f8d9 2000 	ldr.w	r2, [r9]
 800a17c:	4461      	add	r1, ip
 800a17e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a182:	fb0a c20b 	mla	r2, sl, fp, ip
 800a186:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a18a:	b289      	uxth	r1, r1
 800a18c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a190:	4577      	cmp	r7, lr
 800a192:	f849 1b04 	str.w	r1, [r9], #4
 800a196:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a19a:	d8e2      	bhi.n	800a162 <__multiply+0xb2>
 800a19c:	9a01      	ldr	r2, [sp, #4]
 800a19e:	f845 c002 	str.w	ip, [r5, r2]
 800a1a2:	9a03      	ldr	r2, [sp, #12]
 800a1a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	f1b9 0f00 	cmp.w	r9, #0
 800a1ae:	d021      	beq.n	800a1f4 <__multiply+0x144>
 800a1b0:	6829      	ldr	r1, [r5, #0]
 800a1b2:	f104 0c14 	add.w	ip, r4, #20
 800a1b6:	46ae      	mov	lr, r5
 800a1b8:	f04f 0a00 	mov.w	sl, #0
 800a1bc:	f8bc b000 	ldrh.w	fp, [ip]
 800a1c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1c4:	fb09 220b 	mla	r2, r9, fp, r2
 800a1c8:	4452      	add	r2, sl
 800a1ca:	b289      	uxth	r1, r1
 800a1cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1d0:	f84e 1b04 	str.w	r1, [lr], #4
 800a1d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a1d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1dc:	f8be 1000 	ldrh.w	r1, [lr]
 800a1e0:	fb09 110a 	mla	r1, r9, sl, r1
 800a1e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a1e8:	4567      	cmp	r7, ip
 800a1ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1ee:	d8e5      	bhi.n	800a1bc <__multiply+0x10c>
 800a1f0:	9a01      	ldr	r2, [sp, #4]
 800a1f2:	50a9      	str	r1, [r5, r2]
 800a1f4:	3504      	adds	r5, #4
 800a1f6:	e799      	b.n	800a12c <__multiply+0x7c>
 800a1f8:	3e01      	subs	r6, #1
 800a1fa:	e79b      	b.n	800a134 <__multiply+0x84>
 800a1fc:	0800c7b5 	.word	0x0800c7b5
 800a200:	0800c7c6 	.word	0x0800c7c6

0800a204 <__pow5mult>:
 800a204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a208:	4615      	mov	r5, r2
 800a20a:	f012 0203 	ands.w	r2, r2, #3
 800a20e:	4606      	mov	r6, r0
 800a210:	460f      	mov	r7, r1
 800a212:	d007      	beq.n	800a224 <__pow5mult+0x20>
 800a214:	4c25      	ldr	r4, [pc, #148]	; (800a2ac <__pow5mult+0xa8>)
 800a216:	3a01      	subs	r2, #1
 800a218:	2300      	movs	r3, #0
 800a21a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a21e:	f7ff fe53 	bl	8009ec8 <__multadd>
 800a222:	4607      	mov	r7, r0
 800a224:	10ad      	asrs	r5, r5, #2
 800a226:	d03d      	beq.n	800a2a4 <__pow5mult+0xa0>
 800a228:	69f4      	ldr	r4, [r6, #28]
 800a22a:	b97c      	cbnz	r4, 800a24c <__pow5mult+0x48>
 800a22c:	2010      	movs	r0, #16
 800a22e:	f7ff fd35 	bl	8009c9c <malloc>
 800a232:	4602      	mov	r2, r0
 800a234:	61f0      	str	r0, [r6, #28]
 800a236:	b928      	cbnz	r0, 800a244 <__pow5mult+0x40>
 800a238:	4b1d      	ldr	r3, [pc, #116]	; (800a2b0 <__pow5mult+0xac>)
 800a23a:	481e      	ldr	r0, [pc, #120]	; (800a2b4 <__pow5mult+0xb0>)
 800a23c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a240:	f001 fb7e 	bl	800b940 <__assert_func>
 800a244:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a248:	6004      	str	r4, [r0, #0]
 800a24a:	60c4      	str	r4, [r0, #12]
 800a24c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a250:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a254:	b94c      	cbnz	r4, 800a26a <__pow5mult+0x66>
 800a256:	f240 2171 	movw	r1, #625	; 0x271
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7ff ff12 	bl	800a084 <__i2b>
 800a260:	2300      	movs	r3, #0
 800a262:	f8c8 0008 	str.w	r0, [r8, #8]
 800a266:	4604      	mov	r4, r0
 800a268:	6003      	str	r3, [r0, #0]
 800a26a:	f04f 0900 	mov.w	r9, #0
 800a26e:	07eb      	lsls	r3, r5, #31
 800a270:	d50a      	bpl.n	800a288 <__pow5mult+0x84>
 800a272:	4639      	mov	r1, r7
 800a274:	4622      	mov	r2, r4
 800a276:	4630      	mov	r0, r6
 800a278:	f7ff ff1a 	bl	800a0b0 <__multiply>
 800a27c:	4639      	mov	r1, r7
 800a27e:	4680      	mov	r8, r0
 800a280:	4630      	mov	r0, r6
 800a282:	f7ff fdff 	bl	8009e84 <_Bfree>
 800a286:	4647      	mov	r7, r8
 800a288:	106d      	asrs	r5, r5, #1
 800a28a:	d00b      	beq.n	800a2a4 <__pow5mult+0xa0>
 800a28c:	6820      	ldr	r0, [r4, #0]
 800a28e:	b938      	cbnz	r0, 800a2a0 <__pow5mult+0x9c>
 800a290:	4622      	mov	r2, r4
 800a292:	4621      	mov	r1, r4
 800a294:	4630      	mov	r0, r6
 800a296:	f7ff ff0b 	bl	800a0b0 <__multiply>
 800a29a:	6020      	str	r0, [r4, #0]
 800a29c:	f8c0 9000 	str.w	r9, [r0]
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	e7e4      	b.n	800a26e <__pow5mult+0x6a>
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2aa:	bf00      	nop
 800a2ac:	0800c910 	.word	0x0800c910
 800a2b0:	0800c746 	.word	0x0800c746
 800a2b4:	0800c7c6 	.word	0x0800c7c6

0800a2b8 <__lshift>:
 800a2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2bc:	460c      	mov	r4, r1
 800a2be:	6849      	ldr	r1, [r1, #4]
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2c6:	68a3      	ldr	r3, [r4, #8]
 800a2c8:	4607      	mov	r7, r0
 800a2ca:	4691      	mov	r9, r2
 800a2cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2d0:	f108 0601 	add.w	r6, r8, #1
 800a2d4:	42b3      	cmp	r3, r6
 800a2d6:	db0b      	blt.n	800a2f0 <__lshift+0x38>
 800a2d8:	4638      	mov	r0, r7
 800a2da:	f7ff fd93 	bl	8009e04 <_Balloc>
 800a2de:	4605      	mov	r5, r0
 800a2e0:	b948      	cbnz	r0, 800a2f6 <__lshift+0x3e>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	4b28      	ldr	r3, [pc, #160]	; (800a388 <__lshift+0xd0>)
 800a2e6:	4829      	ldr	r0, [pc, #164]	; (800a38c <__lshift+0xd4>)
 800a2e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a2ec:	f001 fb28 	bl	800b940 <__assert_func>
 800a2f0:	3101      	adds	r1, #1
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	e7ee      	b.n	800a2d4 <__lshift+0x1c>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f100 0114 	add.w	r1, r0, #20
 800a2fc:	f100 0210 	add.w	r2, r0, #16
 800a300:	4618      	mov	r0, r3
 800a302:	4553      	cmp	r3, sl
 800a304:	db33      	blt.n	800a36e <__lshift+0xb6>
 800a306:	6920      	ldr	r0, [r4, #16]
 800a308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a30c:	f104 0314 	add.w	r3, r4, #20
 800a310:	f019 091f 	ands.w	r9, r9, #31
 800a314:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a318:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a31c:	d02b      	beq.n	800a376 <__lshift+0xbe>
 800a31e:	f1c9 0e20 	rsb	lr, r9, #32
 800a322:	468a      	mov	sl, r1
 800a324:	2200      	movs	r2, #0
 800a326:	6818      	ldr	r0, [r3, #0]
 800a328:	fa00 f009 	lsl.w	r0, r0, r9
 800a32c:	4310      	orrs	r0, r2
 800a32e:	f84a 0b04 	str.w	r0, [sl], #4
 800a332:	f853 2b04 	ldr.w	r2, [r3], #4
 800a336:	459c      	cmp	ip, r3
 800a338:	fa22 f20e 	lsr.w	r2, r2, lr
 800a33c:	d8f3      	bhi.n	800a326 <__lshift+0x6e>
 800a33e:	ebac 0304 	sub.w	r3, ip, r4
 800a342:	3b15      	subs	r3, #21
 800a344:	f023 0303 	bic.w	r3, r3, #3
 800a348:	3304      	adds	r3, #4
 800a34a:	f104 0015 	add.w	r0, r4, #21
 800a34e:	4584      	cmp	ip, r0
 800a350:	bf38      	it	cc
 800a352:	2304      	movcc	r3, #4
 800a354:	50ca      	str	r2, [r1, r3]
 800a356:	b10a      	cbz	r2, 800a35c <__lshift+0xa4>
 800a358:	f108 0602 	add.w	r6, r8, #2
 800a35c:	3e01      	subs	r6, #1
 800a35e:	4638      	mov	r0, r7
 800a360:	612e      	str	r6, [r5, #16]
 800a362:	4621      	mov	r1, r4
 800a364:	f7ff fd8e 	bl	8009e84 <_Bfree>
 800a368:	4628      	mov	r0, r5
 800a36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a372:	3301      	adds	r3, #1
 800a374:	e7c5      	b.n	800a302 <__lshift+0x4a>
 800a376:	3904      	subs	r1, #4
 800a378:	f853 2b04 	ldr.w	r2, [r3], #4
 800a37c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a380:	459c      	cmp	ip, r3
 800a382:	d8f9      	bhi.n	800a378 <__lshift+0xc0>
 800a384:	e7ea      	b.n	800a35c <__lshift+0xa4>
 800a386:	bf00      	nop
 800a388:	0800c7b5 	.word	0x0800c7b5
 800a38c:	0800c7c6 	.word	0x0800c7c6

0800a390 <__mcmp>:
 800a390:	b530      	push	{r4, r5, lr}
 800a392:	6902      	ldr	r2, [r0, #16]
 800a394:	690c      	ldr	r4, [r1, #16]
 800a396:	1b12      	subs	r2, r2, r4
 800a398:	d10e      	bne.n	800a3b8 <__mcmp+0x28>
 800a39a:	f100 0314 	add.w	r3, r0, #20
 800a39e:	3114      	adds	r1, #20
 800a3a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3b0:	42a5      	cmp	r5, r4
 800a3b2:	d003      	beq.n	800a3bc <__mcmp+0x2c>
 800a3b4:	d305      	bcc.n	800a3c2 <__mcmp+0x32>
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	bd30      	pop	{r4, r5, pc}
 800a3bc:	4283      	cmp	r3, r0
 800a3be:	d3f3      	bcc.n	800a3a8 <__mcmp+0x18>
 800a3c0:	e7fa      	b.n	800a3b8 <__mcmp+0x28>
 800a3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c6:	e7f7      	b.n	800a3b8 <__mcmp+0x28>

0800a3c8 <__mdiff>:
 800a3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	4690      	mov	r8, r2
 800a3d6:	f7ff ffdb 	bl	800a390 <__mcmp>
 800a3da:	1e05      	subs	r5, r0, #0
 800a3dc:	d110      	bne.n	800a400 <__mdiff+0x38>
 800a3de:	4629      	mov	r1, r5
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7ff fd0f 	bl	8009e04 <_Balloc>
 800a3e6:	b930      	cbnz	r0, 800a3f6 <__mdiff+0x2e>
 800a3e8:	4b3a      	ldr	r3, [pc, #232]	; (800a4d4 <__mdiff+0x10c>)
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	f240 2137 	movw	r1, #567	; 0x237
 800a3f0:	4839      	ldr	r0, [pc, #228]	; (800a4d8 <__mdiff+0x110>)
 800a3f2:	f001 faa5 	bl	800b940 <__assert_func>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a400:	bfa4      	itt	ge
 800a402:	4643      	movge	r3, r8
 800a404:	46a0      	movge	r8, r4
 800a406:	4630      	mov	r0, r6
 800a408:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a40c:	bfa6      	itte	ge
 800a40e:	461c      	movge	r4, r3
 800a410:	2500      	movge	r5, #0
 800a412:	2501      	movlt	r5, #1
 800a414:	f7ff fcf6 	bl	8009e04 <_Balloc>
 800a418:	b920      	cbnz	r0, 800a424 <__mdiff+0x5c>
 800a41a:	4b2e      	ldr	r3, [pc, #184]	; (800a4d4 <__mdiff+0x10c>)
 800a41c:	4602      	mov	r2, r0
 800a41e:	f240 2145 	movw	r1, #581	; 0x245
 800a422:	e7e5      	b.n	800a3f0 <__mdiff+0x28>
 800a424:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a428:	6926      	ldr	r6, [r4, #16]
 800a42a:	60c5      	str	r5, [r0, #12]
 800a42c:	f104 0914 	add.w	r9, r4, #20
 800a430:	f108 0514 	add.w	r5, r8, #20
 800a434:	f100 0e14 	add.w	lr, r0, #20
 800a438:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a43c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a440:	f108 0210 	add.w	r2, r8, #16
 800a444:	46f2      	mov	sl, lr
 800a446:	2100      	movs	r1, #0
 800a448:	f859 3b04 	ldr.w	r3, [r9], #4
 800a44c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a450:	fa11 f88b 	uxtah	r8, r1, fp
 800a454:	b299      	uxth	r1, r3
 800a456:	0c1b      	lsrs	r3, r3, #16
 800a458:	eba8 0801 	sub.w	r8, r8, r1
 800a45c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a460:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a464:	fa1f f888 	uxth.w	r8, r8
 800a468:	1419      	asrs	r1, r3, #16
 800a46a:	454e      	cmp	r6, r9
 800a46c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a470:	f84a 3b04 	str.w	r3, [sl], #4
 800a474:	d8e8      	bhi.n	800a448 <__mdiff+0x80>
 800a476:	1b33      	subs	r3, r6, r4
 800a478:	3b15      	subs	r3, #21
 800a47a:	f023 0303 	bic.w	r3, r3, #3
 800a47e:	3304      	adds	r3, #4
 800a480:	3415      	adds	r4, #21
 800a482:	42a6      	cmp	r6, r4
 800a484:	bf38      	it	cc
 800a486:	2304      	movcc	r3, #4
 800a488:	441d      	add	r5, r3
 800a48a:	4473      	add	r3, lr
 800a48c:	469e      	mov	lr, r3
 800a48e:	462e      	mov	r6, r5
 800a490:	4566      	cmp	r6, ip
 800a492:	d30e      	bcc.n	800a4b2 <__mdiff+0xea>
 800a494:	f10c 0203 	add.w	r2, ip, #3
 800a498:	1b52      	subs	r2, r2, r5
 800a49a:	f022 0203 	bic.w	r2, r2, #3
 800a49e:	3d03      	subs	r5, #3
 800a4a0:	45ac      	cmp	ip, r5
 800a4a2:	bf38      	it	cc
 800a4a4:	2200      	movcc	r2, #0
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a4ac:	b17a      	cbz	r2, 800a4ce <__mdiff+0x106>
 800a4ae:	6107      	str	r7, [r0, #16]
 800a4b0:	e7a4      	b.n	800a3fc <__mdiff+0x34>
 800a4b2:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4b6:	fa11 f288 	uxtah	r2, r1, r8
 800a4ba:	1414      	asrs	r4, r2, #16
 800a4bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4c0:	b292      	uxth	r2, r2
 800a4c2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4c6:	f84e 2b04 	str.w	r2, [lr], #4
 800a4ca:	1421      	asrs	r1, r4, #16
 800a4cc:	e7e0      	b.n	800a490 <__mdiff+0xc8>
 800a4ce:	3f01      	subs	r7, #1
 800a4d0:	e7ea      	b.n	800a4a8 <__mdiff+0xe0>
 800a4d2:	bf00      	nop
 800a4d4:	0800c7b5 	.word	0x0800c7b5
 800a4d8:	0800c7c6 	.word	0x0800c7c6

0800a4dc <__ulp>:
 800a4dc:	b082      	sub	sp, #8
 800a4de:	ed8d 0b00 	vstr	d0, [sp]
 800a4e2:	9a01      	ldr	r2, [sp, #4]
 800a4e4:	4b0f      	ldr	r3, [pc, #60]	; (800a524 <__ulp+0x48>)
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	dc08      	bgt.n	800a502 <__ulp+0x26>
 800a4f0:	425b      	negs	r3, r3
 800a4f2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a4f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a4fa:	da04      	bge.n	800a506 <__ulp+0x2a>
 800a4fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a500:	4113      	asrs	r3, r2
 800a502:	2200      	movs	r2, #0
 800a504:	e008      	b.n	800a518 <__ulp+0x3c>
 800a506:	f1a2 0314 	sub.w	r3, r2, #20
 800a50a:	2b1e      	cmp	r3, #30
 800a50c:	bfda      	itte	le
 800a50e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a512:	40da      	lsrle	r2, r3
 800a514:	2201      	movgt	r2, #1
 800a516:	2300      	movs	r3, #0
 800a518:	4619      	mov	r1, r3
 800a51a:	4610      	mov	r0, r2
 800a51c:	ec41 0b10 	vmov	d0, r0, r1
 800a520:	b002      	add	sp, #8
 800a522:	4770      	bx	lr
 800a524:	7ff00000 	.word	0x7ff00000

0800a528 <__b2d>:
 800a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52c:	6906      	ldr	r6, [r0, #16]
 800a52e:	f100 0814 	add.w	r8, r0, #20
 800a532:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a536:	1f37      	subs	r7, r6, #4
 800a538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a53c:	4610      	mov	r0, r2
 800a53e:	f7ff fd53 	bl	8009fe8 <__hi0bits>
 800a542:	f1c0 0320 	rsb	r3, r0, #32
 800a546:	280a      	cmp	r0, #10
 800a548:	600b      	str	r3, [r1, #0]
 800a54a:	491b      	ldr	r1, [pc, #108]	; (800a5b8 <__b2d+0x90>)
 800a54c:	dc15      	bgt.n	800a57a <__b2d+0x52>
 800a54e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a552:	fa22 f30c 	lsr.w	r3, r2, ip
 800a556:	45b8      	cmp	r8, r7
 800a558:	ea43 0501 	orr.w	r5, r3, r1
 800a55c:	bf34      	ite	cc
 800a55e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a562:	2300      	movcs	r3, #0
 800a564:	3015      	adds	r0, #21
 800a566:	fa02 f000 	lsl.w	r0, r2, r0
 800a56a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a56e:	4303      	orrs	r3, r0
 800a570:	461c      	mov	r4, r3
 800a572:	ec45 4b10 	vmov	d0, r4, r5
 800a576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57a:	45b8      	cmp	r8, r7
 800a57c:	bf3a      	itte	cc
 800a57e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a582:	f1a6 0708 	subcc.w	r7, r6, #8
 800a586:	2300      	movcs	r3, #0
 800a588:	380b      	subs	r0, #11
 800a58a:	d012      	beq.n	800a5b2 <__b2d+0x8a>
 800a58c:	f1c0 0120 	rsb	r1, r0, #32
 800a590:	fa23 f401 	lsr.w	r4, r3, r1
 800a594:	4082      	lsls	r2, r0
 800a596:	4322      	orrs	r2, r4
 800a598:	4547      	cmp	r7, r8
 800a59a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a59e:	bf8c      	ite	hi
 800a5a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a5a4:	2200      	movls	r2, #0
 800a5a6:	4083      	lsls	r3, r0
 800a5a8:	40ca      	lsrs	r2, r1
 800a5aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	e7de      	b.n	800a570 <__b2d+0x48>
 800a5b2:	ea42 0501 	orr.w	r5, r2, r1
 800a5b6:	e7db      	b.n	800a570 <__b2d+0x48>
 800a5b8:	3ff00000 	.word	0x3ff00000

0800a5bc <__d2b>:
 800a5bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5c0:	460f      	mov	r7, r1
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	ec59 8b10 	vmov	r8, r9, d0
 800a5c8:	4616      	mov	r6, r2
 800a5ca:	f7ff fc1b 	bl	8009e04 <_Balloc>
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	b930      	cbnz	r0, 800a5e0 <__d2b+0x24>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b24      	ldr	r3, [pc, #144]	; (800a668 <__d2b+0xac>)
 800a5d6:	4825      	ldr	r0, [pc, #148]	; (800a66c <__d2b+0xb0>)
 800a5d8:	f240 310f 	movw	r1, #783	; 0x30f
 800a5dc:	f001 f9b0 	bl	800b940 <__assert_func>
 800a5e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a5e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5e8:	bb2d      	cbnz	r5, 800a636 <__d2b+0x7a>
 800a5ea:	9301      	str	r3, [sp, #4]
 800a5ec:	f1b8 0300 	subs.w	r3, r8, #0
 800a5f0:	d026      	beq.n	800a640 <__d2b+0x84>
 800a5f2:	4668      	mov	r0, sp
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	f7ff fd17 	bl	800a028 <__lo0bits>
 800a5fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a5fe:	b1e8      	cbz	r0, 800a63c <__d2b+0x80>
 800a600:	f1c0 0320 	rsb	r3, r0, #32
 800a604:	fa02 f303 	lsl.w	r3, r2, r3
 800a608:	430b      	orrs	r3, r1
 800a60a:	40c2      	lsrs	r2, r0
 800a60c:	6163      	str	r3, [r4, #20]
 800a60e:	9201      	str	r2, [sp, #4]
 800a610:	9b01      	ldr	r3, [sp, #4]
 800a612:	61a3      	str	r3, [r4, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	bf14      	ite	ne
 800a618:	2202      	movne	r2, #2
 800a61a:	2201      	moveq	r2, #1
 800a61c:	6122      	str	r2, [r4, #16]
 800a61e:	b1bd      	cbz	r5, 800a650 <__d2b+0x94>
 800a620:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a624:	4405      	add	r5, r0
 800a626:	603d      	str	r5, [r7, #0]
 800a628:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a62c:	6030      	str	r0, [r6, #0]
 800a62e:	4620      	mov	r0, r4
 800a630:	b003      	add	sp, #12
 800a632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a63a:	e7d6      	b.n	800a5ea <__d2b+0x2e>
 800a63c:	6161      	str	r1, [r4, #20]
 800a63e:	e7e7      	b.n	800a610 <__d2b+0x54>
 800a640:	a801      	add	r0, sp, #4
 800a642:	f7ff fcf1 	bl	800a028 <__lo0bits>
 800a646:	9b01      	ldr	r3, [sp, #4]
 800a648:	6163      	str	r3, [r4, #20]
 800a64a:	3020      	adds	r0, #32
 800a64c:	2201      	movs	r2, #1
 800a64e:	e7e5      	b.n	800a61c <__d2b+0x60>
 800a650:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a654:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a658:	6038      	str	r0, [r7, #0]
 800a65a:	6918      	ldr	r0, [r3, #16]
 800a65c:	f7ff fcc4 	bl	8009fe8 <__hi0bits>
 800a660:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a664:	e7e2      	b.n	800a62c <__d2b+0x70>
 800a666:	bf00      	nop
 800a668:	0800c7b5 	.word	0x0800c7b5
 800a66c:	0800c7c6 	.word	0x0800c7c6

0800a670 <__ratio>:
 800a670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4688      	mov	r8, r1
 800a676:	4669      	mov	r1, sp
 800a678:	4681      	mov	r9, r0
 800a67a:	f7ff ff55 	bl	800a528 <__b2d>
 800a67e:	a901      	add	r1, sp, #4
 800a680:	4640      	mov	r0, r8
 800a682:	ec55 4b10 	vmov	r4, r5, d0
 800a686:	f7ff ff4f 	bl	800a528 <__b2d>
 800a68a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a68e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a692:	eba3 0c02 	sub.w	ip, r3, r2
 800a696:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6a0:	ec51 0b10 	vmov	r0, r1, d0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	bfd6      	itet	le
 800a6a8:	460a      	movle	r2, r1
 800a6aa:	462a      	movgt	r2, r5
 800a6ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6b0:	468b      	mov	fp, r1
 800a6b2:	462f      	mov	r7, r5
 800a6b4:	bfd4      	ite	le
 800a6b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a6ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6be:	4620      	mov	r0, r4
 800a6c0:	ee10 2a10 	vmov	r2, s0
 800a6c4:	465b      	mov	r3, fp
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	f7f6 f8c0 	bl	800084c <__aeabi_ddiv>
 800a6cc:	ec41 0b10 	vmov	d0, r0, r1
 800a6d0:	b003      	add	sp, #12
 800a6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6d6 <__copybits>:
 800a6d6:	3901      	subs	r1, #1
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	1149      	asrs	r1, r1, #5
 800a6dc:	6914      	ldr	r4, [r2, #16]
 800a6de:	3101      	adds	r1, #1
 800a6e0:	f102 0314 	add.w	r3, r2, #20
 800a6e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6ec:	1f05      	subs	r5, r0, #4
 800a6ee:	42a3      	cmp	r3, r4
 800a6f0:	d30c      	bcc.n	800a70c <__copybits+0x36>
 800a6f2:	1aa3      	subs	r3, r4, r2
 800a6f4:	3b11      	subs	r3, #17
 800a6f6:	f023 0303 	bic.w	r3, r3, #3
 800a6fa:	3211      	adds	r2, #17
 800a6fc:	42a2      	cmp	r2, r4
 800a6fe:	bf88      	it	hi
 800a700:	2300      	movhi	r3, #0
 800a702:	4418      	add	r0, r3
 800a704:	2300      	movs	r3, #0
 800a706:	4288      	cmp	r0, r1
 800a708:	d305      	bcc.n	800a716 <__copybits+0x40>
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a710:	f845 6f04 	str.w	r6, [r5, #4]!
 800a714:	e7eb      	b.n	800a6ee <__copybits+0x18>
 800a716:	f840 3b04 	str.w	r3, [r0], #4
 800a71a:	e7f4      	b.n	800a706 <__copybits+0x30>

0800a71c <__any_on>:
 800a71c:	f100 0214 	add.w	r2, r0, #20
 800a720:	6900      	ldr	r0, [r0, #16]
 800a722:	114b      	asrs	r3, r1, #5
 800a724:	4298      	cmp	r0, r3
 800a726:	b510      	push	{r4, lr}
 800a728:	db11      	blt.n	800a74e <__any_on+0x32>
 800a72a:	dd0a      	ble.n	800a742 <__any_on+0x26>
 800a72c:	f011 011f 	ands.w	r1, r1, #31
 800a730:	d007      	beq.n	800a742 <__any_on+0x26>
 800a732:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a736:	fa24 f001 	lsr.w	r0, r4, r1
 800a73a:	fa00 f101 	lsl.w	r1, r0, r1
 800a73e:	428c      	cmp	r4, r1
 800a740:	d10b      	bne.n	800a75a <__any_on+0x3e>
 800a742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a746:	4293      	cmp	r3, r2
 800a748:	d803      	bhi.n	800a752 <__any_on+0x36>
 800a74a:	2000      	movs	r0, #0
 800a74c:	bd10      	pop	{r4, pc}
 800a74e:	4603      	mov	r3, r0
 800a750:	e7f7      	b.n	800a742 <__any_on+0x26>
 800a752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a756:	2900      	cmp	r1, #0
 800a758:	d0f5      	beq.n	800a746 <__any_on+0x2a>
 800a75a:	2001      	movs	r0, #1
 800a75c:	e7f6      	b.n	800a74c <__any_on+0x30>

0800a75e <sulp>:
 800a75e:	b570      	push	{r4, r5, r6, lr}
 800a760:	4604      	mov	r4, r0
 800a762:	460d      	mov	r5, r1
 800a764:	ec45 4b10 	vmov	d0, r4, r5
 800a768:	4616      	mov	r6, r2
 800a76a:	f7ff feb7 	bl	800a4dc <__ulp>
 800a76e:	ec51 0b10 	vmov	r0, r1, d0
 800a772:	b17e      	cbz	r6, 800a794 <sulp+0x36>
 800a774:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a778:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dd09      	ble.n	800a794 <sulp+0x36>
 800a780:	051b      	lsls	r3, r3, #20
 800a782:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a786:	2400      	movs	r4, #0
 800a788:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a78c:	4622      	mov	r2, r4
 800a78e:	462b      	mov	r3, r5
 800a790:	f7f5 ff32 	bl	80005f8 <__aeabi_dmul>
 800a794:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a798 <_strtod_l>:
 800a798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79c:	ed2d 8b02 	vpush	{d8}
 800a7a0:	b09b      	sub	sp, #108	; 0x6c
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	9213      	str	r2, [sp, #76]	; 0x4c
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	9216      	str	r2, [sp, #88]	; 0x58
 800a7aa:	460d      	mov	r5, r1
 800a7ac:	f04f 0800 	mov.w	r8, #0
 800a7b0:	f04f 0900 	mov.w	r9, #0
 800a7b4:	460a      	mov	r2, r1
 800a7b6:	9215      	str	r2, [sp, #84]	; 0x54
 800a7b8:	7811      	ldrb	r1, [r2, #0]
 800a7ba:	292b      	cmp	r1, #43	; 0x2b
 800a7bc:	d04c      	beq.n	800a858 <_strtod_l+0xc0>
 800a7be:	d83a      	bhi.n	800a836 <_strtod_l+0x9e>
 800a7c0:	290d      	cmp	r1, #13
 800a7c2:	d834      	bhi.n	800a82e <_strtod_l+0x96>
 800a7c4:	2908      	cmp	r1, #8
 800a7c6:	d834      	bhi.n	800a832 <_strtod_l+0x9a>
 800a7c8:	2900      	cmp	r1, #0
 800a7ca:	d03d      	beq.n	800a848 <_strtod_l+0xb0>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	920a      	str	r2, [sp, #40]	; 0x28
 800a7d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a7d2:	7832      	ldrb	r2, [r6, #0]
 800a7d4:	2a30      	cmp	r2, #48	; 0x30
 800a7d6:	f040 80b4 	bne.w	800a942 <_strtod_l+0x1aa>
 800a7da:	7872      	ldrb	r2, [r6, #1]
 800a7dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a7e0:	2a58      	cmp	r2, #88	; 0x58
 800a7e2:	d170      	bne.n	800a8c6 <_strtod_l+0x12e>
 800a7e4:	9302      	str	r3, [sp, #8]
 800a7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e8:	9301      	str	r3, [sp, #4]
 800a7ea:	ab16      	add	r3, sp, #88	; 0x58
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	4a8e      	ldr	r2, [pc, #568]	; (800aa28 <_strtod_l+0x290>)
 800a7f0:	ab17      	add	r3, sp, #92	; 0x5c
 800a7f2:	a915      	add	r1, sp, #84	; 0x54
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f001 f93f 	bl	800ba78 <__gethex>
 800a7fa:	f010 070f 	ands.w	r7, r0, #15
 800a7fe:	4605      	mov	r5, r0
 800a800:	d005      	beq.n	800a80e <_strtod_l+0x76>
 800a802:	2f06      	cmp	r7, #6
 800a804:	d12a      	bne.n	800a85c <_strtod_l+0xc4>
 800a806:	3601      	adds	r6, #1
 800a808:	2300      	movs	r3, #0
 800a80a:	9615      	str	r6, [sp, #84]	; 0x54
 800a80c:	930a      	str	r3, [sp, #40]	; 0x28
 800a80e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a810:	2b00      	cmp	r3, #0
 800a812:	f040 857f 	bne.w	800b314 <_strtod_l+0xb7c>
 800a816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a818:	b1db      	cbz	r3, 800a852 <_strtod_l+0xba>
 800a81a:	4642      	mov	r2, r8
 800a81c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a820:	ec43 2b10 	vmov	d0, r2, r3
 800a824:	b01b      	add	sp, #108	; 0x6c
 800a826:	ecbd 8b02 	vpop	{d8}
 800a82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82e:	2920      	cmp	r1, #32
 800a830:	d1cc      	bne.n	800a7cc <_strtod_l+0x34>
 800a832:	3201      	adds	r2, #1
 800a834:	e7bf      	b.n	800a7b6 <_strtod_l+0x1e>
 800a836:	292d      	cmp	r1, #45	; 0x2d
 800a838:	d1c8      	bne.n	800a7cc <_strtod_l+0x34>
 800a83a:	2101      	movs	r1, #1
 800a83c:	910a      	str	r1, [sp, #40]	; 0x28
 800a83e:	1c51      	adds	r1, r2, #1
 800a840:	9115      	str	r1, [sp, #84]	; 0x54
 800a842:	7852      	ldrb	r2, [r2, #1]
 800a844:	2a00      	cmp	r2, #0
 800a846:	d1c3      	bne.n	800a7d0 <_strtod_l+0x38>
 800a848:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a84a:	9515      	str	r5, [sp, #84]	; 0x54
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f040 855f 	bne.w	800b310 <_strtod_l+0xb78>
 800a852:	4642      	mov	r2, r8
 800a854:	464b      	mov	r3, r9
 800a856:	e7e3      	b.n	800a820 <_strtod_l+0x88>
 800a858:	2100      	movs	r1, #0
 800a85a:	e7ef      	b.n	800a83c <_strtod_l+0xa4>
 800a85c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a85e:	b13a      	cbz	r2, 800a870 <_strtod_l+0xd8>
 800a860:	2135      	movs	r1, #53	; 0x35
 800a862:	a818      	add	r0, sp, #96	; 0x60
 800a864:	f7ff ff37 	bl	800a6d6 <__copybits>
 800a868:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a86a:	4620      	mov	r0, r4
 800a86c:	f7ff fb0a 	bl	8009e84 <_Bfree>
 800a870:	3f01      	subs	r7, #1
 800a872:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a874:	2f04      	cmp	r7, #4
 800a876:	d806      	bhi.n	800a886 <_strtod_l+0xee>
 800a878:	e8df f007 	tbb	[pc, r7]
 800a87c:	201d0314 	.word	0x201d0314
 800a880:	14          	.byte	0x14
 800a881:	00          	.byte	0x00
 800a882:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a886:	05e9      	lsls	r1, r5, #23
 800a888:	bf48      	it	mi
 800a88a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a88e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a892:	0d1b      	lsrs	r3, r3, #20
 800a894:	051b      	lsls	r3, r3, #20
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1b9      	bne.n	800a80e <_strtod_l+0x76>
 800a89a:	f7fe fb03 	bl	8008ea4 <__errno>
 800a89e:	2322      	movs	r3, #34	; 0x22
 800a8a0:	6003      	str	r3, [r0, #0]
 800a8a2:	e7b4      	b.n	800a80e <_strtod_l+0x76>
 800a8a4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a8a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a8ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a8b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a8b4:	e7e7      	b.n	800a886 <_strtod_l+0xee>
 800a8b6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800aa30 <_strtod_l+0x298>
 800a8ba:	e7e4      	b.n	800a886 <_strtod_l+0xee>
 800a8bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a8c0:	f04f 38ff 	mov.w	r8, #4294967295
 800a8c4:	e7df      	b.n	800a886 <_strtod_l+0xee>
 800a8c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	9215      	str	r2, [sp, #84]	; 0x54
 800a8cc:	785b      	ldrb	r3, [r3, #1]
 800a8ce:	2b30      	cmp	r3, #48	; 0x30
 800a8d0:	d0f9      	beq.n	800a8c6 <_strtod_l+0x12e>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d09b      	beq.n	800a80e <_strtod_l+0x76>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	f04f 0a00 	mov.w	sl, #0
 800a8dc:	9304      	str	r3, [sp, #16]
 800a8de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a8e6:	46d3      	mov	fp, sl
 800a8e8:	220a      	movs	r2, #10
 800a8ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a8ec:	7806      	ldrb	r6, [r0, #0]
 800a8ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a8f2:	b2d9      	uxtb	r1, r3
 800a8f4:	2909      	cmp	r1, #9
 800a8f6:	d926      	bls.n	800a946 <_strtod_l+0x1ae>
 800a8f8:	494c      	ldr	r1, [pc, #304]	; (800aa2c <_strtod_l+0x294>)
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f000 ffe6 	bl	800b8cc <strncmp>
 800a900:	2800      	cmp	r0, #0
 800a902:	d030      	beq.n	800a966 <_strtod_l+0x1ce>
 800a904:	2000      	movs	r0, #0
 800a906:	4632      	mov	r2, r6
 800a908:	9005      	str	r0, [sp, #20]
 800a90a:	465e      	mov	r6, fp
 800a90c:	4603      	mov	r3, r0
 800a90e:	2a65      	cmp	r2, #101	; 0x65
 800a910:	d001      	beq.n	800a916 <_strtod_l+0x17e>
 800a912:	2a45      	cmp	r2, #69	; 0x45
 800a914:	d113      	bne.n	800a93e <_strtod_l+0x1a6>
 800a916:	b91e      	cbnz	r6, 800a920 <_strtod_l+0x188>
 800a918:	9a04      	ldr	r2, [sp, #16]
 800a91a:	4302      	orrs	r2, r0
 800a91c:	d094      	beq.n	800a848 <_strtod_l+0xb0>
 800a91e:	2600      	movs	r6, #0
 800a920:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a922:	1c6a      	adds	r2, r5, #1
 800a924:	9215      	str	r2, [sp, #84]	; 0x54
 800a926:	786a      	ldrb	r2, [r5, #1]
 800a928:	2a2b      	cmp	r2, #43	; 0x2b
 800a92a:	d074      	beq.n	800aa16 <_strtod_l+0x27e>
 800a92c:	2a2d      	cmp	r2, #45	; 0x2d
 800a92e:	d078      	beq.n	800aa22 <_strtod_l+0x28a>
 800a930:	f04f 0c00 	mov.w	ip, #0
 800a934:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a938:	2909      	cmp	r1, #9
 800a93a:	d97f      	bls.n	800aa3c <_strtod_l+0x2a4>
 800a93c:	9515      	str	r5, [sp, #84]	; 0x54
 800a93e:	2700      	movs	r7, #0
 800a940:	e09e      	b.n	800aa80 <_strtod_l+0x2e8>
 800a942:	2300      	movs	r3, #0
 800a944:	e7c8      	b.n	800a8d8 <_strtod_l+0x140>
 800a946:	f1bb 0f08 	cmp.w	fp, #8
 800a94a:	bfd8      	it	le
 800a94c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a94e:	f100 0001 	add.w	r0, r0, #1
 800a952:	bfda      	itte	le
 800a954:	fb02 3301 	mlale	r3, r2, r1, r3
 800a958:	9309      	strle	r3, [sp, #36]	; 0x24
 800a95a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a95e:	f10b 0b01 	add.w	fp, fp, #1
 800a962:	9015      	str	r0, [sp, #84]	; 0x54
 800a964:	e7c1      	b.n	800a8ea <_strtod_l+0x152>
 800a966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a968:	1c5a      	adds	r2, r3, #1
 800a96a:	9215      	str	r2, [sp, #84]	; 0x54
 800a96c:	785a      	ldrb	r2, [r3, #1]
 800a96e:	f1bb 0f00 	cmp.w	fp, #0
 800a972:	d037      	beq.n	800a9e4 <_strtod_l+0x24c>
 800a974:	9005      	str	r0, [sp, #20]
 800a976:	465e      	mov	r6, fp
 800a978:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a97c:	2b09      	cmp	r3, #9
 800a97e:	d912      	bls.n	800a9a6 <_strtod_l+0x20e>
 800a980:	2301      	movs	r3, #1
 800a982:	e7c4      	b.n	800a90e <_strtod_l+0x176>
 800a984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	9215      	str	r2, [sp, #84]	; 0x54
 800a98a:	785a      	ldrb	r2, [r3, #1]
 800a98c:	3001      	adds	r0, #1
 800a98e:	2a30      	cmp	r2, #48	; 0x30
 800a990:	d0f8      	beq.n	800a984 <_strtod_l+0x1ec>
 800a992:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a996:	2b08      	cmp	r3, #8
 800a998:	f200 84c1 	bhi.w	800b31e <_strtod_l+0xb86>
 800a99c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a99e:	9005      	str	r0, [sp, #20]
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	3a30      	subs	r2, #48	; 0x30
 800a9a8:	f100 0301 	add.w	r3, r0, #1
 800a9ac:	d014      	beq.n	800a9d8 <_strtod_l+0x240>
 800a9ae:	9905      	ldr	r1, [sp, #20]
 800a9b0:	4419      	add	r1, r3
 800a9b2:	9105      	str	r1, [sp, #20]
 800a9b4:	4633      	mov	r3, r6
 800a9b6:	eb00 0c06 	add.w	ip, r0, r6
 800a9ba:	210a      	movs	r1, #10
 800a9bc:	4563      	cmp	r3, ip
 800a9be:	d113      	bne.n	800a9e8 <_strtod_l+0x250>
 800a9c0:	1833      	adds	r3, r6, r0
 800a9c2:	2b08      	cmp	r3, #8
 800a9c4:	f106 0601 	add.w	r6, r6, #1
 800a9c8:	4406      	add	r6, r0
 800a9ca:	dc1a      	bgt.n	800aa02 <_strtod_l+0x26a>
 800a9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9ce:	230a      	movs	r3, #10
 800a9d0:	fb03 2301 	mla	r3, r3, r1, r2
 800a9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a9da:	1c51      	adds	r1, r2, #1
 800a9dc:	9115      	str	r1, [sp, #84]	; 0x54
 800a9de:	7852      	ldrb	r2, [r2, #1]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	e7c9      	b.n	800a978 <_strtod_l+0x1e0>
 800a9e4:	4658      	mov	r0, fp
 800a9e6:	e7d2      	b.n	800a98e <_strtod_l+0x1f6>
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	f103 0301 	add.w	r3, r3, #1
 800a9ee:	dc03      	bgt.n	800a9f8 <_strtod_l+0x260>
 800a9f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a9f2:	434f      	muls	r7, r1
 800a9f4:	9709      	str	r7, [sp, #36]	; 0x24
 800a9f6:	e7e1      	b.n	800a9bc <_strtod_l+0x224>
 800a9f8:	2b10      	cmp	r3, #16
 800a9fa:	bfd8      	it	le
 800a9fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800aa00:	e7dc      	b.n	800a9bc <_strtod_l+0x224>
 800aa02:	2e10      	cmp	r6, #16
 800aa04:	bfdc      	itt	le
 800aa06:	230a      	movle	r3, #10
 800aa08:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800aa0c:	e7e3      	b.n	800a9d6 <_strtod_l+0x23e>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	9305      	str	r3, [sp, #20]
 800aa12:	2301      	movs	r3, #1
 800aa14:	e780      	b.n	800a918 <_strtod_l+0x180>
 800aa16:	f04f 0c00 	mov.w	ip, #0
 800aa1a:	1caa      	adds	r2, r5, #2
 800aa1c:	9215      	str	r2, [sp, #84]	; 0x54
 800aa1e:	78aa      	ldrb	r2, [r5, #2]
 800aa20:	e788      	b.n	800a934 <_strtod_l+0x19c>
 800aa22:	f04f 0c01 	mov.w	ip, #1
 800aa26:	e7f8      	b.n	800aa1a <_strtod_l+0x282>
 800aa28:	0800c920 	.word	0x0800c920
 800aa2c:	0800c91c 	.word	0x0800c91c
 800aa30:	7ff00000 	.word	0x7ff00000
 800aa34:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa36:	1c51      	adds	r1, r2, #1
 800aa38:	9115      	str	r1, [sp, #84]	; 0x54
 800aa3a:	7852      	ldrb	r2, [r2, #1]
 800aa3c:	2a30      	cmp	r2, #48	; 0x30
 800aa3e:	d0f9      	beq.n	800aa34 <_strtod_l+0x29c>
 800aa40:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aa44:	2908      	cmp	r1, #8
 800aa46:	f63f af7a 	bhi.w	800a93e <_strtod_l+0x1a6>
 800aa4a:	3a30      	subs	r2, #48	; 0x30
 800aa4c:	9208      	str	r2, [sp, #32]
 800aa4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa50:	920c      	str	r2, [sp, #48]	; 0x30
 800aa52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa54:	1c57      	adds	r7, r2, #1
 800aa56:	9715      	str	r7, [sp, #84]	; 0x54
 800aa58:	7852      	ldrb	r2, [r2, #1]
 800aa5a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aa5e:	f1be 0f09 	cmp.w	lr, #9
 800aa62:	d938      	bls.n	800aad6 <_strtod_l+0x33e>
 800aa64:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa66:	1a7f      	subs	r7, r7, r1
 800aa68:	2f08      	cmp	r7, #8
 800aa6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800aa6e:	dc03      	bgt.n	800aa78 <_strtod_l+0x2e0>
 800aa70:	9908      	ldr	r1, [sp, #32]
 800aa72:	428f      	cmp	r7, r1
 800aa74:	bfa8      	it	ge
 800aa76:	460f      	movge	r7, r1
 800aa78:	f1bc 0f00 	cmp.w	ip, #0
 800aa7c:	d000      	beq.n	800aa80 <_strtod_l+0x2e8>
 800aa7e:	427f      	negs	r7, r7
 800aa80:	2e00      	cmp	r6, #0
 800aa82:	d14f      	bne.n	800ab24 <_strtod_l+0x38c>
 800aa84:	9904      	ldr	r1, [sp, #16]
 800aa86:	4301      	orrs	r1, r0
 800aa88:	f47f aec1 	bne.w	800a80e <_strtod_l+0x76>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f47f aedb 	bne.w	800a848 <_strtod_l+0xb0>
 800aa92:	2a69      	cmp	r2, #105	; 0x69
 800aa94:	d029      	beq.n	800aaea <_strtod_l+0x352>
 800aa96:	dc26      	bgt.n	800aae6 <_strtod_l+0x34e>
 800aa98:	2a49      	cmp	r2, #73	; 0x49
 800aa9a:	d026      	beq.n	800aaea <_strtod_l+0x352>
 800aa9c:	2a4e      	cmp	r2, #78	; 0x4e
 800aa9e:	f47f aed3 	bne.w	800a848 <_strtod_l+0xb0>
 800aaa2:	499b      	ldr	r1, [pc, #620]	; (800ad10 <_strtod_l+0x578>)
 800aaa4:	a815      	add	r0, sp, #84	; 0x54
 800aaa6:	f001 fa27 	bl	800bef8 <__match>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	f43f aecc 	beq.w	800a848 <_strtod_l+0xb0>
 800aab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b28      	cmp	r3, #40	; 0x28
 800aab6:	d12f      	bne.n	800ab18 <_strtod_l+0x380>
 800aab8:	4996      	ldr	r1, [pc, #600]	; (800ad14 <_strtod_l+0x57c>)
 800aaba:	aa18      	add	r2, sp, #96	; 0x60
 800aabc:	a815      	add	r0, sp, #84	; 0x54
 800aabe:	f001 fa2f 	bl	800bf20 <__hexnan>
 800aac2:	2805      	cmp	r0, #5
 800aac4:	d128      	bne.n	800ab18 <_strtod_l+0x380>
 800aac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aac8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aacc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800aad0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800aad4:	e69b      	b.n	800a80e <_strtod_l+0x76>
 800aad6:	9f08      	ldr	r7, [sp, #32]
 800aad8:	210a      	movs	r1, #10
 800aada:	fb01 2107 	mla	r1, r1, r7, r2
 800aade:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800aae2:	9208      	str	r2, [sp, #32]
 800aae4:	e7b5      	b.n	800aa52 <_strtod_l+0x2ba>
 800aae6:	2a6e      	cmp	r2, #110	; 0x6e
 800aae8:	e7d9      	b.n	800aa9e <_strtod_l+0x306>
 800aaea:	498b      	ldr	r1, [pc, #556]	; (800ad18 <_strtod_l+0x580>)
 800aaec:	a815      	add	r0, sp, #84	; 0x54
 800aaee:	f001 fa03 	bl	800bef8 <__match>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	f43f aea8 	beq.w	800a848 <_strtod_l+0xb0>
 800aaf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aafa:	4988      	ldr	r1, [pc, #544]	; (800ad1c <_strtod_l+0x584>)
 800aafc:	3b01      	subs	r3, #1
 800aafe:	a815      	add	r0, sp, #84	; 0x54
 800ab00:	9315      	str	r3, [sp, #84]	; 0x54
 800ab02:	f001 f9f9 	bl	800bef8 <__match>
 800ab06:	b910      	cbnz	r0, 800ab0e <_strtod_l+0x376>
 800ab08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	9315      	str	r3, [sp, #84]	; 0x54
 800ab0e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ad2c <_strtod_l+0x594>
 800ab12:	f04f 0800 	mov.w	r8, #0
 800ab16:	e67a      	b.n	800a80e <_strtod_l+0x76>
 800ab18:	4881      	ldr	r0, [pc, #516]	; (800ad20 <_strtod_l+0x588>)
 800ab1a:	f000 ff09 	bl	800b930 <nan>
 800ab1e:	ec59 8b10 	vmov	r8, r9, d0
 800ab22:	e674      	b.n	800a80e <_strtod_l+0x76>
 800ab24:	9b05      	ldr	r3, [sp, #20]
 800ab26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab28:	1afb      	subs	r3, r7, r3
 800ab2a:	f1bb 0f00 	cmp.w	fp, #0
 800ab2e:	bf08      	it	eq
 800ab30:	46b3      	moveq	fp, r6
 800ab32:	2e10      	cmp	r6, #16
 800ab34:	9308      	str	r3, [sp, #32]
 800ab36:	4635      	mov	r5, r6
 800ab38:	bfa8      	it	ge
 800ab3a:	2510      	movge	r5, #16
 800ab3c:	f7f5 fce2 	bl	8000504 <__aeabi_ui2d>
 800ab40:	2e09      	cmp	r6, #9
 800ab42:	4680      	mov	r8, r0
 800ab44:	4689      	mov	r9, r1
 800ab46:	dd13      	ble.n	800ab70 <_strtod_l+0x3d8>
 800ab48:	4b76      	ldr	r3, [pc, #472]	; (800ad24 <_strtod_l+0x58c>)
 800ab4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ab4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ab52:	f7f5 fd51 	bl	80005f8 <__aeabi_dmul>
 800ab56:	4680      	mov	r8, r0
 800ab58:	4650      	mov	r0, sl
 800ab5a:	4689      	mov	r9, r1
 800ab5c:	f7f5 fcd2 	bl	8000504 <__aeabi_ui2d>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 fb90 	bl	800028c <__adddf3>
 800ab6c:	4680      	mov	r8, r0
 800ab6e:	4689      	mov	r9, r1
 800ab70:	2e0f      	cmp	r6, #15
 800ab72:	dc38      	bgt.n	800abe6 <_strtod_l+0x44e>
 800ab74:	9b08      	ldr	r3, [sp, #32]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f43f ae49 	beq.w	800a80e <_strtod_l+0x76>
 800ab7c:	dd24      	ble.n	800abc8 <_strtod_l+0x430>
 800ab7e:	2b16      	cmp	r3, #22
 800ab80:	dc0b      	bgt.n	800ab9a <_strtod_l+0x402>
 800ab82:	4968      	ldr	r1, [pc, #416]	; (800ad24 <_strtod_l+0x58c>)
 800ab84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab8c:	4642      	mov	r2, r8
 800ab8e:	464b      	mov	r3, r9
 800ab90:	f7f5 fd32 	bl	80005f8 <__aeabi_dmul>
 800ab94:	4680      	mov	r8, r0
 800ab96:	4689      	mov	r9, r1
 800ab98:	e639      	b.n	800a80e <_strtod_l+0x76>
 800ab9a:	9a08      	ldr	r2, [sp, #32]
 800ab9c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800aba0:	4293      	cmp	r3, r2
 800aba2:	db20      	blt.n	800abe6 <_strtod_l+0x44e>
 800aba4:	4c5f      	ldr	r4, [pc, #380]	; (800ad24 <_strtod_l+0x58c>)
 800aba6:	f1c6 060f 	rsb	r6, r6, #15
 800abaa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800abae:	4642      	mov	r2, r8
 800abb0:	464b      	mov	r3, r9
 800abb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abb6:	f7f5 fd1f 	bl	80005f8 <__aeabi_dmul>
 800abba:	9b08      	ldr	r3, [sp, #32]
 800abbc:	1b9e      	subs	r6, r3, r6
 800abbe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800abc2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800abc6:	e7e3      	b.n	800ab90 <_strtod_l+0x3f8>
 800abc8:	9b08      	ldr	r3, [sp, #32]
 800abca:	3316      	adds	r3, #22
 800abcc:	db0b      	blt.n	800abe6 <_strtod_l+0x44e>
 800abce:	9b05      	ldr	r3, [sp, #20]
 800abd0:	1bdf      	subs	r7, r3, r7
 800abd2:	4b54      	ldr	r3, [pc, #336]	; (800ad24 <_strtod_l+0x58c>)
 800abd4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800abd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abdc:	4640      	mov	r0, r8
 800abde:	4649      	mov	r1, r9
 800abe0:	f7f5 fe34 	bl	800084c <__aeabi_ddiv>
 800abe4:	e7d6      	b.n	800ab94 <_strtod_l+0x3fc>
 800abe6:	9b08      	ldr	r3, [sp, #32]
 800abe8:	1b75      	subs	r5, r6, r5
 800abea:	441d      	add	r5, r3
 800abec:	2d00      	cmp	r5, #0
 800abee:	dd70      	ble.n	800acd2 <_strtod_l+0x53a>
 800abf0:	f015 030f 	ands.w	r3, r5, #15
 800abf4:	d00a      	beq.n	800ac0c <_strtod_l+0x474>
 800abf6:	494b      	ldr	r1, [pc, #300]	; (800ad24 <_strtod_l+0x58c>)
 800abf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abfc:	4642      	mov	r2, r8
 800abfe:	464b      	mov	r3, r9
 800ac00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac04:	f7f5 fcf8 	bl	80005f8 <__aeabi_dmul>
 800ac08:	4680      	mov	r8, r0
 800ac0a:	4689      	mov	r9, r1
 800ac0c:	f035 050f 	bics.w	r5, r5, #15
 800ac10:	d04d      	beq.n	800acae <_strtod_l+0x516>
 800ac12:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ac16:	dd22      	ble.n	800ac5e <_strtod_l+0x4c6>
 800ac18:	2500      	movs	r5, #0
 800ac1a:	46ab      	mov	fp, r5
 800ac1c:	9509      	str	r5, [sp, #36]	; 0x24
 800ac1e:	9505      	str	r5, [sp, #20]
 800ac20:	2322      	movs	r3, #34	; 0x22
 800ac22:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ad2c <_strtod_l+0x594>
 800ac26:	6023      	str	r3, [r4, #0]
 800ac28:	f04f 0800 	mov.w	r8, #0
 800ac2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f43f aded 	beq.w	800a80e <_strtod_l+0x76>
 800ac34:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac36:	4620      	mov	r0, r4
 800ac38:	f7ff f924 	bl	8009e84 <_Bfree>
 800ac3c:	9905      	ldr	r1, [sp, #20]
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f7ff f920 	bl	8009e84 <_Bfree>
 800ac44:	4659      	mov	r1, fp
 800ac46:	4620      	mov	r0, r4
 800ac48:	f7ff f91c 	bl	8009e84 <_Bfree>
 800ac4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f7ff f918 	bl	8009e84 <_Bfree>
 800ac54:	4629      	mov	r1, r5
 800ac56:	4620      	mov	r0, r4
 800ac58:	f7ff f914 	bl	8009e84 <_Bfree>
 800ac5c:	e5d7      	b.n	800a80e <_strtod_l+0x76>
 800ac5e:	4b32      	ldr	r3, [pc, #200]	; (800ad28 <_strtod_l+0x590>)
 800ac60:	9304      	str	r3, [sp, #16]
 800ac62:	2300      	movs	r3, #0
 800ac64:	112d      	asrs	r5, r5, #4
 800ac66:	4640      	mov	r0, r8
 800ac68:	4649      	mov	r1, r9
 800ac6a:	469a      	mov	sl, r3
 800ac6c:	2d01      	cmp	r5, #1
 800ac6e:	dc21      	bgt.n	800acb4 <_strtod_l+0x51c>
 800ac70:	b10b      	cbz	r3, 800ac76 <_strtod_l+0x4de>
 800ac72:	4680      	mov	r8, r0
 800ac74:	4689      	mov	r9, r1
 800ac76:	492c      	ldr	r1, [pc, #176]	; (800ad28 <_strtod_l+0x590>)
 800ac78:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ac7c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ac80:	4642      	mov	r2, r8
 800ac82:	464b      	mov	r3, r9
 800ac84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac88:	f7f5 fcb6 	bl	80005f8 <__aeabi_dmul>
 800ac8c:	4b27      	ldr	r3, [pc, #156]	; (800ad2c <_strtod_l+0x594>)
 800ac8e:	460a      	mov	r2, r1
 800ac90:	400b      	ands	r3, r1
 800ac92:	4927      	ldr	r1, [pc, #156]	; (800ad30 <_strtod_l+0x598>)
 800ac94:	428b      	cmp	r3, r1
 800ac96:	4680      	mov	r8, r0
 800ac98:	d8be      	bhi.n	800ac18 <_strtod_l+0x480>
 800ac9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ac9e:	428b      	cmp	r3, r1
 800aca0:	bf86      	itte	hi
 800aca2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ad34 <_strtod_l+0x59c>
 800aca6:	f04f 38ff 	movhi.w	r8, #4294967295
 800acaa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800acae:	2300      	movs	r3, #0
 800acb0:	9304      	str	r3, [sp, #16]
 800acb2:	e07b      	b.n	800adac <_strtod_l+0x614>
 800acb4:	07ea      	lsls	r2, r5, #31
 800acb6:	d505      	bpl.n	800acc4 <_strtod_l+0x52c>
 800acb8:	9b04      	ldr	r3, [sp, #16]
 800acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbe:	f7f5 fc9b 	bl	80005f8 <__aeabi_dmul>
 800acc2:	2301      	movs	r3, #1
 800acc4:	9a04      	ldr	r2, [sp, #16]
 800acc6:	3208      	adds	r2, #8
 800acc8:	f10a 0a01 	add.w	sl, sl, #1
 800accc:	106d      	asrs	r5, r5, #1
 800acce:	9204      	str	r2, [sp, #16]
 800acd0:	e7cc      	b.n	800ac6c <_strtod_l+0x4d4>
 800acd2:	d0ec      	beq.n	800acae <_strtod_l+0x516>
 800acd4:	426d      	negs	r5, r5
 800acd6:	f015 020f 	ands.w	r2, r5, #15
 800acda:	d00a      	beq.n	800acf2 <_strtod_l+0x55a>
 800acdc:	4b11      	ldr	r3, [pc, #68]	; (800ad24 <_strtod_l+0x58c>)
 800acde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ace2:	4640      	mov	r0, r8
 800ace4:	4649      	mov	r1, r9
 800ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acea:	f7f5 fdaf 	bl	800084c <__aeabi_ddiv>
 800acee:	4680      	mov	r8, r0
 800acf0:	4689      	mov	r9, r1
 800acf2:	112d      	asrs	r5, r5, #4
 800acf4:	d0db      	beq.n	800acae <_strtod_l+0x516>
 800acf6:	2d1f      	cmp	r5, #31
 800acf8:	dd1e      	ble.n	800ad38 <_strtod_l+0x5a0>
 800acfa:	2500      	movs	r5, #0
 800acfc:	46ab      	mov	fp, r5
 800acfe:	9509      	str	r5, [sp, #36]	; 0x24
 800ad00:	9505      	str	r5, [sp, #20]
 800ad02:	2322      	movs	r3, #34	; 0x22
 800ad04:	f04f 0800 	mov.w	r8, #0
 800ad08:	f04f 0900 	mov.w	r9, #0
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	e78d      	b.n	800ac2c <_strtod_l+0x494>
 800ad10:	0800c70d 	.word	0x0800c70d
 800ad14:	0800c934 	.word	0x0800c934
 800ad18:	0800c705 	.word	0x0800c705
 800ad1c:	0800c73c 	.word	0x0800c73c
 800ad20:	0800cac5 	.word	0x0800cac5
 800ad24:	0800c848 	.word	0x0800c848
 800ad28:	0800c820 	.word	0x0800c820
 800ad2c:	7ff00000 	.word	0x7ff00000
 800ad30:	7ca00000 	.word	0x7ca00000
 800ad34:	7fefffff 	.word	0x7fefffff
 800ad38:	f015 0310 	ands.w	r3, r5, #16
 800ad3c:	bf18      	it	ne
 800ad3e:	236a      	movne	r3, #106	; 0x6a
 800ad40:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b0e4 <_strtod_l+0x94c>
 800ad44:	9304      	str	r3, [sp, #16]
 800ad46:	4640      	mov	r0, r8
 800ad48:	4649      	mov	r1, r9
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	07ea      	lsls	r2, r5, #31
 800ad4e:	d504      	bpl.n	800ad5a <_strtod_l+0x5c2>
 800ad50:	e9da 2300 	ldrd	r2, r3, [sl]
 800ad54:	f7f5 fc50 	bl	80005f8 <__aeabi_dmul>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	106d      	asrs	r5, r5, #1
 800ad5c:	f10a 0a08 	add.w	sl, sl, #8
 800ad60:	d1f4      	bne.n	800ad4c <_strtod_l+0x5b4>
 800ad62:	b10b      	cbz	r3, 800ad68 <_strtod_l+0x5d0>
 800ad64:	4680      	mov	r8, r0
 800ad66:	4689      	mov	r9, r1
 800ad68:	9b04      	ldr	r3, [sp, #16]
 800ad6a:	b1bb      	cbz	r3, 800ad9c <_strtod_l+0x604>
 800ad6c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ad70:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	4649      	mov	r1, r9
 800ad78:	dd10      	ble.n	800ad9c <_strtod_l+0x604>
 800ad7a:	2b1f      	cmp	r3, #31
 800ad7c:	f340 811e 	ble.w	800afbc <_strtod_l+0x824>
 800ad80:	2b34      	cmp	r3, #52	; 0x34
 800ad82:	bfde      	ittt	le
 800ad84:	f04f 33ff 	movle.w	r3, #4294967295
 800ad88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ad8c:	4093      	lslle	r3, r2
 800ad8e:	f04f 0800 	mov.w	r8, #0
 800ad92:	bfcc      	ite	gt
 800ad94:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ad98:	ea03 0901 	andle.w	r9, r3, r1
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2300      	movs	r3, #0
 800ada0:	4640      	mov	r0, r8
 800ada2:	4649      	mov	r1, r9
 800ada4:	f7f5 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d1a6      	bne.n	800acfa <_strtod_l+0x562>
 800adac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adb2:	4633      	mov	r3, r6
 800adb4:	465a      	mov	r2, fp
 800adb6:	4620      	mov	r0, r4
 800adb8:	f7ff f8cc 	bl	8009f54 <__s2b>
 800adbc:	9009      	str	r0, [sp, #36]	; 0x24
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f43f af2a 	beq.w	800ac18 <_strtod_l+0x480>
 800adc4:	9a08      	ldr	r2, [sp, #32]
 800adc6:	9b05      	ldr	r3, [sp, #20]
 800adc8:	2a00      	cmp	r2, #0
 800adca:	eba3 0307 	sub.w	r3, r3, r7
 800adce:	bfa8      	it	ge
 800add0:	2300      	movge	r3, #0
 800add2:	930c      	str	r3, [sp, #48]	; 0x30
 800add4:	2500      	movs	r5, #0
 800add6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800adda:	9312      	str	r3, [sp, #72]	; 0x48
 800addc:	46ab      	mov	fp, r5
 800adde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade0:	4620      	mov	r0, r4
 800ade2:	6859      	ldr	r1, [r3, #4]
 800ade4:	f7ff f80e 	bl	8009e04 <_Balloc>
 800ade8:	9005      	str	r0, [sp, #20]
 800adea:	2800      	cmp	r0, #0
 800adec:	f43f af18 	beq.w	800ac20 <_strtod_l+0x488>
 800adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf2:	691a      	ldr	r2, [r3, #16]
 800adf4:	3202      	adds	r2, #2
 800adf6:	f103 010c 	add.w	r1, r3, #12
 800adfa:	0092      	lsls	r2, r2, #2
 800adfc:	300c      	adds	r0, #12
 800adfe:	f000 fd87 	bl	800b910 <memcpy>
 800ae02:	ec49 8b10 	vmov	d0, r8, r9
 800ae06:	aa18      	add	r2, sp, #96	; 0x60
 800ae08:	a917      	add	r1, sp, #92	; 0x5c
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f7ff fbd6 	bl	800a5bc <__d2b>
 800ae10:	ec49 8b18 	vmov	d8, r8, r9
 800ae14:	9016      	str	r0, [sp, #88]	; 0x58
 800ae16:	2800      	cmp	r0, #0
 800ae18:	f43f af02 	beq.w	800ac20 <_strtod_l+0x488>
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f7ff f930 	bl	800a084 <__i2b>
 800ae24:	4683      	mov	fp, r0
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f43f aefa 	beq.w	800ac20 <_strtod_l+0x488>
 800ae2c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ae2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae30:	2e00      	cmp	r6, #0
 800ae32:	bfab      	itete	ge
 800ae34:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ae36:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ae38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ae3a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ae3e:	bfac      	ite	ge
 800ae40:	eb06 0a03 	addge.w	sl, r6, r3
 800ae44:	1b9f      	sublt	r7, r3, r6
 800ae46:	9b04      	ldr	r3, [sp, #16]
 800ae48:	1af6      	subs	r6, r6, r3
 800ae4a:	4416      	add	r6, r2
 800ae4c:	4ba0      	ldr	r3, [pc, #640]	; (800b0d0 <_strtod_l+0x938>)
 800ae4e:	3e01      	subs	r6, #1
 800ae50:	429e      	cmp	r6, r3
 800ae52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ae56:	f280 80c4 	bge.w	800afe2 <_strtod_l+0x84a>
 800ae5a:	1b9b      	subs	r3, r3, r6
 800ae5c:	2b1f      	cmp	r3, #31
 800ae5e:	eba2 0203 	sub.w	r2, r2, r3
 800ae62:	f04f 0101 	mov.w	r1, #1
 800ae66:	f300 80b0 	bgt.w	800afca <_strtod_l+0x832>
 800ae6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae6e:	930e      	str	r3, [sp, #56]	; 0x38
 800ae70:	2300      	movs	r3, #0
 800ae72:	930d      	str	r3, [sp, #52]	; 0x34
 800ae74:	eb0a 0602 	add.w	r6, sl, r2
 800ae78:	9b04      	ldr	r3, [sp, #16]
 800ae7a:	45b2      	cmp	sl, r6
 800ae7c:	4417      	add	r7, r2
 800ae7e:	441f      	add	r7, r3
 800ae80:	4653      	mov	r3, sl
 800ae82:	bfa8      	it	ge
 800ae84:	4633      	movge	r3, r6
 800ae86:	42bb      	cmp	r3, r7
 800ae88:	bfa8      	it	ge
 800ae8a:	463b      	movge	r3, r7
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	bfc2      	ittt	gt
 800ae90:	1af6      	subgt	r6, r6, r3
 800ae92:	1aff      	subgt	r7, r7, r3
 800ae94:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ae98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dd17      	ble.n	800aece <_strtod_l+0x736>
 800ae9e:	4659      	mov	r1, fp
 800aea0:	461a      	mov	r2, r3
 800aea2:	4620      	mov	r0, r4
 800aea4:	f7ff f9ae 	bl	800a204 <__pow5mult>
 800aea8:	4683      	mov	fp, r0
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	f43f aeb8 	beq.w	800ac20 <_strtod_l+0x488>
 800aeb0:	4601      	mov	r1, r0
 800aeb2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f7ff f8fb 	bl	800a0b0 <__multiply>
 800aeba:	900b      	str	r0, [sp, #44]	; 0x2c
 800aebc:	2800      	cmp	r0, #0
 800aebe:	f43f aeaf 	beq.w	800ac20 <_strtod_l+0x488>
 800aec2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aec4:	4620      	mov	r0, r4
 800aec6:	f7fe ffdd 	bl	8009e84 <_Bfree>
 800aeca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aecc:	9316      	str	r3, [sp, #88]	; 0x58
 800aece:	2e00      	cmp	r6, #0
 800aed0:	f300 808c 	bgt.w	800afec <_strtod_l+0x854>
 800aed4:	9b08      	ldr	r3, [sp, #32]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	dd08      	ble.n	800aeec <_strtod_l+0x754>
 800aeda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aedc:	9905      	ldr	r1, [sp, #20]
 800aede:	4620      	mov	r0, r4
 800aee0:	f7ff f990 	bl	800a204 <__pow5mult>
 800aee4:	9005      	str	r0, [sp, #20]
 800aee6:	2800      	cmp	r0, #0
 800aee8:	f43f ae9a 	beq.w	800ac20 <_strtod_l+0x488>
 800aeec:	2f00      	cmp	r7, #0
 800aeee:	dd08      	ble.n	800af02 <_strtod_l+0x76a>
 800aef0:	9905      	ldr	r1, [sp, #20]
 800aef2:	463a      	mov	r2, r7
 800aef4:	4620      	mov	r0, r4
 800aef6:	f7ff f9df 	bl	800a2b8 <__lshift>
 800aefa:	9005      	str	r0, [sp, #20]
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f43f ae8f 	beq.w	800ac20 <_strtod_l+0x488>
 800af02:	f1ba 0f00 	cmp.w	sl, #0
 800af06:	dd08      	ble.n	800af1a <_strtod_l+0x782>
 800af08:	4659      	mov	r1, fp
 800af0a:	4652      	mov	r2, sl
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7ff f9d3 	bl	800a2b8 <__lshift>
 800af12:	4683      	mov	fp, r0
 800af14:	2800      	cmp	r0, #0
 800af16:	f43f ae83 	beq.w	800ac20 <_strtod_l+0x488>
 800af1a:	9a05      	ldr	r2, [sp, #20]
 800af1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af1e:	4620      	mov	r0, r4
 800af20:	f7ff fa52 	bl	800a3c8 <__mdiff>
 800af24:	4605      	mov	r5, r0
 800af26:	2800      	cmp	r0, #0
 800af28:	f43f ae7a 	beq.w	800ac20 <_strtod_l+0x488>
 800af2c:	68c3      	ldr	r3, [r0, #12]
 800af2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800af30:	2300      	movs	r3, #0
 800af32:	60c3      	str	r3, [r0, #12]
 800af34:	4659      	mov	r1, fp
 800af36:	f7ff fa2b 	bl	800a390 <__mcmp>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	da60      	bge.n	800b000 <_strtod_l+0x868>
 800af3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af40:	ea53 0308 	orrs.w	r3, r3, r8
 800af44:	f040 8084 	bne.w	800b050 <_strtod_l+0x8b8>
 800af48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d17f      	bne.n	800b050 <_strtod_l+0x8b8>
 800af50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af54:	0d1b      	lsrs	r3, r3, #20
 800af56:	051b      	lsls	r3, r3, #20
 800af58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800af5c:	d978      	bls.n	800b050 <_strtod_l+0x8b8>
 800af5e:	696b      	ldr	r3, [r5, #20]
 800af60:	b913      	cbnz	r3, 800af68 <_strtod_l+0x7d0>
 800af62:	692b      	ldr	r3, [r5, #16]
 800af64:	2b01      	cmp	r3, #1
 800af66:	dd73      	ble.n	800b050 <_strtod_l+0x8b8>
 800af68:	4629      	mov	r1, r5
 800af6a:	2201      	movs	r2, #1
 800af6c:	4620      	mov	r0, r4
 800af6e:	f7ff f9a3 	bl	800a2b8 <__lshift>
 800af72:	4659      	mov	r1, fp
 800af74:	4605      	mov	r5, r0
 800af76:	f7ff fa0b 	bl	800a390 <__mcmp>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	dd68      	ble.n	800b050 <_strtod_l+0x8b8>
 800af7e:	9904      	ldr	r1, [sp, #16]
 800af80:	4a54      	ldr	r2, [pc, #336]	; (800b0d4 <_strtod_l+0x93c>)
 800af82:	464b      	mov	r3, r9
 800af84:	2900      	cmp	r1, #0
 800af86:	f000 8084 	beq.w	800b092 <_strtod_l+0x8fa>
 800af8a:	ea02 0109 	and.w	r1, r2, r9
 800af8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800af92:	dc7e      	bgt.n	800b092 <_strtod_l+0x8fa>
 800af94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800af98:	f77f aeb3 	ble.w	800ad02 <_strtod_l+0x56a>
 800af9c:	4b4e      	ldr	r3, [pc, #312]	; (800b0d8 <_strtod_l+0x940>)
 800af9e:	4640      	mov	r0, r8
 800afa0:	4649      	mov	r1, r9
 800afa2:	2200      	movs	r2, #0
 800afa4:	f7f5 fb28 	bl	80005f8 <__aeabi_dmul>
 800afa8:	4b4a      	ldr	r3, [pc, #296]	; (800b0d4 <_strtod_l+0x93c>)
 800afaa:	400b      	ands	r3, r1
 800afac:	4680      	mov	r8, r0
 800afae:	4689      	mov	r9, r1
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f47f ae3f 	bne.w	800ac34 <_strtod_l+0x49c>
 800afb6:	2322      	movs	r3, #34	; 0x22
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	e63b      	b.n	800ac34 <_strtod_l+0x49c>
 800afbc:	f04f 32ff 	mov.w	r2, #4294967295
 800afc0:	fa02 f303 	lsl.w	r3, r2, r3
 800afc4:	ea03 0808 	and.w	r8, r3, r8
 800afc8:	e6e8      	b.n	800ad9c <_strtod_l+0x604>
 800afca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800afce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800afd2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800afd6:	36e2      	adds	r6, #226	; 0xe2
 800afd8:	fa01 f306 	lsl.w	r3, r1, r6
 800afdc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800afe0:	e748      	b.n	800ae74 <_strtod_l+0x6dc>
 800afe2:	2100      	movs	r1, #0
 800afe4:	2301      	movs	r3, #1
 800afe6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800afea:	e743      	b.n	800ae74 <_strtod_l+0x6dc>
 800afec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800afee:	4632      	mov	r2, r6
 800aff0:	4620      	mov	r0, r4
 800aff2:	f7ff f961 	bl	800a2b8 <__lshift>
 800aff6:	9016      	str	r0, [sp, #88]	; 0x58
 800aff8:	2800      	cmp	r0, #0
 800affa:	f47f af6b 	bne.w	800aed4 <_strtod_l+0x73c>
 800affe:	e60f      	b.n	800ac20 <_strtod_l+0x488>
 800b000:	46ca      	mov	sl, r9
 800b002:	d171      	bne.n	800b0e8 <_strtod_l+0x950>
 800b004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b006:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b00a:	b352      	cbz	r2, 800b062 <_strtod_l+0x8ca>
 800b00c:	4a33      	ldr	r2, [pc, #204]	; (800b0dc <_strtod_l+0x944>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d12a      	bne.n	800b068 <_strtod_l+0x8d0>
 800b012:	9b04      	ldr	r3, [sp, #16]
 800b014:	4641      	mov	r1, r8
 800b016:	b1fb      	cbz	r3, 800b058 <_strtod_l+0x8c0>
 800b018:	4b2e      	ldr	r3, [pc, #184]	; (800b0d4 <_strtod_l+0x93c>)
 800b01a:	ea09 0303 	and.w	r3, r9, r3
 800b01e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b022:	f04f 32ff 	mov.w	r2, #4294967295
 800b026:	d81a      	bhi.n	800b05e <_strtod_l+0x8c6>
 800b028:	0d1b      	lsrs	r3, r3, #20
 800b02a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b02e:	fa02 f303 	lsl.w	r3, r2, r3
 800b032:	4299      	cmp	r1, r3
 800b034:	d118      	bne.n	800b068 <_strtod_l+0x8d0>
 800b036:	4b2a      	ldr	r3, [pc, #168]	; (800b0e0 <_strtod_l+0x948>)
 800b038:	459a      	cmp	sl, r3
 800b03a:	d102      	bne.n	800b042 <_strtod_l+0x8aa>
 800b03c:	3101      	adds	r1, #1
 800b03e:	f43f adef 	beq.w	800ac20 <_strtod_l+0x488>
 800b042:	4b24      	ldr	r3, [pc, #144]	; (800b0d4 <_strtod_l+0x93c>)
 800b044:	ea0a 0303 	and.w	r3, sl, r3
 800b048:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b04c:	f04f 0800 	mov.w	r8, #0
 800b050:	9b04      	ldr	r3, [sp, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1a2      	bne.n	800af9c <_strtod_l+0x804>
 800b056:	e5ed      	b.n	800ac34 <_strtod_l+0x49c>
 800b058:	f04f 33ff 	mov.w	r3, #4294967295
 800b05c:	e7e9      	b.n	800b032 <_strtod_l+0x89a>
 800b05e:	4613      	mov	r3, r2
 800b060:	e7e7      	b.n	800b032 <_strtod_l+0x89a>
 800b062:	ea53 0308 	orrs.w	r3, r3, r8
 800b066:	d08a      	beq.n	800af7e <_strtod_l+0x7e6>
 800b068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b06a:	b1e3      	cbz	r3, 800b0a6 <_strtod_l+0x90e>
 800b06c:	ea13 0f0a 	tst.w	r3, sl
 800b070:	d0ee      	beq.n	800b050 <_strtod_l+0x8b8>
 800b072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b074:	9a04      	ldr	r2, [sp, #16]
 800b076:	4640      	mov	r0, r8
 800b078:	4649      	mov	r1, r9
 800b07a:	b1c3      	cbz	r3, 800b0ae <_strtod_l+0x916>
 800b07c:	f7ff fb6f 	bl	800a75e <sulp>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	ec51 0b18 	vmov	r0, r1, d8
 800b088:	f7f5 f900 	bl	800028c <__adddf3>
 800b08c:	4680      	mov	r8, r0
 800b08e:	4689      	mov	r9, r1
 800b090:	e7de      	b.n	800b050 <_strtod_l+0x8b8>
 800b092:	4013      	ands	r3, r2
 800b094:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b098:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b09c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b0a0:	f04f 38ff 	mov.w	r8, #4294967295
 800b0a4:	e7d4      	b.n	800b050 <_strtod_l+0x8b8>
 800b0a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0a8:	ea13 0f08 	tst.w	r3, r8
 800b0ac:	e7e0      	b.n	800b070 <_strtod_l+0x8d8>
 800b0ae:	f7ff fb56 	bl	800a75e <sulp>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	ec51 0b18 	vmov	r0, r1, d8
 800b0ba:	f7f5 f8e5 	bl	8000288 <__aeabi_dsub>
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4680      	mov	r8, r0
 800b0c4:	4689      	mov	r9, r1
 800b0c6:	f7f5 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d0c0      	beq.n	800b050 <_strtod_l+0x8b8>
 800b0ce:	e618      	b.n	800ad02 <_strtod_l+0x56a>
 800b0d0:	fffffc02 	.word	0xfffffc02
 800b0d4:	7ff00000 	.word	0x7ff00000
 800b0d8:	39500000 	.word	0x39500000
 800b0dc:	000fffff 	.word	0x000fffff
 800b0e0:	7fefffff 	.word	0x7fefffff
 800b0e4:	0800c948 	.word	0x0800c948
 800b0e8:	4659      	mov	r1, fp
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f7ff fac0 	bl	800a670 <__ratio>
 800b0f0:	ec57 6b10 	vmov	r6, r7, d0
 800b0f4:	ee10 0a10 	vmov	r0, s0
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0fe:	4639      	mov	r1, r7
 800b100:	f7f5 fcf6 	bl	8000af0 <__aeabi_dcmple>
 800b104:	2800      	cmp	r0, #0
 800b106:	d071      	beq.n	800b1ec <_strtod_l+0xa54>
 800b108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d17c      	bne.n	800b208 <_strtod_l+0xa70>
 800b10e:	f1b8 0f00 	cmp.w	r8, #0
 800b112:	d15a      	bne.n	800b1ca <_strtod_l+0xa32>
 800b114:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d15d      	bne.n	800b1d8 <_strtod_l+0xa40>
 800b11c:	4b90      	ldr	r3, [pc, #576]	; (800b360 <_strtod_l+0xbc8>)
 800b11e:	2200      	movs	r2, #0
 800b120:	4630      	mov	r0, r6
 800b122:	4639      	mov	r1, r7
 800b124:	f7f5 fcda 	bl	8000adc <__aeabi_dcmplt>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d15c      	bne.n	800b1e6 <_strtod_l+0xa4e>
 800b12c:	4630      	mov	r0, r6
 800b12e:	4639      	mov	r1, r7
 800b130:	4b8c      	ldr	r3, [pc, #560]	; (800b364 <_strtod_l+0xbcc>)
 800b132:	2200      	movs	r2, #0
 800b134:	f7f5 fa60 	bl	80005f8 <__aeabi_dmul>
 800b138:	4606      	mov	r6, r0
 800b13a:	460f      	mov	r7, r1
 800b13c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b140:	9606      	str	r6, [sp, #24]
 800b142:	9307      	str	r3, [sp, #28]
 800b144:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b148:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b14c:	4b86      	ldr	r3, [pc, #536]	; (800b368 <_strtod_l+0xbd0>)
 800b14e:	ea0a 0303 	and.w	r3, sl, r3
 800b152:	930d      	str	r3, [sp, #52]	; 0x34
 800b154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b156:	4b85      	ldr	r3, [pc, #532]	; (800b36c <_strtod_l+0xbd4>)
 800b158:	429a      	cmp	r2, r3
 800b15a:	f040 8090 	bne.w	800b27e <_strtod_l+0xae6>
 800b15e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b162:	ec49 8b10 	vmov	d0, r8, r9
 800b166:	f7ff f9b9 	bl	800a4dc <__ulp>
 800b16a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b16e:	ec51 0b10 	vmov	r0, r1, d0
 800b172:	f7f5 fa41 	bl	80005f8 <__aeabi_dmul>
 800b176:	4642      	mov	r2, r8
 800b178:	464b      	mov	r3, r9
 800b17a:	f7f5 f887 	bl	800028c <__adddf3>
 800b17e:	460b      	mov	r3, r1
 800b180:	4979      	ldr	r1, [pc, #484]	; (800b368 <_strtod_l+0xbd0>)
 800b182:	4a7b      	ldr	r2, [pc, #492]	; (800b370 <_strtod_l+0xbd8>)
 800b184:	4019      	ands	r1, r3
 800b186:	4291      	cmp	r1, r2
 800b188:	4680      	mov	r8, r0
 800b18a:	d944      	bls.n	800b216 <_strtod_l+0xa7e>
 800b18c:	ee18 2a90 	vmov	r2, s17
 800b190:	4b78      	ldr	r3, [pc, #480]	; (800b374 <_strtod_l+0xbdc>)
 800b192:	429a      	cmp	r2, r3
 800b194:	d104      	bne.n	800b1a0 <_strtod_l+0xa08>
 800b196:	ee18 3a10 	vmov	r3, s16
 800b19a:	3301      	adds	r3, #1
 800b19c:	f43f ad40 	beq.w	800ac20 <_strtod_l+0x488>
 800b1a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b374 <_strtod_l+0xbdc>
 800b1a4:	f04f 38ff 	mov.w	r8, #4294967295
 800b1a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f7fe fe6a 	bl	8009e84 <_Bfree>
 800b1b0:	9905      	ldr	r1, [sp, #20]
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f7fe fe66 	bl	8009e84 <_Bfree>
 800b1b8:	4659      	mov	r1, fp
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f7fe fe62 	bl	8009e84 <_Bfree>
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f7fe fe5e 	bl	8009e84 <_Bfree>
 800b1c8:	e609      	b.n	800adde <_strtod_l+0x646>
 800b1ca:	f1b8 0f01 	cmp.w	r8, #1
 800b1ce:	d103      	bne.n	800b1d8 <_strtod_l+0xa40>
 800b1d0:	f1b9 0f00 	cmp.w	r9, #0
 800b1d4:	f43f ad95 	beq.w	800ad02 <_strtod_l+0x56a>
 800b1d8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b330 <_strtod_l+0xb98>
 800b1dc:	4f60      	ldr	r7, [pc, #384]	; (800b360 <_strtod_l+0xbc8>)
 800b1de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b1e2:	2600      	movs	r6, #0
 800b1e4:	e7ae      	b.n	800b144 <_strtod_l+0x9ac>
 800b1e6:	4f5f      	ldr	r7, [pc, #380]	; (800b364 <_strtod_l+0xbcc>)
 800b1e8:	2600      	movs	r6, #0
 800b1ea:	e7a7      	b.n	800b13c <_strtod_l+0x9a4>
 800b1ec:	4b5d      	ldr	r3, [pc, #372]	; (800b364 <_strtod_l+0xbcc>)
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f7f5 fa00 	bl	80005f8 <__aeabi_dmul>
 800b1f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	460f      	mov	r7, r1
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d09c      	beq.n	800b13c <_strtod_l+0x9a4>
 800b202:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b206:	e79d      	b.n	800b144 <_strtod_l+0x9ac>
 800b208:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b338 <_strtod_l+0xba0>
 800b20c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b210:	ec57 6b17 	vmov	r6, r7, d7
 800b214:	e796      	b.n	800b144 <_strtod_l+0x9ac>
 800b216:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b21a:	9b04      	ldr	r3, [sp, #16]
 800b21c:	46ca      	mov	sl, r9
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1c2      	bne.n	800b1a8 <_strtod_l+0xa10>
 800b222:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b228:	0d1b      	lsrs	r3, r3, #20
 800b22a:	051b      	lsls	r3, r3, #20
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d1bb      	bne.n	800b1a8 <_strtod_l+0xa10>
 800b230:	4630      	mov	r0, r6
 800b232:	4639      	mov	r1, r7
 800b234:	f7f5 fd40 	bl	8000cb8 <__aeabi_d2lz>
 800b238:	f7f5 f9b0 	bl	800059c <__aeabi_l2d>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4630      	mov	r0, r6
 800b242:	4639      	mov	r1, r7
 800b244:	f7f5 f820 	bl	8000288 <__aeabi_dsub>
 800b248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b24a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b24e:	ea43 0308 	orr.w	r3, r3, r8
 800b252:	4313      	orrs	r3, r2
 800b254:	4606      	mov	r6, r0
 800b256:	460f      	mov	r7, r1
 800b258:	d054      	beq.n	800b304 <_strtod_l+0xb6c>
 800b25a:	a339      	add	r3, pc, #228	; (adr r3, 800b340 <_strtod_l+0xba8>)
 800b25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b260:	f7f5 fc3c 	bl	8000adc <__aeabi_dcmplt>
 800b264:	2800      	cmp	r0, #0
 800b266:	f47f ace5 	bne.w	800ac34 <_strtod_l+0x49c>
 800b26a:	a337      	add	r3, pc, #220	; (adr r3, 800b348 <_strtod_l+0xbb0>)
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	4630      	mov	r0, r6
 800b272:	4639      	mov	r1, r7
 800b274:	f7f5 fc50 	bl	8000b18 <__aeabi_dcmpgt>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d095      	beq.n	800b1a8 <_strtod_l+0xa10>
 800b27c:	e4da      	b.n	800ac34 <_strtod_l+0x49c>
 800b27e:	9b04      	ldr	r3, [sp, #16]
 800b280:	b333      	cbz	r3, 800b2d0 <_strtod_l+0xb38>
 800b282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b284:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b288:	d822      	bhi.n	800b2d0 <_strtod_l+0xb38>
 800b28a:	a331      	add	r3, pc, #196	; (adr r3, 800b350 <_strtod_l+0xbb8>)
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	4630      	mov	r0, r6
 800b292:	4639      	mov	r1, r7
 800b294:	f7f5 fc2c 	bl	8000af0 <__aeabi_dcmple>
 800b298:	b1a0      	cbz	r0, 800b2c4 <_strtod_l+0xb2c>
 800b29a:	4639      	mov	r1, r7
 800b29c:	4630      	mov	r0, r6
 800b29e:	f7f5 fc83 	bl	8000ba8 <__aeabi_d2uiz>
 800b2a2:	2801      	cmp	r0, #1
 800b2a4:	bf38      	it	cc
 800b2a6:	2001      	movcc	r0, #1
 800b2a8:	f7f5 f92c 	bl	8000504 <__aeabi_ui2d>
 800b2ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	460f      	mov	r7, r1
 800b2b2:	bb23      	cbnz	r3, 800b2fe <_strtod_l+0xb66>
 800b2b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2b8:	9010      	str	r0, [sp, #64]	; 0x40
 800b2ba:	9311      	str	r3, [sp, #68]	; 0x44
 800b2bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b2c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b2c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b2cc:	1a9b      	subs	r3, r3, r2
 800b2ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b2d4:	eeb0 0a48 	vmov.f32	s0, s16
 800b2d8:	eef0 0a68 	vmov.f32	s1, s17
 800b2dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b2e0:	f7ff f8fc 	bl	800a4dc <__ulp>
 800b2e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b2e8:	ec53 2b10 	vmov	r2, r3, d0
 800b2ec:	f7f5 f984 	bl	80005f8 <__aeabi_dmul>
 800b2f0:	ec53 2b18 	vmov	r2, r3, d8
 800b2f4:	f7f4 ffca 	bl	800028c <__adddf3>
 800b2f8:	4680      	mov	r8, r0
 800b2fa:	4689      	mov	r9, r1
 800b2fc:	e78d      	b.n	800b21a <_strtod_l+0xa82>
 800b2fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b302:	e7db      	b.n	800b2bc <_strtod_l+0xb24>
 800b304:	a314      	add	r3, pc, #80	; (adr r3, 800b358 <_strtod_l+0xbc0>)
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	f7f5 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800b30e:	e7b3      	b.n	800b278 <_strtod_l+0xae0>
 800b310:	2300      	movs	r3, #0
 800b312:	930a      	str	r3, [sp, #40]	; 0x28
 800b314:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b318:	6013      	str	r3, [r2, #0]
 800b31a:	f7ff ba7c 	b.w	800a816 <_strtod_l+0x7e>
 800b31e:	2a65      	cmp	r2, #101	; 0x65
 800b320:	f43f ab75 	beq.w	800aa0e <_strtod_l+0x276>
 800b324:	2a45      	cmp	r2, #69	; 0x45
 800b326:	f43f ab72 	beq.w	800aa0e <_strtod_l+0x276>
 800b32a:	2301      	movs	r3, #1
 800b32c:	f7ff bbaa 	b.w	800aa84 <_strtod_l+0x2ec>
 800b330:	00000000 	.word	0x00000000
 800b334:	bff00000 	.word	0xbff00000
 800b338:	00000000 	.word	0x00000000
 800b33c:	3ff00000 	.word	0x3ff00000
 800b340:	94a03595 	.word	0x94a03595
 800b344:	3fdfffff 	.word	0x3fdfffff
 800b348:	35afe535 	.word	0x35afe535
 800b34c:	3fe00000 	.word	0x3fe00000
 800b350:	ffc00000 	.word	0xffc00000
 800b354:	41dfffff 	.word	0x41dfffff
 800b358:	94a03595 	.word	0x94a03595
 800b35c:	3fcfffff 	.word	0x3fcfffff
 800b360:	3ff00000 	.word	0x3ff00000
 800b364:	3fe00000 	.word	0x3fe00000
 800b368:	7ff00000 	.word	0x7ff00000
 800b36c:	7fe00000 	.word	0x7fe00000
 800b370:	7c9fffff 	.word	0x7c9fffff
 800b374:	7fefffff 	.word	0x7fefffff

0800b378 <_strtod_r>:
 800b378:	4b01      	ldr	r3, [pc, #4]	; (800b380 <_strtod_r+0x8>)
 800b37a:	f7ff ba0d 	b.w	800a798 <_strtod_l>
 800b37e:	bf00      	nop
 800b380:	20000068 	.word	0x20000068

0800b384 <_strtol_l.constprop.0>:
 800b384:	2b01      	cmp	r3, #1
 800b386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b38a:	d001      	beq.n	800b390 <_strtol_l.constprop.0+0xc>
 800b38c:	2b24      	cmp	r3, #36	; 0x24
 800b38e:	d906      	bls.n	800b39e <_strtol_l.constprop.0+0x1a>
 800b390:	f7fd fd88 	bl	8008ea4 <__errno>
 800b394:	2316      	movs	r3, #22
 800b396:	6003      	str	r3, [r0, #0]
 800b398:	2000      	movs	r0, #0
 800b39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b39e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b484 <_strtol_l.constprop.0+0x100>
 800b3a2:	460d      	mov	r5, r1
 800b3a4:	462e      	mov	r6, r5
 800b3a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3aa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b3ae:	f017 0708 	ands.w	r7, r7, #8
 800b3b2:	d1f7      	bne.n	800b3a4 <_strtol_l.constprop.0+0x20>
 800b3b4:	2c2d      	cmp	r4, #45	; 0x2d
 800b3b6:	d132      	bne.n	800b41e <_strtol_l.constprop.0+0x9a>
 800b3b8:	782c      	ldrb	r4, [r5, #0]
 800b3ba:	2701      	movs	r7, #1
 800b3bc:	1cb5      	adds	r5, r6, #2
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d05b      	beq.n	800b47a <_strtol_l.constprop.0+0xf6>
 800b3c2:	2b10      	cmp	r3, #16
 800b3c4:	d109      	bne.n	800b3da <_strtol_l.constprop.0+0x56>
 800b3c6:	2c30      	cmp	r4, #48	; 0x30
 800b3c8:	d107      	bne.n	800b3da <_strtol_l.constprop.0+0x56>
 800b3ca:	782c      	ldrb	r4, [r5, #0]
 800b3cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b3d0:	2c58      	cmp	r4, #88	; 0x58
 800b3d2:	d14d      	bne.n	800b470 <_strtol_l.constprop.0+0xec>
 800b3d4:	786c      	ldrb	r4, [r5, #1]
 800b3d6:	2310      	movs	r3, #16
 800b3d8:	3502      	adds	r5, #2
 800b3da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b3de:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3e2:	f04f 0e00 	mov.w	lr, #0
 800b3e6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b3ea:	4676      	mov	r6, lr
 800b3ec:	fb03 8a19 	mls	sl, r3, r9, r8
 800b3f0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b3f4:	f1bc 0f09 	cmp.w	ip, #9
 800b3f8:	d816      	bhi.n	800b428 <_strtol_l.constprop.0+0xa4>
 800b3fa:	4664      	mov	r4, ip
 800b3fc:	42a3      	cmp	r3, r4
 800b3fe:	dd24      	ble.n	800b44a <_strtol_l.constprop.0+0xc6>
 800b400:	f1be 3fff 	cmp.w	lr, #4294967295
 800b404:	d008      	beq.n	800b418 <_strtol_l.constprop.0+0x94>
 800b406:	45b1      	cmp	r9, r6
 800b408:	d31c      	bcc.n	800b444 <_strtol_l.constprop.0+0xc0>
 800b40a:	d101      	bne.n	800b410 <_strtol_l.constprop.0+0x8c>
 800b40c:	45a2      	cmp	sl, r4
 800b40e:	db19      	blt.n	800b444 <_strtol_l.constprop.0+0xc0>
 800b410:	fb06 4603 	mla	r6, r6, r3, r4
 800b414:	f04f 0e01 	mov.w	lr, #1
 800b418:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b41c:	e7e8      	b.n	800b3f0 <_strtol_l.constprop.0+0x6c>
 800b41e:	2c2b      	cmp	r4, #43	; 0x2b
 800b420:	bf04      	itt	eq
 800b422:	782c      	ldrbeq	r4, [r5, #0]
 800b424:	1cb5      	addeq	r5, r6, #2
 800b426:	e7ca      	b.n	800b3be <_strtol_l.constprop.0+0x3a>
 800b428:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b42c:	f1bc 0f19 	cmp.w	ip, #25
 800b430:	d801      	bhi.n	800b436 <_strtol_l.constprop.0+0xb2>
 800b432:	3c37      	subs	r4, #55	; 0x37
 800b434:	e7e2      	b.n	800b3fc <_strtol_l.constprop.0+0x78>
 800b436:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b43a:	f1bc 0f19 	cmp.w	ip, #25
 800b43e:	d804      	bhi.n	800b44a <_strtol_l.constprop.0+0xc6>
 800b440:	3c57      	subs	r4, #87	; 0x57
 800b442:	e7db      	b.n	800b3fc <_strtol_l.constprop.0+0x78>
 800b444:	f04f 3eff 	mov.w	lr, #4294967295
 800b448:	e7e6      	b.n	800b418 <_strtol_l.constprop.0+0x94>
 800b44a:	f1be 3fff 	cmp.w	lr, #4294967295
 800b44e:	d105      	bne.n	800b45c <_strtol_l.constprop.0+0xd8>
 800b450:	2322      	movs	r3, #34	; 0x22
 800b452:	6003      	str	r3, [r0, #0]
 800b454:	4646      	mov	r6, r8
 800b456:	b942      	cbnz	r2, 800b46a <_strtol_l.constprop.0+0xe6>
 800b458:	4630      	mov	r0, r6
 800b45a:	e79e      	b.n	800b39a <_strtol_l.constprop.0+0x16>
 800b45c:	b107      	cbz	r7, 800b460 <_strtol_l.constprop.0+0xdc>
 800b45e:	4276      	negs	r6, r6
 800b460:	2a00      	cmp	r2, #0
 800b462:	d0f9      	beq.n	800b458 <_strtol_l.constprop.0+0xd4>
 800b464:	f1be 0f00 	cmp.w	lr, #0
 800b468:	d000      	beq.n	800b46c <_strtol_l.constprop.0+0xe8>
 800b46a:	1e69      	subs	r1, r5, #1
 800b46c:	6011      	str	r1, [r2, #0]
 800b46e:	e7f3      	b.n	800b458 <_strtol_l.constprop.0+0xd4>
 800b470:	2430      	movs	r4, #48	; 0x30
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1b1      	bne.n	800b3da <_strtol_l.constprop.0+0x56>
 800b476:	2308      	movs	r3, #8
 800b478:	e7af      	b.n	800b3da <_strtol_l.constprop.0+0x56>
 800b47a:	2c30      	cmp	r4, #48	; 0x30
 800b47c:	d0a5      	beq.n	800b3ca <_strtol_l.constprop.0+0x46>
 800b47e:	230a      	movs	r3, #10
 800b480:	e7ab      	b.n	800b3da <_strtol_l.constprop.0+0x56>
 800b482:	bf00      	nop
 800b484:	0800c971 	.word	0x0800c971

0800b488 <_strtol_r>:
 800b488:	f7ff bf7c 	b.w	800b384 <_strtol_l.constprop.0>

0800b48c <__ssputs_r>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	688e      	ldr	r6, [r1, #8]
 800b492:	461f      	mov	r7, r3
 800b494:	42be      	cmp	r6, r7
 800b496:	680b      	ldr	r3, [r1, #0]
 800b498:	4682      	mov	sl, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	4690      	mov	r8, r2
 800b49e:	d82c      	bhi.n	800b4fa <__ssputs_r+0x6e>
 800b4a0:	898a      	ldrh	r2, [r1, #12]
 800b4a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4a6:	d026      	beq.n	800b4f6 <__ssputs_r+0x6a>
 800b4a8:	6965      	ldr	r5, [r4, #20]
 800b4aa:	6909      	ldr	r1, [r1, #16]
 800b4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4b0:	eba3 0901 	sub.w	r9, r3, r1
 800b4b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4b8:	1c7b      	adds	r3, r7, #1
 800b4ba:	444b      	add	r3, r9
 800b4bc:	106d      	asrs	r5, r5, #1
 800b4be:	429d      	cmp	r5, r3
 800b4c0:	bf38      	it	cc
 800b4c2:	461d      	movcc	r5, r3
 800b4c4:	0553      	lsls	r3, r2, #21
 800b4c6:	d527      	bpl.n	800b518 <__ssputs_r+0x8c>
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7fe fc0f 	bl	8009cec <_malloc_r>
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	b360      	cbz	r0, 800b52c <__ssputs_r+0xa0>
 800b4d2:	6921      	ldr	r1, [r4, #16]
 800b4d4:	464a      	mov	r2, r9
 800b4d6:	f000 fa1b 	bl	800b910 <memcpy>
 800b4da:	89a3      	ldrh	r3, [r4, #12]
 800b4dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e4:	81a3      	strh	r3, [r4, #12]
 800b4e6:	6126      	str	r6, [r4, #16]
 800b4e8:	6165      	str	r5, [r4, #20]
 800b4ea:	444e      	add	r6, r9
 800b4ec:	eba5 0509 	sub.w	r5, r5, r9
 800b4f0:	6026      	str	r6, [r4, #0]
 800b4f2:	60a5      	str	r5, [r4, #8]
 800b4f4:	463e      	mov	r6, r7
 800b4f6:	42be      	cmp	r6, r7
 800b4f8:	d900      	bls.n	800b4fc <__ssputs_r+0x70>
 800b4fa:	463e      	mov	r6, r7
 800b4fc:	6820      	ldr	r0, [r4, #0]
 800b4fe:	4632      	mov	r2, r6
 800b500:	4641      	mov	r1, r8
 800b502:	f000 f9c9 	bl	800b898 <memmove>
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	1b9b      	subs	r3, r3, r6
 800b50a:	60a3      	str	r3, [r4, #8]
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	4433      	add	r3, r6
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	2000      	movs	r0, #0
 800b514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b518:	462a      	mov	r2, r5
 800b51a:	f000 fdae 	bl	800c07a <_realloc_r>
 800b51e:	4606      	mov	r6, r0
 800b520:	2800      	cmp	r0, #0
 800b522:	d1e0      	bne.n	800b4e6 <__ssputs_r+0x5a>
 800b524:	6921      	ldr	r1, [r4, #16]
 800b526:	4650      	mov	r0, sl
 800b528:	f7fe fb6c 	bl	8009c04 <_free_r>
 800b52c:	230c      	movs	r3, #12
 800b52e:	f8ca 3000 	str.w	r3, [sl]
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b538:	81a3      	strh	r3, [r4, #12]
 800b53a:	f04f 30ff 	mov.w	r0, #4294967295
 800b53e:	e7e9      	b.n	800b514 <__ssputs_r+0x88>

0800b540 <_svfiprintf_r>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	4698      	mov	r8, r3
 800b546:	898b      	ldrh	r3, [r1, #12]
 800b548:	061b      	lsls	r3, r3, #24
 800b54a:	b09d      	sub	sp, #116	; 0x74
 800b54c:	4607      	mov	r7, r0
 800b54e:	460d      	mov	r5, r1
 800b550:	4614      	mov	r4, r2
 800b552:	d50e      	bpl.n	800b572 <_svfiprintf_r+0x32>
 800b554:	690b      	ldr	r3, [r1, #16]
 800b556:	b963      	cbnz	r3, 800b572 <_svfiprintf_r+0x32>
 800b558:	2140      	movs	r1, #64	; 0x40
 800b55a:	f7fe fbc7 	bl	8009cec <_malloc_r>
 800b55e:	6028      	str	r0, [r5, #0]
 800b560:	6128      	str	r0, [r5, #16]
 800b562:	b920      	cbnz	r0, 800b56e <_svfiprintf_r+0x2e>
 800b564:	230c      	movs	r3, #12
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	f04f 30ff 	mov.w	r0, #4294967295
 800b56c:	e0d0      	b.n	800b710 <_svfiprintf_r+0x1d0>
 800b56e:	2340      	movs	r3, #64	; 0x40
 800b570:	616b      	str	r3, [r5, #20]
 800b572:	2300      	movs	r3, #0
 800b574:	9309      	str	r3, [sp, #36]	; 0x24
 800b576:	2320      	movs	r3, #32
 800b578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b57c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b580:	2330      	movs	r3, #48	; 0x30
 800b582:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b728 <_svfiprintf_r+0x1e8>
 800b586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b58a:	f04f 0901 	mov.w	r9, #1
 800b58e:	4623      	mov	r3, r4
 800b590:	469a      	mov	sl, r3
 800b592:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b596:	b10a      	cbz	r2, 800b59c <_svfiprintf_r+0x5c>
 800b598:	2a25      	cmp	r2, #37	; 0x25
 800b59a:	d1f9      	bne.n	800b590 <_svfiprintf_r+0x50>
 800b59c:	ebba 0b04 	subs.w	fp, sl, r4
 800b5a0:	d00b      	beq.n	800b5ba <_svfiprintf_r+0x7a>
 800b5a2:	465b      	mov	r3, fp
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	f7ff ff6f 	bl	800b48c <__ssputs_r>
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	f000 80a9 	beq.w	800b706 <_svfiprintf_r+0x1c6>
 800b5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5b6:	445a      	add	r2, fp
 800b5b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 80a1 	beq.w	800b706 <_svfiprintf_r+0x1c6>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ce:	f10a 0a01 	add.w	sl, sl, #1
 800b5d2:	9304      	str	r3, [sp, #16]
 800b5d4:	9307      	str	r3, [sp, #28]
 800b5d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5da:	931a      	str	r3, [sp, #104]	; 0x68
 800b5dc:	4654      	mov	r4, sl
 800b5de:	2205      	movs	r2, #5
 800b5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e4:	4850      	ldr	r0, [pc, #320]	; (800b728 <_svfiprintf_r+0x1e8>)
 800b5e6:	f7f4 fdf3 	bl	80001d0 <memchr>
 800b5ea:	9a04      	ldr	r2, [sp, #16]
 800b5ec:	b9d8      	cbnz	r0, 800b626 <_svfiprintf_r+0xe6>
 800b5ee:	06d0      	lsls	r0, r2, #27
 800b5f0:	bf44      	itt	mi
 800b5f2:	2320      	movmi	r3, #32
 800b5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5f8:	0711      	lsls	r1, r2, #28
 800b5fa:	bf44      	itt	mi
 800b5fc:	232b      	movmi	r3, #43	; 0x2b
 800b5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b602:	f89a 3000 	ldrb.w	r3, [sl]
 800b606:	2b2a      	cmp	r3, #42	; 0x2a
 800b608:	d015      	beq.n	800b636 <_svfiprintf_r+0xf6>
 800b60a:	9a07      	ldr	r2, [sp, #28]
 800b60c:	4654      	mov	r4, sl
 800b60e:	2000      	movs	r0, #0
 800b610:	f04f 0c0a 	mov.w	ip, #10
 800b614:	4621      	mov	r1, r4
 800b616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b61a:	3b30      	subs	r3, #48	; 0x30
 800b61c:	2b09      	cmp	r3, #9
 800b61e:	d94d      	bls.n	800b6bc <_svfiprintf_r+0x17c>
 800b620:	b1b0      	cbz	r0, 800b650 <_svfiprintf_r+0x110>
 800b622:	9207      	str	r2, [sp, #28]
 800b624:	e014      	b.n	800b650 <_svfiprintf_r+0x110>
 800b626:	eba0 0308 	sub.w	r3, r0, r8
 800b62a:	fa09 f303 	lsl.w	r3, r9, r3
 800b62e:	4313      	orrs	r3, r2
 800b630:	9304      	str	r3, [sp, #16]
 800b632:	46a2      	mov	sl, r4
 800b634:	e7d2      	b.n	800b5dc <_svfiprintf_r+0x9c>
 800b636:	9b03      	ldr	r3, [sp, #12]
 800b638:	1d19      	adds	r1, r3, #4
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	9103      	str	r1, [sp, #12]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	bfbb      	ittet	lt
 800b642:	425b      	neglt	r3, r3
 800b644:	f042 0202 	orrlt.w	r2, r2, #2
 800b648:	9307      	strge	r3, [sp, #28]
 800b64a:	9307      	strlt	r3, [sp, #28]
 800b64c:	bfb8      	it	lt
 800b64e:	9204      	strlt	r2, [sp, #16]
 800b650:	7823      	ldrb	r3, [r4, #0]
 800b652:	2b2e      	cmp	r3, #46	; 0x2e
 800b654:	d10c      	bne.n	800b670 <_svfiprintf_r+0x130>
 800b656:	7863      	ldrb	r3, [r4, #1]
 800b658:	2b2a      	cmp	r3, #42	; 0x2a
 800b65a:	d134      	bne.n	800b6c6 <_svfiprintf_r+0x186>
 800b65c:	9b03      	ldr	r3, [sp, #12]
 800b65e:	1d1a      	adds	r2, r3, #4
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	9203      	str	r2, [sp, #12]
 800b664:	2b00      	cmp	r3, #0
 800b666:	bfb8      	it	lt
 800b668:	f04f 33ff 	movlt.w	r3, #4294967295
 800b66c:	3402      	adds	r4, #2
 800b66e:	9305      	str	r3, [sp, #20]
 800b670:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b738 <_svfiprintf_r+0x1f8>
 800b674:	7821      	ldrb	r1, [r4, #0]
 800b676:	2203      	movs	r2, #3
 800b678:	4650      	mov	r0, sl
 800b67a:	f7f4 fda9 	bl	80001d0 <memchr>
 800b67e:	b138      	cbz	r0, 800b690 <_svfiprintf_r+0x150>
 800b680:	9b04      	ldr	r3, [sp, #16]
 800b682:	eba0 000a 	sub.w	r0, r0, sl
 800b686:	2240      	movs	r2, #64	; 0x40
 800b688:	4082      	lsls	r2, r0
 800b68a:	4313      	orrs	r3, r2
 800b68c:	3401      	adds	r4, #1
 800b68e:	9304      	str	r3, [sp, #16]
 800b690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b694:	4825      	ldr	r0, [pc, #148]	; (800b72c <_svfiprintf_r+0x1ec>)
 800b696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b69a:	2206      	movs	r2, #6
 800b69c:	f7f4 fd98 	bl	80001d0 <memchr>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d038      	beq.n	800b716 <_svfiprintf_r+0x1d6>
 800b6a4:	4b22      	ldr	r3, [pc, #136]	; (800b730 <_svfiprintf_r+0x1f0>)
 800b6a6:	bb1b      	cbnz	r3, 800b6f0 <_svfiprintf_r+0x1b0>
 800b6a8:	9b03      	ldr	r3, [sp, #12]
 800b6aa:	3307      	adds	r3, #7
 800b6ac:	f023 0307 	bic.w	r3, r3, #7
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	9303      	str	r3, [sp, #12]
 800b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b6:	4433      	add	r3, r6
 800b6b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ba:	e768      	b.n	800b58e <_svfiprintf_r+0x4e>
 800b6bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	e7a6      	b.n	800b614 <_svfiprintf_r+0xd4>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	3401      	adds	r4, #1
 800b6ca:	9305      	str	r3, [sp, #20]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f04f 0c0a 	mov.w	ip, #10
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6d8:	3a30      	subs	r2, #48	; 0x30
 800b6da:	2a09      	cmp	r2, #9
 800b6dc:	d903      	bls.n	800b6e6 <_svfiprintf_r+0x1a6>
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0c6      	beq.n	800b670 <_svfiprintf_r+0x130>
 800b6e2:	9105      	str	r1, [sp, #20]
 800b6e4:	e7c4      	b.n	800b670 <_svfiprintf_r+0x130>
 800b6e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e7f0      	b.n	800b6d2 <_svfiprintf_r+0x192>
 800b6f0:	ab03      	add	r3, sp, #12
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	462a      	mov	r2, r5
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <_svfiprintf_r+0x1f4>)
 800b6f8:	a904      	add	r1, sp, #16
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	f7fc fc84 	bl	8008008 <_printf_float>
 800b700:	1c42      	adds	r2, r0, #1
 800b702:	4606      	mov	r6, r0
 800b704:	d1d6      	bne.n	800b6b4 <_svfiprintf_r+0x174>
 800b706:	89ab      	ldrh	r3, [r5, #12]
 800b708:	065b      	lsls	r3, r3, #25
 800b70a:	f53f af2d 	bmi.w	800b568 <_svfiprintf_r+0x28>
 800b70e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b710:	b01d      	add	sp, #116	; 0x74
 800b712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b716:	ab03      	add	r3, sp, #12
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	462a      	mov	r2, r5
 800b71c:	4b05      	ldr	r3, [pc, #20]	; (800b734 <_svfiprintf_r+0x1f4>)
 800b71e:	a904      	add	r1, sp, #16
 800b720:	4638      	mov	r0, r7
 800b722:	f7fc ff15 	bl	8008550 <_printf_i>
 800b726:	e7eb      	b.n	800b700 <_svfiprintf_r+0x1c0>
 800b728:	0800ca71 	.word	0x0800ca71
 800b72c:	0800ca7b 	.word	0x0800ca7b
 800b730:	08008009 	.word	0x08008009
 800b734:	0800b48d 	.word	0x0800b48d
 800b738:	0800ca77 	.word	0x0800ca77

0800b73c <__sflush_r>:
 800b73c:	898a      	ldrh	r2, [r1, #12]
 800b73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b742:	4605      	mov	r5, r0
 800b744:	0710      	lsls	r0, r2, #28
 800b746:	460c      	mov	r4, r1
 800b748:	d458      	bmi.n	800b7fc <__sflush_r+0xc0>
 800b74a:	684b      	ldr	r3, [r1, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dc05      	bgt.n	800b75c <__sflush_r+0x20>
 800b750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b752:	2b00      	cmp	r3, #0
 800b754:	dc02      	bgt.n	800b75c <__sflush_r+0x20>
 800b756:	2000      	movs	r0, #0
 800b758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b75c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b75e:	2e00      	cmp	r6, #0
 800b760:	d0f9      	beq.n	800b756 <__sflush_r+0x1a>
 800b762:	2300      	movs	r3, #0
 800b764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b768:	682f      	ldr	r7, [r5, #0]
 800b76a:	6a21      	ldr	r1, [r4, #32]
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	d032      	beq.n	800b7d6 <__sflush_r+0x9a>
 800b770:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	075a      	lsls	r2, r3, #29
 800b776:	d505      	bpl.n	800b784 <__sflush_r+0x48>
 800b778:	6863      	ldr	r3, [r4, #4]
 800b77a:	1ac0      	subs	r0, r0, r3
 800b77c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b77e:	b10b      	cbz	r3, 800b784 <__sflush_r+0x48>
 800b780:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b782:	1ac0      	subs	r0, r0, r3
 800b784:	2300      	movs	r3, #0
 800b786:	4602      	mov	r2, r0
 800b788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b78a:	6a21      	ldr	r1, [r4, #32]
 800b78c:	4628      	mov	r0, r5
 800b78e:	47b0      	blx	r6
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	d106      	bne.n	800b7a4 <__sflush_r+0x68>
 800b796:	6829      	ldr	r1, [r5, #0]
 800b798:	291d      	cmp	r1, #29
 800b79a:	d82b      	bhi.n	800b7f4 <__sflush_r+0xb8>
 800b79c:	4a29      	ldr	r2, [pc, #164]	; (800b844 <__sflush_r+0x108>)
 800b79e:	410a      	asrs	r2, r1
 800b7a0:	07d6      	lsls	r6, r2, #31
 800b7a2:	d427      	bmi.n	800b7f4 <__sflush_r+0xb8>
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	6062      	str	r2, [r4, #4]
 800b7a8:	04d9      	lsls	r1, r3, #19
 800b7aa:	6922      	ldr	r2, [r4, #16]
 800b7ac:	6022      	str	r2, [r4, #0]
 800b7ae:	d504      	bpl.n	800b7ba <__sflush_r+0x7e>
 800b7b0:	1c42      	adds	r2, r0, #1
 800b7b2:	d101      	bne.n	800b7b8 <__sflush_r+0x7c>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	b903      	cbnz	r3, 800b7ba <__sflush_r+0x7e>
 800b7b8:	6560      	str	r0, [r4, #84]	; 0x54
 800b7ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7bc:	602f      	str	r7, [r5, #0]
 800b7be:	2900      	cmp	r1, #0
 800b7c0:	d0c9      	beq.n	800b756 <__sflush_r+0x1a>
 800b7c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7c6:	4299      	cmp	r1, r3
 800b7c8:	d002      	beq.n	800b7d0 <__sflush_r+0x94>
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f7fe fa1a 	bl	8009c04 <_free_r>
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	6360      	str	r0, [r4, #52]	; 0x34
 800b7d4:	e7c0      	b.n	800b758 <__sflush_r+0x1c>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	4628      	mov	r0, r5
 800b7da:	47b0      	blx	r6
 800b7dc:	1c41      	adds	r1, r0, #1
 800b7de:	d1c8      	bne.n	800b772 <__sflush_r+0x36>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d0c5      	beq.n	800b772 <__sflush_r+0x36>
 800b7e6:	2b1d      	cmp	r3, #29
 800b7e8:	d001      	beq.n	800b7ee <__sflush_r+0xb2>
 800b7ea:	2b16      	cmp	r3, #22
 800b7ec:	d101      	bne.n	800b7f2 <__sflush_r+0xb6>
 800b7ee:	602f      	str	r7, [r5, #0]
 800b7f0:	e7b1      	b.n	800b756 <__sflush_r+0x1a>
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	e7ad      	b.n	800b758 <__sflush_r+0x1c>
 800b7fc:	690f      	ldr	r7, [r1, #16]
 800b7fe:	2f00      	cmp	r7, #0
 800b800:	d0a9      	beq.n	800b756 <__sflush_r+0x1a>
 800b802:	0793      	lsls	r3, r2, #30
 800b804:	680e      	ldr	r6, [r1, #0]
 800b806:	bf08      	it	eq
 800b808:	694b      	ldreq	r3, [r1, #20]
 800b80a:	600f      	str	r7, [r1, #0]
 800b80c:	bf18      	it	ne
 800b80e:	2300      	movne	r3, #0
 800b810:	eba6 0807 	sub.w	r8, r6, r7
 800b814:	608b      	str	r3, [r1, #8]
 800b816:	f1b8 0f00 	cmp.w	r8, #0
 800b81a:	dd9c      	ble.n	800b756 <__sflush_r+0x1a>
 800b81c:	6a21      	ldr	r1, [r4, #32]
 800b81e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b820:	4643      	mov	r3, r8
 800b822:	463a      	mov	r2, r7
 800b824:	4628      	mov	r0, r5
 800b826:	47b0      	blx	r6
 800b828:	2800      	cmp	r0, #0
 800b82a:	dc06      	bgt.n	800b83a <__sflush_r+0xfe>
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b832:	81a3      	strh	r3, [r4, #12]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	e78e      	b.n	800b758 <__sflush_r+0x1c>
 800b83a:	4407      	add	r7, r0
 800b83c:	eba8 0800 	sub.w	r8, r8, r0
 800b840:	e7e9      	b.n	800b816 <__sflush_r+0xda>
 800b842:	bf00      	nop
 800b844:	dfbffffe 	.word	0xdfbffffe

0800b848 <_fflush_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	690b      	ldr	r3, [r1, #16]
 800b84c:	4605      	mov	r5, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	b913      	cbnz	r3, 800b858 <_fflush_r+0x10>
 800b852:	2500      	movs	r5, #0
 800b854:	4628      	mov	r0, r5
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	b118      	cbz	r0, 800b862 <_fflush_r+0x1a>
 800b85a:	6a03      	ldr	r3, [r0, #32]
 800b85c:	b90b      	cbnz	r3, 800b862 <_fflush_r+0x1a>
 800b85e:	f7fd fa35 	bl	8008ccc <__sinit>
 800b862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0f3      	beq.n	800b852 <_fflush_r+0xa>
 800b86a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b86c:	07d0      	lsls	r0, r2, #31
 800b86e:	d404      	bmi.n	800b87a <_fflush_r+0x32>
 800b870:	0599      	lsls	r1, r3, #22
 800b872:	d402      	bmi.n	800b87a <_fflush_r+0x32>
 800b874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b876:	f7fd fb40 	bl	8008efa <__retarget_lock_acquire_recursive>
 800b87a:	4628      	mov	r0, r5
 800b87c:	4621      	mov	r1, r4
 800b87e:	f7ff ff5d 	bl	800b73c <__sflush_r>
 800b882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b884:	07da      	lsls	r2, r3, #31
 800b886:	4605      	mov	r5, r0
 800b888:	d4e4      	bmi.n	800b854 <_fflush_r+0xc>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	059b      	lsls	r3, r3, #22
 800b88e:	d4e1      	bmi.n	800b854 <_fflush_r+0xc>
 800b890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b892:	f7fd fb33 	bl	8008efc <__retarget_lock_release_recursive>
 800b896:	e7dd      	b.n	800b854 <_fflush_r+0xc>

0800b898 <memmove>:
 800b898:	4288      	cmp	r0, r1
 800b89a:	b510      	push	{r4, lr}
 800b89c:	eb01 0402 	add.w	r4, r1, r2
 800b8a0:	d902      	bls.n	800b8a8 <memmove+0x10>
 800b8a2:	4284      	cmp	r4, r0
 800b8a4:	4623      	mov	r3, r4
 800b8a6:	d807      	bhi.n	800b8b8 <memmove+0x20>
 800b8a8:	1e43      	subs	r3, r0, #1
 800b8aa:	42a1      	cmp	r1, r4
 800b8ac:	d008      	beq.n	800b8c0 <memmove+0x28>
 800b8ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8b6:	e7f8      	b.n	800b8aa <memmove+0x12>
 800b8b8:	4402      	add	r2, r0
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	428a      	cmp	r2, r1
 800b8be:	d100      	bne.n	800b8c2 <memmove+0x2a>
 800b8c0:	bd10      	pop	{r4, pc}
 800b8c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8ca:	e7f7      	b.n	800b8bc <memmove+0x24>

0800b8cc <strncmp>:
 800b8cc:	b510      	push	{r4, lr}
 800b8ce:	b16a      	cbz	r2, 800b8ec <strncmp+0x20>
 800b8d0:	3901      	subs	r1, #1
 800b8d2:	1884      	adds	r4, r0, r2
 800b8d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d103      	bne.n	800b8e8 <strncmp+0x1c>
 800b8e0:	42a0      	cmp	r0, r4
 800b8e2:	d001      	beq.n	800b8e8 <strncmp+0x1c>
 800b8e4:	2a00      	cmp	r2, #0
 800b8e6:	d1f5      	bne.n	800b8d4 <strncmp+0x8>
 800b8e8:	1ad0      	subs	r0, r2, r3
 800b8ea:	bd10      	pop	{r4, pc}
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	e7fc      	b.n	800b8ea <strncmp+0x1e>

0800b8f0 <_sbrk_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4d06      	ldr	r5, [pc, #24]	; (800b90c <_sbrk_r+0x1c>)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	602b      	str	r3, [r5, #0]
 800b8fc:	f7f6 fa0c 	bl	8001d18 <_sbrk>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_sbrk_r+0x1a>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_sbrk_r+0x1a>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	20000618 	.word	0x20000618

0800b910 <memcpy>:
 800b910:	440a      	add	r2, r1
 800b912:	4291      	cmp	r1, r2
 800b914:	f100 33ff 	add.w	r3, r0, #4294967295
 800b918:	d100      	bne.n	800b91c <memcpy+0xc>
 800b91a:	4770      	bx	lr
 800b91c:	b510      	push	{r4, lr}
 800b91e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b922:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b926:	4291      	cmp	r1, r2
 800b928:	d1f9      	bne.n	800b91e <memcpy+0xe>
 800b92a:	bd10      	pop	{r4, pc}
 800b92c:	0000      	movs	r0, r0
	...

0800b930 <nan>:
 800b930:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b938 <nan+0x8>
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	00000000 	.word	0x00000000
 800b93c:	7ff80000 	.word	0x7ff80000

0800b940 <__assert_func>:
 800b940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b942:	4614      	mov	r4, r2
 800b944:	461a      	mov	r2, r3
 800b946:	4b09      	ldr	r3, [pc, #36]	; (800b96c <__assert_func+0x2c>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4605      	mov	r5, r0
 800b94c:	68d8      	ldr	r0, [r3, #12]
 800b94e:	b14c      	cbz	r4, 800b964 <__assert_func+0x24>
 800b950:	4b07      	ldr	r3, [pc, #28]	; (800b970 <__assert_func+0x30>)
 800b952:	9100      	str	r1, [sp, #0]
 800b954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b958:	4906      	ldr	r1, [pc, #24]	; (800b974 <__assert_func+0x34>)
 800b95a:	462b      	mov	r3, r5
 800b95c:	f000 fbca 	bl	800c0f4 <fiprintf>
 800b960:	f000 fbda 	bl	800c118 <abort>
 800b964:	4b04      	ldr	r3, [pc, #16]	; (800b978 <__assert_func+0x38>)
 800b966:	461c      	mov	r4, r3
 800b968:	e7f3      	b.n	800b952 <__assert_func+0x12>
 800b96a:	bf00      	nop
 800b96c:	20000064 	.word	0x20000064
 800b970:	0800ca8a 	.word	0x0800ca8a
 800b974:	0800ca97 	.word	0x0800ca97
 800b978:	0800cac5 	.word	0x0800cac5

0800b97c <_calloc_r>:
 800b97c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b97e:	fba1 2402 	umull	r2, r4, r1, r2
 800b982:	b94c      	cbnz	r4, 800b998 <_calloc_r+0x1c>
 800b984:	4611      	mov	r1, r2
 800b986:	9201      	str	r2, [sp, #4]
 800b988:	f7fe f9b0 	bl	8009cec <_malloc_r>
 800b98c:	9a01      	ldr	r2, [sp, #4]
 800b98e:	4605      	mov	r5, r0
 800b990:	b930      	cbnz	r0, 800b9a0 <_calloc_r+0x24>
 800b992:	4628      	mov	r0, r5
 800b994:	b003      	add	sp, #12
 800b996:	bd30      	pop	{r4, r5, pc}
 800b998:	220c      	movs	r2, #12
 800b99a:	6002      	str	r2, [r0, #0]
 800b99c:	2500      	movs	r5, #0
 800b99e:	e7f8      	b.n	800b992 <_calloc_r+0x16>
 800b9a0:	4621      	mov	r1, r4
 800b9a2:	f7fd fa2c 	bl	8008dfe <memset>
 800b9a6:	e7f4      	b.n	800b992 <_calloc_r+0x16>

0800b9a8 <rshift>:
 800b9a8:	6903      	ldr	r3, [r0, #16]
 800b9aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b9ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9b6:	f100 0414 	add.w	r4, r0, #20
 800b9ba:	dd45      	ble.n	800ba48 <rshift+0xa0>
 800b9bc:	f011 011f 	ands.w	r1, r1, #31
 800b9c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b9c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b9c8:	d10c      	bne.n	800b9e4 <rshift+0x3c>
 800b9ca:	f100 0710 	add.w	r7, r0, #16
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	42b1      	cmp	r1, r6
 800b9d2:	d334      	bcc.n	800ba3e <rshift+0x96>
 800b9d4:	1a9b      	subs	r3, r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	1eea      	subs	r2, r5, #3
 800b9da:	4296      	cmp	r6, r2
 800b9dc:	bf38      	it	cc
 800b9de:	2300      	movcc	r3, #0
 800b9e0:	4423      	add	r3, r4
 800b9e2:	e015      	b.n	800ba10 <rshift+0x68>
 800b9e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b9e8:	f1c1 0820 	rsb	r8, r1, #32
 800b9ec:	40cf      	lsrs	r7, r1
 800b9ee:	f105 0e04 	add.w	lr, r5, #4
 800b9f2:	46a1      	mov	r9, r4
 800b9f4:	4576      	cmp	r6, lr
 800b9f6:	46f4      	mov	ip, lr
 800b9f8:	d815      	bhi.n	800ba26 <rshift+0x7e>
 800b9fa:	1a9a      	subs	r2, r3, r2
 800b9fc:	0092      	lsls	r2, r2, #2
 800b9fe:	3a04      	subs	r2, #4
 800ba00:	3501      	adds	r5, #1
 800ba02:	42ae      	cmp	r6, r5
 800ba04:	bf38      	it	cc
 800ba06:	2200      	movcc	r2, #0
 800ba08:	18a3      	adds	r3, r4, r2
 800ba0a:	50a7      	str	r7, [r4, r2]
 800ba0c:	b107      	cbz	r7, 800ba10 <rshift+0x68>
 800ba0e:	3304      	adds	r3, #4
 800ba10:	1b1a      	subs	r2, r3, r4
 800ba12:	42a3      	cmp	r3, r4
 800ba14:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba18:	bf08      	it	eq
 800ba1a:	2300      	moveq	r3, #0
 800ba1c:	6102      	str	r2, [r0, #16]
 800ba1e:	bf08      	it	eq
 800ba20:	6143      	streq	r3, [r0, #20]
 800ba22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba26:	f8dc c000 	ldr.w	ip, [ip]
 800ba2a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba2e:	ea4c 0707 	orr.w	r7, ip, r7
 800ba32:	f849 7b04 	str.w	r7, [r9], #4
 800ba36:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba3a:	40cf      	lsrs	r7, r1
 800ba3c:	e7da      	b.n	800b9f4 <rshift+0x4c>
 800ba3e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba42:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba46:	e7c3      	b.n	800b9d0 <rshift+0x28>
 800ba48:	4623      	mov	r3, r4
 800ba4a:	e7e1      	b.n	800ba10 <rshift+0x68>

0800ba4c <__hexdig_fun>:
 800ba4c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba50:	2b09      	cmp	r3, #9
 800ba52:	d802      	bhi.n	800ba5a <__hexdig_fun+0xe>
 800ba54:	3820      	subs	r0, #32
 800ba56:	b2c0      	uxtb	r0, r0
 800ba58:	4770      	bx	lr
 800ba5a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba5e:	2b05      	cmp	r3, #5
 800ba60:	d801      	bhi.n	800ba66 <__hexdig_fun+0x1a>
 800ba62:	3847      	subs	r0, #71	; 0x47
 800ba64:	e7f7      	b.n	800ba56 <__hexdig_fun+0xa>
 800ba66:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ba6a:	2b05      	cmp	r3, #5
 800ba6c:	d801      	bhi.n	800ba72 <__hexdig_fun+0x26>
 800ba6e:	3827      	subs	r0, #39	; 0x27
 800ba70:	e7f1      	b.n	800ba56 <__hexdig_fun+0xa>
 800ba72:	2000      	movs	r0, #0
 800ba74:	4770      	bx	lr
	...

0800ba78 <__gethex>:
 800ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	4617      	mov	r7, r2
 800ba7e:	680a      	ldr	r2, [r1, #0]
 800ba80:	b085      	sub	sp, #20
 800ba82:	f102 0b02 	add.w	fp, r2, #2
 800ba86:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ba8a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ba8e:	4681      	mov	r9, r0
 800ba90:	468a      	mov	sl, r1
 800ba92:	9302      	str	r3, [sp, #8]
 800ba94:	32fe      	adds	r2, #254	; 0xfe
 800ba96:	eb02 030b 	add.w	r3, r2, fp
 800ba9a:	46d8      	mov	r8, fp
 800ba9c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	2830      	cmp	r0, #48	; 0x30
 800baa4:	d0f7      	beq.n	800ba96 <__gethex+0x1e>
 800baa6:	f7ff ffd1 	bl	800ba4c <__hexdig_fun>
 800baaa:	4604      	mov	r4, r0
 800baac:	2800      	cmp	r0, #0
 800baae:	d138      	bne.n	800bb22 <__gethex+0xaa>
 800bab0:	49a7      	ldr	r1, [pc, #668]	; (800bd50 <__gethex+0x2d8>)
 800bab2:	2201      	movs	r2, #1
 800bab4:	4640      	mov	r0, r8
 800bab6:	f7ff ff09 	bl	800b8cc <strncmp>
 800baba:	4606      	mov	r6, r0
 800babc:	2800      	cmp	r0, #0
 800babe:	d169      	bne.n	800bb94 <__gethex+0x11c>
 800bac0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bac4:	465d      	mov	r5, fp
 800bac6:	f7ff ffc1 	bl	800ba4c <__hexdig_fun>
 800baca:	2800      	cmp	r0, #0
 800bacc:	d064      	beq.n	800bb98 <__gethex+0x120>
 800bace:	465a      	mov	r2, fp
 800bad0:	7810      	ldrb	r0, [r2, #0]
 800bad2:	2830      	cmp	r0, #48	; 0x30
 800bad4:	4690      	mov	r8, r2
 800bad6:	f102 0201 	add.w	r2, r2, #1
 800bada:	d0f9      	beq.n	800bad0 <__gethex+0x58>
 800badc:	f7ff ffb6 	bl	800ba4c <__hexdig_fun>
 800bae0:	2301      	movs	r3, #1
 800bae2:	fab0 f480 	clz	r4, r0
 800bae6:	0964      	lsrs	r4, r4, #5
 800bae8:	465e      	mov	r6, fp
 800baea:	9301      	str	r3, [sp, #4]
 800baec:	4642      	mov	r2, r8
 800baee:	4615      	mov	r5, r2
 800baf0:	3201      	adds	r2, #1
 800baf2:	7828      	ldrb	r0, [r5, #0]
 800baf4:	f7ff ffaa 	bl	800ba4c <__hexdig_fun>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d1f8      	bne.n	800baee <__gethex+0x76>
 800bafc:	4994      	ldr	r1, [pc, #592]	; (800bd50 <__gethex+0x2d8>)
 800bafe:	2201      	movs	r2, #1
 800bb00:	4628      	mov	r0, r5
 800bb02:	f7ff fee3 	bl	800b8cc <strncmp>
 800bb06:	b978      	cbnz	r0, 800bb28 <__gethex+0xb0>
 800bb08:	b946      	cbnz	r6, 800bb1c <__gethex+0xa4>
 800bb0a:	1c6e      	adds	r6, r5, #1
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	4615      	mov	r5, r2
 800bb10:	3201      	adds	r2, #1
 800bb12:	7828      	ldrb	r0, [r5, #0]
 800bb14:	f7ff ff9a 	bl	800ba4c <__hexdig_fun>
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d1f8      	bne.n	800bb0e <__gethex+0x96>
 800bb1c:	1b73      	subs	r3, r6, r5
 800bb1e:	009e      	lsls	r6, r3, #2
 800bb20:	e004      	b.n	800bb2c <__gethex+0xb4>
 800bb22:	2400      	movs	r4, #0
 800bb24:	4626      	mov	r6, r4
 800bb26:	e7e1      	b.n	800baec <__gethex+0x74>
 800bb28:	2e00      	cmp	r6, #0
 800bb2a:	d1f7      	bne.n	800bb1c <__gethex+0xa4>
 800bb2c:	782b      	ldrb	r3, [r5, #0]
 800bb2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb32:	2b50      	cmp	r3, #80	; 0x50
 800bb34:	d13d      	bne.n	800bbb2 <__gethex+0x13a>
 800bb36:	786b      	ldrb	r3, [r5, #1]
 800bb38:	2b2b      	cmp	r3, #43	; 0x2b
 800bb3a:	d02f      	beq.n	800bb9c <__gethex+0x124>
 800bb3c:	2b2d      	cmp	r3, #45	; 0x2d
 800bb3e:	d031      	beq.n	800bba4 <__gethex+0x12c>
 800bb40:	1c69      	adds	r1, r5, #1
 800bb42:	f04f 0b00 	mov.w	fp, #0
 800bb46:	7808      	ldrb	r0, [r1, #0]
 800bb48:	f7ff ff80 	bl	800ba4c <__hexdig_fun>
 800bb4c:	1e42      	subs	r2, r0, #1
 800bb4e:	b2d2      	uxtb	r2, r2
 800bb50:	2a18      	cmp	r2, #24
 800bb52:	d82e      	bhi.n	800bbb2 <__gethex+0x13a>
 800bb54:	f1a0 0210 	sub.w	r2, r0, #16
 800bb58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb5c:	f7ff ff76 	bl	800ba4c <__hexdig_fun>
 800bb60:	f100 3cff 	add.w	ip, r0, #4294967295
 800bb64:	fa5f fc8c 	uxtb.w	ip, ip
 800bb68:	f1bc 0f18 	cmp.w	ip, #24
 800bb6c:	d91d      	bls.n	800bbaa <__gethex+0x132>
 800bb6e:	f1bb 0f00 	cmp.w	fp, #0
 800bb72:	d000      	beq.n	800bb76 <__gethex+0xfe>
 800bb74:	4252      	negs	r2, r2
 800bb76:	4416      	add	r6, r2
 800bb78:	f8ca 1000 	str.w	r1, [sl]
 800bb7c:	b1dc      	cbz	r4, 800bbb6 <__gethex+0x13e>
 800bb7e:	9b01      	ldr	r3, [sp, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	bf14      	ite	ne
 800bb84:	f04f 0800 	movne.w	r8, #0
 800bb88:	f04f 0806 	moveq.w	r8, #6
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	b005      	add	sp, #20
 800bb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb94:	4645      	mov	r5, r8
 800bb96:	4626      	mov	r6, r4
 800bb98:	2401      	movs	r4, #1
 800bb9a:	e7c7      	b.n	800bb2c <__gethex+0xb4>
 800bb9c:	f04f 0b00 	mov.w	fp, #0
 800bba0:	1ca9      	adds	r1, r5, #2
 800bba2:	e7d0      	b.n	800bb46 <__gethex+0xce>
 800bba4:	f04f 0b01 	mov.w	fp, #1
 800bba8:	e7fa      	b.n	800bba0 <__gethex+0x128>
 800bbaa:	230a      	movs	r3, #10
 800bbac:	fb03 0002 	mla	r0, r3, r2, r0
 800bbb0:	e7d0      	b.n	800bb54 <__gethex+0xdc>
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	e7e0      	b.n	800bb78 <__gethex+0x100>
 800bbb6:	eba5 0308 	sub.w	r3, r5, r8
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	2b07      	cmp	r3, #7
 800bbc0:	dc0a      	bgt.n	800bbd8 <__gethex+0x160>
 800bbc2:	4648      	mov	r0, r9
 800bbc4:	f7fe f91e 	bl	8009e04 <_Balloc>
 800bbc8:	4604      	mov	r4, r0
 800bbca:	b940      	cbnz	r0, 800bbde <__gethex+0x166>
 800bbcc:	4b61      	ldr	r3, [pc, #388]	; (800bd54 <__gethex+0x2dc>)
 800bbce:	4602      	mov	r2, r0
 800bbd0:	21e4      	movs	r1, #228	; 0xe4
 800bbd2:	4861      	ldr	r0, [pc, #388]	; (800bd58 <__gethex+0x2e0>)
 800bbd4:	f7ff feb4 	bl	800b940 <__assert_func>
 800bbd8:	3101      	adds	r1, #1
 800bbda:	105b      	asrs	r3, r3, #1
 800bbdc:	e7ef      	b.n	800bbbe <__gethex+0x146>
 800bbde:	f100 0a14 	add.w	sl, r0, #20
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	495a      	ldr	r1, [pc, #360]	; (800bd50 <__gethex+0x2d8>)
 800bbe6:	f8cd a004 	str.w	sl, [sp, #4]
 800bbea:	469b      	mov	fp, r3
 800bbec:	45a8      	cmp	r8, r5
 800bbee:	d342      	bcc.n	800bc76 <__gethex+0x1fe>
 800bbf0:	9801      	ldr	r0, [sp, #4]
 800bbf2:	f840 bb04 	str.w	fp, [r0], #4
 800bbf6:	eba0 000a 	sub.w	r0, r0, sl
 800bbfa:	1080      	asrs	r0, r0, #2
 800bbfc:	6120      	str	r0, [r4, #16]
 800bbfe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bc02:	4658      	mov	r0, fp
 800bc04:	f7fe f9f0 	bl	8009fe8 <__hi0bits>
 800bc08:	683d      	ldr	r5, [r7, #0]
 800bc0a:	eba8 0000 	sub.w	r0, r8, r0
 800bc0e:	42a8      	cmp	r0, r5
 800bc10:	dd59      	ble.n	800bcc6 <__gethex+0x24e>
 800bc12:	eba0 0805 	sub.w	r8, r0, r5
 800bc16:	4641      	mov	r1, r8
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f7fe fd7f 	bl	800a71c <__any_on>
 800bc1e:	4683      	mov	fp, r0
 800bc20:	b1b8      	cbz	r0, 800bc52 <__gethex+0x1da>
 800bc22:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc26:	1159      	asrs	r1, r3, #5
 800bc28:	f003 021f 	and.w	r2, r3, #31
 800bc2c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bc30:	f04f 0b01 	mov.w	fp, #1
 800bc34:	fa0b f202 	lsl.w	r2, fp, r2
 800bc38:	420a      	tst	r2, r1
 800bc3a:	d00a      	beq.n	800bc52 <__gethex+0x1da>
 800bc3c:	455b      	cmp	r3, fp
 800bc3e:	dd06      	ble.n	800bc4e <__gethex+0x1d6>
 800bc40:	f1a8 0102 	sub.w	r1, r8, #2
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7fe fd69 	bl	800a71c <__any_on>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d138      	bne.n	800bcc0 <__gethex+0x248>
 800bc4e:	f04f 0b02 	mov.w	fp, #2
 800bc52:	4641      	mov	r1, r8
 800bc54:	4620      	mov	r0, r4
 800bc56:	f7ff fea7 	bl	800b9a8 <rshift>
 800bc5a:	4446      	add	r6, r8
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	42b3      	cmp	r3, r6
 800bc60:	da41      	bge.n	800bce6 <__gethex+0x26e>
 800bc62:	4621      	mov	r1, r4
 800bc64:	4648      	mov	r0, r9
 800bc66:	f7fe f90d 	bl	8009e84 <_Bfree>
 800bc6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bc74:	e78a      	b.n	800bb8c <__gethex+0x114>
 800bc76:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bc7a:	2a2e      	cmp	r2, #46	; 0x2e
 800bc7c:	d014      	beq.n	800bca8 <__gethex+0x230>
 800bc7e:	2b20      	cmp	r3, #32
 800bc80:	d106      	bne.n	800bc90 <__gethex+0x218>
 800bc82:	9b01      	ldr	r3, [sp, #4]
 800bc84:	f843 bb04 	str.w	fp, [r3], #4
 800bc88:	f04f 0b00 	mov.w	fp, #0
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	465b      	mov	r3, fp
 800bc90:	7828      	ldrb	r0, [r5, #0]
 800bc92:	9303      	str	r3, [sp, #12]
 800bc94:	f7ff feda 	bl	800ba4c <__hexdig_fun>
 800bc98:	9b03      	ldr	r3, [sp, #12]
 800bc9a:	f000 000f 	and.w	r0, r0, #15
 800bc9e:	4098      	lsls	r0, r3
 800bca0:	ea4b 0b00 	orr.w	fp, fp, r0
 800bca4:	3304      	adds	r3, #4
 800bca6:	e7a1      	b.n	800bbec <__gethex+0x174>
 800bca8:	45a8      	cmp	r8, r5
 800bcaa:	d8e8      	bhi.n	800bc7e <__gethex+0x206>
 800bcac:	2201      	movs	r2, #1
 800bcae:	4628      	mov	r0, r5
 800bcb0:	9303      	str	r3, [sp, #12]
 800bcb2:	f7ff fe0b 	bl	800b8cc <strncmp>
 800bcb6:	4926      	ldr	r1, [pc, #152]	; (800bd50 <__gethex+0x2d8>)
 800bcb8:	9b03      	ldr	r3, [sp, #12]
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d1df      	bne.n	800bc7e <__gethex+0x206>
 800bcbe:	e795      	b.n	800bbec <__gethex+0x174>
 800bcc0:	f04f 0b03 	mov.w	fp, #3
 800bcc4:	e7c5      	b.n	800bc52 <__gethex+0x1da>
 800bcc6:	da0b      	bge.n	800bce0 <__gethex+0x268>
 800bcc8:	eba5 0800 	sub.w	r8, r5, r0
 800bccc:	4621      	mov	r1, r4
 800bcce:	4642      	mov	r2, r8
 800bcd0:	4648      	mov	r0, r9
 800bcd2:	f7fe faf1 	bl	800a2b8 <__lshift>
 800bcd6:	eba6 0608 	sub.w	r6, r6, r8
 800bcda:	4604      	mov	r4, r0
 800bcdc:	f100 0a14 	add.w	sl, r0, #20
 800bce0:	f04f 0b00 	mov.w	fp, #0
 800bce4:	e7ba      	b.n	800bc5c <__gethex+0x1e4>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	42b3      	cmp	r3, r6
 800bcea:	dd73      	ble.n	800bdd4 <__gethex+0x35c>
 800bcec:	1b9e      	subs	r6, r3, r6
 800bcee:	42b5      	cmp	r5, r6
 800bcf0:	dc34      	bgt.n	800bd5c <__gethex+0x2e4>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d023      	beq.n	800bd40 <__gethex+0x2c8>
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	d025      	beq.n	800bd48 <__gethex+0x2d0>
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d115      	bne.n	800bd2c <__gethex+0x2b4>
 800bd00:	42b5      	cmp	r5, r6
 800bd02:	d113      	bne.n	800bd2c <__gethex+0x2b4>
 800bd04:	2d01      	cmp	r5, #1
 800bd06:	d10b      	bne.n	800bd20 <__gethex+0x2a8>
 800bd08:	9a02      	ldr	r2, [sp, #8]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6013      	str	r3, [r2, #0]
 800bd0e:	2301      	movs	r3, #1
 800bd10:	6123      	str	r3, [r4, #16]
 800bd12:	f8ca 3000 	str.w	r3, [sl]
 800bd16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd18:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bd1c:	601c      	str	r4, [r3, #0]
 800bd1e:	e735      	b.n	800bb8c <__gethex+0x114>
 800bd20:	1e69      	subs	r1, r5, #1
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7fe fcfa 	bl	800a71c <__any_on>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d1ed      	bne.n	800bd08 <__gethex+0x290>
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	4648      	mov	r0, r9
 800bd30:	f7fe f8a8 	bl	8009e84 <_Bfree>
 800bd34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd36:	2300      	movs	r3, #0
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bd3e:	e725      	b.n	800bb8c <__gethex+0x114>
 800bd40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1f2      	bne.n	800bd2c <__gethex+0x2b4>
 800bd46:	e7df      	b.n	800bd08 <__gethex+0x290>
 800bd48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1dc      	bne.n	800bd08 <__gethex+0x290>
 800bd4e:	e7ed      	b.n	800bd2c <__gethex+0x2b4>
 800bd50:	0800c91c 	.word	0x0800c91c
 800bd54:	0800c7b5 	.word	0x0800c7b5
 800bd58:	0800cac6 	.word	0x0800cac6
 800bd5c:	f106 38ff 	add.w	r8, r6, #4294967295
 800bd60:	f1bb 0f00 	cmp.w	fp, #0
 800bd64:	d133      	bne.n	800bdce <__gethex+0x356>
 800bd66:	f1b8 0f00 	cmp.w	r8, #0
 800bd6a:	d004      	beq.n	800bd76 <__gethex+0x2fe>
 800bd6c:	4641      	mov	r1, r8
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f7fe fcd4 	bl	800a71c <__any_on>
 800bd74:	4683      	mov	fp, r0
 800bd76:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bd80:	f008 081f 	and.w	r8, r8, #31
 800bd84:	fa03 f308 	lsl.w	r3, r3, r8
 800bd88:	4213      	tst	r3, r2
 800bd8a:	4631      	mov	r1, r6
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	bf18      	it	ne
 800bd90:	f04b 0b02 	orrne.w	fp, fp, #2
 800bd94:	1bad      	subs	r5, r5, r6
 800bd96:	f7ff fe07 	bl	800b9a8 <rshift>
 800bd9a:	687e      	ldr	r6, [r7, #4]
 800bd9c:	f04f 0802 	mov.w	r8, #2
 800bda0:	f1bb 0f00 	cmp.w	fp, #0
 800bda4:	d04a      	beq.n	800be3c <__gethex+0x3c4>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d016      	beq.n	800bdda <__gethex+0x362>
 800bdac:	2b03      	cmp	r3, #3
 800bdae:	d018      	beq.n	800bde2 <__gethex+0x36a>
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d109      	bne.n	800bdc8 <__gethex+0x350>
 800bdb4:	f01b 0f02 	tst.w	fp, #2
 800bdb8:	d006      	beq.n	800bdc8 <__gethex+0x350>
 800bdba:	f8da 3000 	ldr.w	r3, [sl]
 800bdbe:	ea4b 0b03 	orr.w	fp, fp, r3
 800bdc2:	f01b 0f01 	tst.w	fp, #1
 800bdc6:	d10f      	bne.n	800bde8 <__gethex+0x370>
 800bdc8:	f048 0810 	orr.w	r8, r8, #16
 800bdcc:	e036      	b.n	800be3c <__gethex+0x3c4>
 800bdce:	f04f 0b01 	mov.w	fp, #1
 800bdd2:	e7d0      	b.n	800bd76 <__gethex+0x2fe>
 800bdd4:	f04f 0801 	mov.w	r8, #1
 800bdd8:	e7e2      	b.n	800bda0 <__gethex+0x328>
 800bdda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bddc:	f1c3 0301 	rsb	r3, r3, #1
 800bde0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bde2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d0ef      	beq.n	800bdc8 <__gethex+0x350>
 800bde8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bdec:	f104 0214 	add.w	r2, r4, #20
 800bdf0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bdf4:	9301      	str	r3, [sp, #4]
 800bdf6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	4694      	mov	ip, r2
 800bdfe:	f852 1b04 	ldr.w	r1, [r2], #4
 800be02:	f1b1 3fff 	cmp.w	r1, #4294967295
 800be06:	d01e      	beq.n	800be46 <__gethex+0x3ce>
 800be08:	3101      	adds	r1, #1
 800be0a:	f8cc 1000 	str.w	r1, [ip]
 800be0e:	f1b8 0f02 	cmp.w	r8, #2
 800be12:	f104 0214 	add.w	r2, r4, #20
 800be16:	d13d      	bne.n	800be94 <__gethex+0x41c>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	3b01      	subs	r3, #1
 800be1c:	42ab      	cmp	r3, r5
 800be1e:	d10b      	bne.n	800be38 <__gethex+0x3c0>
 800be20:	1169      	asrs	r1, r5, #5
 800be22:	2301      	movs	r3, #1
 800be24:	f005 051f 	and.w	r5, r5, #31
 800be28:	fa03 f505 	lsl.w	r5, r3, r5
 800be2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be30:	421d      	tst	r5, r3
 800be32:	bf18      	it	ne
 800be34:	f04f 0801 	movne.w	r8, #1
 800be38:	f048 0820 	orr.w	r8, r8, #32
 800be3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be3e:	601c      	str	r4, [r3, #0]
 800be40:	9b02      	ldr	r3, [sp, #8]
 800be42:	601e      	str	r6, [r3, #0]
 800be44:	e6a2      	b.n	800bb8c <__gethex+0x114>
 800be46:	4290      	cmp	r0, r2
 800be48:	f842 3c04 	str.w	r3, [r2, #-4]
 800be4c:	d8d6      	bhi.n	800bdfc <__gethex+0x384>
 800be4e:	68a2      	ldr	r2, [r4, #8]
 800be50:	4593      	cmp	fp, r2
 800be52:	db17      	blt.n	800be84 <__gethex+0x40c>
 800be54:	6861      	ldr	r1, [r4, #4]
 800be56:	4648      	mov	r0, r9
 800be58:	3101      	adds	r1, #1
 800be5a:	f7fd ffd3 	bl	8009e04 <_Balloc>
 800be5e:	4682      	mov	sl, r0
 800be60:	b918      	cbnz	r0, 800be6a <__gethex+0x3f2>
 800be62:	4b1b      	ldr	r3, [pc, #108]	; (800bed0 <__gethex+0x458>)
 800be64:	4602      	mov	r2, r0
 800be66:	2184      	movs	r1, #132	; 0x84
 800be68:	e6b3      	b.n	800bbd2 <__gethex+0x15a>
 800be6a:	6922      	ldr	r2, [r4, #16]
 800be6c:	3202      	adds	r2, #2
 800be6e:	f104 010c 	add.w	r1, r4, #12
 800be72:	0092      	lsls	r2, r2, #2
 800be74:	300c      	adds	r0, #12
 800be76:	f7ff fd4b 	bl	800b910 <memcpy>
 800be7a:	4621      	mov	r1, r4
 800be7c:	4648      	mov	r0, r9
 800be7e:	f7fe f801 	bl	8009e84 <_Bfree>
 800be82:	4654      	mov	r4, sl
 800be84:	6922      	ldr	r2, [r4, #16]
 800be86:	1c51      	adds	r1, r2, #1
 800be88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800be8c:	6121      	str	r1, [r4, #16]
 800be8e:	2101      	movs	r1, #1
 800be90:	6151      	str	r1, [r2, #20]
 800be92:	e7bc      	b.n	800be0e <__gethex+0x396>
 800be94:	6921      	ldr	r1, [r4, #16]
 800be96:	4559      	cmp	r1, fp
 800be98:	dd0b      	ble.n	800beb2 <__gethex+0x43a>
 800be9a:	2101      	movs	r1, #1
 800be9c:	4620      	mov	r0, r4
 800be9e:	f7ff fd83 	bl	800b9a8 <rshift>
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	3601      	adds	r6, #1
 800bea6:	42b3      	cmp	r3, r6
 800bea8:	f6ff aedb 	blt.w	800bc62 <__gethex+0x1ea>
 800beac:	f04f 0801 	mov.w	r8, #1
 800beb0:	e7c2      	b.n	800be38 <__gethex+0x3c0>
 800beb2:	f015 051f 	ands.w	r5, r5, #31
 800beb6:	d0f9      	beq.n	800beac <__gethex+0x434>
 800beb8:	9b01      	ldr	r3, [sp, #4]
 800beba:	441a      	add	r2, r3
 800bebc:	f1c5 0520 	rsb	r5, r5, #32
 800bec0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bec4:	f7fe f890 	bl	8009fe8 <__hi0bits>
 800bec8:	42a8      	cmp	r0, r5
 800beca:	dbe6      	blt.n	800be9a <__gethex+0x422>
 800becc:	e7ee      	b.n	800beac <__gethex+0x434>
 800bece:	bf00      	nop
 800bed0:	0800c7b5 	.word	0x0800c7b5

0800bed4 <L_shift>:
 800bed4:	f1c2 0208 	rsb	r2, r2, #8
 800bed8:	0092      	lsls	r2, r2, #2
 800beda:	b570      	push	{r4, r5, r6, lr}
 800bedc:	f1c2 0620 	rsb	r6, r2, #32
 800bee0:	6843      	ldr	r3, [r0, #4]
 800bee2:	6804      	ldr	r4, [r0, #0]
 800bee4:	fa03 f506 	lsl.w	r5, r3, r6
 800bee8:	432c      	orrs	r4, r5
 800beea:	40d3      	lsrs	r3, r2
 800beec:	6004      	str	r4, [r0, #0]
 800beee:	f840 3f04 	str.w	r3, [r0, #4]!
 800bef2:	4288      	cmp	r0, r1
 800bef4:	d3f4      	bcc.n	800bee0 <L_shift+0xc>
 800bef6:	bd70      	pop	{r4, r5, r6, pc}

0800bef8 <__match>:
 800bef8:	b530      	push	{r4, r5, lr}
 800befa:	6803      	ldr	r3, [r0, #0]
 800befc:	3301      	adds	r3, #1
 800befe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf02:	b914      	cbnz	r4, 800bf0a <__match+0x12>
 800bf04:	6003      	str	r3, [r0, #0]
 800bf06:	2001      	movs	r0, #1
 800bf08:	bd30      	pop	{r4, r5, pc}
 800bf0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf12:	2d19      	cmp	r5, #25
 800bf14:	bf98      	it	ls
 800bf16:	3220      	addls	r2, #32
 800bf18:	42a2      	cmp	r2, r4
 800bf1a:	d0f0      	beq.n	800befe <__match+0x6>
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	e7f3      	b.n	800bf08 <__match+0x10>

0800bf20 <__hexnan>:
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	680b      	ldr	r3, [r1, #0]
 800bf26:	6801      	ldr	r1, [r0, #0]
 800bf28:	115e      	asrs	r6, r3, #5
 800bf2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf2e:	f013 031f 	ands.w	r3, r3, #31
 800bf32:	b087      	sub	sp, #28
 800bf34:	bf18      	it	ne
 800bf36:	3604      	addne	r6, #4
 800bf38:	2500      	movs	r5, #0
 800bf3a:	1f37      	subs	r7, r6, #4
 800bf3c:	4682      	mov	sl, r0
 800bf3e:	4690      	mov	r8, r2
 800bf40:	9301      	str	r3, [sp, #4]
 800bf42:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf46:	46b9      	mov	r9, r7
 800bf48:	463c      	mov	r4, r7
 800bf4a:	9502      	str	r5, [sp, #8]
 800bf4c:	46ab      	mov	fp, r5
 800bf4e:	784a      	ldrb	r2, [r1, #1]
 800bf50:	1c4b      	adds	r3, r1, #1
 800bf52:	9303      	str	r3, [sp, #12]
 800bf54:	b342      	cbz	r2, 800bfa8 <__hexnan+0x88>
 800bf56:	4610      	mov	r0, r2
 800bf58:	9105      	str	r1, [sp, #20]
 800bf5a:	9204      	str	r2, [sp, #16]
 800bf5c:	f7ff fd76 	bl	800ba4c <__hexdig_fun>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d14f      	bne.n	800c004 <__hexnan+0xe4>
 800bf64:	9a04      	ldr	r2, [sp, #16]
 800bf66:	9905      	ldr	r1, [sp, #20]
 800bf68:	2a20      	cmp	r2, #32
 800bf6a:	d818      	bhi.n	800bf9e <__hexnan+0x7e>
 800bf6c:	9b02      	ldr	r3, [sp, #8]
 800bf6e:	459b      	cmp	fp, r3
 800bf70:	dd13      	ble.n	800bf9a <__hexnan+0x7a>
 800bf72:	454c      	cmp	r4, r9
 800bf74:	d206      	bcs.n	800bf84 <__hexnan+0x64>
 800bf76:	2d07      	cmp	r5, #7
 800bf78:	dc04      	bgt.n	800bf84 <__hexnan+0x64>
 800bf7a:	462a      	mov	r2, r5
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f7ff ffa8 	bl	800bed4 <L_shift>
 800bf84:	4544      	cmp	r4, r8
 800bf86:	d950      	bls.n	800c02a <__hexnan+0x10a>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	f1a4 0904 	sub.w	r9, r4, #4
 800bf8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf92:	f8cd b008 	str.w	fp, [sp, #8]
 800bf96:	464c      	mov	r4, r9
 800bf98:	461d      	mov	r5, r3
 800bf9a:	9903      	ldr	r1, [sp, #12]
 800bf9c:	e7d7      	b.n	800bf4e <__hexnan+0x2e>
 800bf9e:	2a29      	cmp	r2, #41	; 0x29
 800bfa0:	d155      	bne.n	800c04e <__hexnan+0x12e>
 800bfa2:	3102      	adds	r1, #2
 800bfa4:	f8ca 1000 	str.w	r1, [sl]
 800bfa8:	f1bb 0f00 	cmp.w	fp, #0
 800bfac:	d04f      	beq.n	800c04e <__hexnan+0x12e>
 800bfae:	454c      	cmp	r4, r9
 800bfb0:	d206      	bcs.n	800bfc0 <__hexnan+0xa0>
 800bfb2:	2d07      	cmp	r5, #7
 800bfb4:	dc04      	bgt.n	800bfc0 <__hexnan+0xa0>
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	4649      	mov	r1, r9
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f7ff ff8a 	bl	800bed4 <L_shift>
 800bfc0:	4544      	cmp	r4, r8
 800bfc2:	d934      	bls.n	800c02e <__hexnan+0x10e>
 800bfc4:	f1a8 0204 	sub.w	r2, r8, #4
 800bfc8:	4623      	mov	r3, r4
 800bfca:	f853 1b04 	ldr.w	r1, [r3], #4
 800bfce:	f842 1f04 	str.w	r1, [r2, #4]!
 800bfd2:	429f      	cmp	r7, r3
 800bfd4:	d2f9      	bcs.n	800bfca <__hexnan+0xaa>
 800bfd6:	1b3b      	subs	r3, r7, r4
 800bfd8:	f023 0303 	bic.w	r3, r3, #3
 800bfdc:	3304      	adds	r3, #4
 800bfde:	3e03      	subs	r6, #3
 800bfe0:	3401      	adds	r4, #1
 800bfe2:	42a6      	cmp	r6, r4
 800bfe4:	bf38      	it	cc
 800bfe6:	2304      	movcc	r3, #4
 800bfe8:	4443      	add	r3, r8
 800bfea:	2200      	movs	r2, #0
 800bfec:	f843 2b04 	str.w	r2, [r3], #4
 800bff0:	429f      	cmp	r7, r3
 800bff2:	d2fb      	bcs.n	800bfec <__hexnan+0xcc>
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	b91b      	cbnz	r3, 800c000 <__hexnan+0xe0>
 800bff8:	4547      	cmp	r7, r8
 800bffa:	d126      	bne.n	800c04a <__hexnan+0x12a>
 800bffc:	2301      	movs	r3, #1
 800bffe:	603b      	str	r3, [r7, #0]
 800c000:	2005      	movs	r0, #5
 800c002:	e025      	b.n	800c050 <__hexnan+0x130>
 800c004:	3501      	adds	r5, #1
 800c006:	2d08      	cmp	r5, #8
 800c008:	f10b 0b01 	add.w	fp, fp, #1
 800c00c:	dd06      	ble.n	800c01c <__hexnan+0xfc>
 800c00e:	4544      	cmp	r4, r8
 800c010:	d9c3      	bls.n	800bf9a <__hexnan+0x7a>
 800c012:	2300      	movs	r3, #0
 800c014:	f844 3c04 	str.w	r3, [r4, #-4]
 800c018:	2501      	movs	r5, #1
 800c01a:	3c04      	subs	r4, #4
 800c01c:	6822      	ldr	r2, [r4, #0]
 800c01e:	f000 000f 	and.w	r0, r0, #15
 800c022:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c026:	6020      	str	r0, [r4, #0]
 800c028:	e7b7      	b.n	800bf9a <__hexnan+0x7a>
 800c02a:	2508      	movs	r5, #8
 800c02c:	e7b5      	b.n	800bf9a <__hexnan+0x7a>
 800c02e:	9b01      	ldr	r3, [sp, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d0df      	beq.n	800bff4 <__hexnan+0xd4>
 800c034:	f1c3 0320 	rsb	r3, r3, #32
 800c038:	f04f 32ff 	mov.w	r2, #4294967295
 800c03c:	40da      	lsrs	r2, r3
 800c03e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c042:	4013      	ands	r3, r2
 800c044:	f846 3c04 	str.w	r3, [r6, #-4]
 800c048:	e7d4      	b.n	800bff4 <__hexnan+0xd4>
 800c04a:	3f04      	subs	r7, #4
 800c04c:	e7d2      	b.n	800bff4 <__hexnan+0xd4>
 800c04e:	2004      	movs	r0, #4
 800c050:	b007      	add	sp, #28
 800c052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c056 <__ascii_mbtowc>:
 800c056:	b082      	sub	sp, #8
 800c058:	b901      	cbnz	r1, 800c05c <__ascii_mbtowc+0x6>
 800c05a:	a901      	add	r1, sp, #4
 800c05c:	b142      	cbz	r2, 800c070 <__ascii_mbtowc+0x1a>
 800c05e:	b14b      	cbz	r3, 800c074 <__ascii_mbtowc+0x1e>
 800c060:	7813      	ldrb	r3, [r2, #0]
 800c062:	600b      	str	r3, [r1, #0]
 800c064:	7812      	ldrb	r2, [r2, #0]
 800c066:	1e10      	subs	r0, r2, #0
 800c068:	bf18      	it	ne
 800c06a:	2001      	movne	r0, #1
 800c06c:	b002      	add	sp, #8
 800c06e:	4770      	bx	lr
 800c070:	4610      	mov	r0, r2
 800c072:	e7fb      	b.n	800c06c <__ascii_mbtowc+0x16>
 800c074:	f06f 0001 	mvn.w	r0, #1
 800c078:	e7f8      	b.n	800c06c <__ascii_mbtowc+0x16>

0800c07a <_realloc_r>:
 800c07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07e:	4680      	mov	r8, r0
 800c080:	4614      	mov	r4, r2
 800c082:	460e      	mov	r6, r1
 800c084:	b921      	cbnz	r1, 800c090 <_realloc_r+0x16>
 800c086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c08a:	4611      	mov	r1, r2
 800c08c:	f7fd be2e 	b.w	8009cec <_malloc_r>
 800c090:	b92a      	cbnz	r2, 800c09e <_realloc_r+0x24>
 800c092:	f7fd fdb7 	bl	8009c04 <_free_r>
 800c096:	4625      	mov	r5, r4
 800c098:	4628      	mov	r0, r5
 800c09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c09e:	f000 f842 	bl	800c126 <_malloc_usable_size_r>
 800c0a2:	4284      	cmp	r4, r0
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	d802      	bhi.n	800c0ae <_realloc_r+0x34>
 800c0a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0ac:	d812      	bhi.n	800c0d4 <_realloc_r+0x5a>
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	4640      	mov	r0, r8
 800c0b2:	f7fd fe1b 	bl	8009cec <_malloc_r>
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d0ed      	beq.n	800c098 <_realloc_r+0x1e>
 800c0bc:	42bc      	cmp	r4, r7
 800c0be:	4622      	mov	r2, r4
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	bf28      	it	cs
 800c0c4:	463a      	movcs	r2, r7
 800c0c6:	f7ff fc23 	bl	800b910 <memcpy>
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	f7fd fd99 	bl	8009c04 <_free_r>
 800c0d2:	e7e1      	b.n	800c098 <_realloc_r+0x1e>
 800c0d4:	4635      	mov	r5, r6
 800c0d6:	e7df      	b.n	800c098 <_realloc_r+0x1e>

0800c0d8 <__ascii_wctomb>:
 800c0d8:	b149      	cbz	r1, 800c0ee <__ascii_wctomb+0x16>
 800c0da:	2aff      	cmp	r2, #255	; 0xff
 800c0dc:	bf85      	ittet	hi
 800c0de:	238a      	movhi	r3, #138	; 0x8a
 800c0e0:	6003      	strhi	r3, [r0, #0]
 800c0e2:	700a      	strbls	r2, [r1, #0]
 800c0e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c0e8:	bf98      	it	ls
 800c0ea:	2001      	movls	r0, #1
 800c0ec:	4770      	bx	lr
 800c0ee:	4608      	mov	r0, r1
 800c0f0:	4770      	bx	lr
	...

0800c0f4 <fiprintf>:
 800c0f4:	b40e      	push	{r1, r2, r3}
 800c0f6:	b503      	push	{r0, r1, lr}
 800c0f8:	4601      	mov	r1, r0
 800c0fa:	ab03      	add	r3, sp, #12
 800c0fc:	4805      	ldr	r0, [pc, #20]	; (800c114 <fiprintf+0x20>)
 800c0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c102:	6800      	ldr	r0, [r0, #0]
 800c104:	9301      	str	r3, [sp, #4]
 800c106:	f000 f83f 	bl	800c188 <_vfiprintf_r>
 800c10a:	b002      	add	sp, #8
 800c10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c110:	b003      	add	sp, #12
 800c112:	4770      	bx	lr
 800c114:	20000064 	.word	0x20000064

0800c118 <abort>:
 800c118:	b508      	push	{r3, lr}
 800c11a:	2006      	movs	r0, #6
 800c11c:	f000 fa0c 	bl	800c538 <raise>
 800c120:	2001      	movs	r0, #1
 800c122:	f7f5 fd81 	bl	8001c28 <_exit>

0800c126 <_malloc_usable_size_r>:
 800c126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c12a:	1f18      	subs	r0, r3, #4
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	bfbc      	itt	lt
 800c130:	580b      	ldrlt	r3, [r1, r0]
 800c132:	18c0      	addlt	r0, r0, r3
 800c134:	4770      	bx	lr

0800c136 <__sfputc_r>:
 800c136:	6893      	ldr	r3, [r2, #8]
 800c138:	3b01      	subs	r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	b410      	push	{r4}
 800c13e:	6093      	str	r3, [r2, #8]
 800c140:	da08      	bge.n	800c154 <__sfputc_r+0x1e>
 800c142:	6994      	ldr	r4, [r2, #24]
 800c144:	42a3      	cmp	r3, r4
 800c146:	db01      	blt.n	800c14c <__sfputc_r+0x16>
 800c148:	290a      	cmp	r1, #10
 800c14a:	d103      	bne.n	800c154 <__sfputc_r+0x1e>
 800c14c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c150:	f000 b934 	b.w	800c3bc <__swbuf_r>
 800c154:	6813      	ldr	r3, [r2, #0]
 800c156:	1c58      	adds	r0, r3, #1
 800c158:	6010      	str	r0, [r2, #0]
 800c15a:	7019      	strb	r1, [r3, #0]
 800c15c:	4608      	mov	r0, r1
 800c15e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <__sfputs_r>:
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c166:	4606      	mov	r6, r0
 800c168:	460f      	mov	r7, r1
 800c16a:	4614      	mov	r4, r2
 800c16c:	18d5      	adds	r5, r2, r3
 800c16e:	42ac      	cmp	r4, r5
 800c170:	d101      	bne.n	800c176 <__sfputs_r+0x12>
 800c172:	2000      	movs	r0, #0
 800c174:	e007      	b.n	800c186 <__sfputs_r+0x22>
 800c176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c17a:	463a      	mov	r2, r7
 800c17c:	4630      	mov	r0, r6
 800c17e:	f7ff ffda 	bl	800c136 <__sfputc_r>
 800c182:	1c43      	adds	r3, r0, #1
 800c184:	d1f3      	bne.n	800c16e <__sfputs_r+0xa>
 800c186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c188 <_vfiprintf_r>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	460d      	mov	r5, r1
 800c18e:	b09d      	sub	sp, #116	; 0x74
 800c190:	4614      	mov	r4, r2
 800c192:	4698      	mov	r8, r3
 800c194:	4606      	mov	r6, r0
 800c196:	b118      	cbz	r0, 800c1a0 <_vfiprintf_r+0x18>
 800c198:	6a03      	ldr	r3, [r0, #32]
 800c19a:	b90b      	cbnz	r3, 800c1a0 <_vfiprintf_r+0x18>
 800c19c:	f7fc fd96 	bl	8008ccc <__sinit>
 800c1a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1a2:	07d9      	lsls	r1, r3, #31
 800c1a4:	d405      	bmi.n	800c1b2 <_vfiprintf_r+0x2a>
 800c1a6:	89ab      	ldrh	r3, [r5, #12]
 800c1a8:	059a      	lsls	r2, r3, #22
 800c1aa:	d402      	bmi.n	800c1b2 <_vfiprintf_r+0x2a>
 800c1ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1ae:	f7fc fea4 	bl	8008efa <__retarget_lock_acquire_recursive>
 800c1b2:	89ab      	ldrh	r3, [r5, #12]
 800c1b4:	071b      	lsls	r3, r3, #28
 800c1b6:	d501      	bpl.n	800c1bc <_vfiprintf_r+0x34>
 800c1b8:	692b      	ldr	r3, [r5, #16]
 800c1ba:	b99b      	cbnz	r3, 800c1e4 <_vfiprintf_r+0x5c>
 800c1bc:	4629      	mov	r1, r5
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f000 f93a 	bl	800c438 <__swsetup_r>
 800c1c4:	b170      	cbz	r0, 800c1e4 <_vfiprintf_r+0x5c>
 800c1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1c8:	07dc      	lsls	r4, r3, #31
 800c1ca:	d504      	bpl.n	800c1d6 <_vfiprintf_r+0x4e>
 800c1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d0:	b01d      	add	sp, #116	; 0x74
 800c1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d6:	89ab      	ldrh	r3, [r5, #12]
 800c1d8:	0598      	lsls	r0, r3, #22
 800c1da:	d4f7      	bmi.n	800c1cc <_vfiprintf_r+0x44>
 800c1dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1de:	f7fc fe8d 	bl	8008efc <__retarget_lock_release_recursive>
 800c1e2:	e7f3      	b.n	800c1cc <_vfiprintf_r+0x44>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1e8:	2320      	movs	r3, #32
 800c1ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1f2:	2330      	movs	r3, #48	; 0x30
 800c1f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c3a8 <_vfiprintf_r+0x220>
 800c1f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1fc:	f04f 0901 	mov.w	r9, #1
 800c200:	4623      	mov	r3, r4
 800c202:	469a      	mov	sl, r3
 800c204:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c208:	b10a      	cbz	r2, 800c20e <_vfiprintf_r+0x86>
 800c20a:	2a25      	cmp	r2, #37	; 0x25
 800c20c:	d1f9      	bne.n	800c202 <_vfiprintf_r+0x7a>
 800c20e:	ebba 0b04 	subs.w	fp, sl, r4
 800c212:	d00b      	beq.n	800c22c <_vfiprintf_r+0xa4>
 800c214:	465b      	mov	r3, fp
 800c216:	4622      	mov	r2, r4
 800c218:	4629      	mov	r1, r5
 800c21a:	4630      	mov	r0, r6
 800c21c:	f7ff ffa2 	bl	800c164 <__sfputs_r>
 800c220:	3001      	adds	r0, #1
 800c222:	f000 80a9 	beq.w	800c378 <_vfiprintf_r+0x1f0>
 800c226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c228:	445a      	add	r2, fp
 800c22a:	9209      	str	r2, [sp, #36]	; 0x24
 800c22c:	f89a 3000 	ldrb.w	r3, [sl]
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 80a1 	beq.w	800c378 <_vfiprintf_r+0x1f0>
 800c236:	2300      	movs	r3, #0
 800c238:	f04f 32ff 	mov.w	r2, #4294967295
 800c23c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c240:	f10a 0a01 	add.w	sl, sl, #1
 800c244:	9304      	str	r3, [sp, #16]
 800c246:	9307      	str	r3, [sp, #28]
 800c248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c24c:	931a      	str	r3, [sp, #104]	; 0x68
 800c24e:	4654      	mov	r4, sl
 800c250:	2205      	movs	r2, #5
 800c252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c256:	4854      	ldr	r0, [pc, #336]	; (800c3a8 <_vfiprintf_r+0x220>)
 800c258:	f7f3 ffba 	bl	80001d0 <memchr>
 800c25c:	9a04      	ldr	r2, [sp, #16]
 800c25e:	b9d8      	cbnz	r0, 800c298 <_vfiprintf_r+0x110>
 800c260:	06d1      	lsls	r1, r2, #27
 800c262:	bf44      	itt	mi
 800c264:	2320      	movmi	r3, #32
 800c266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c26a:	0713      	lsls	r3, r2, #28
 800c26c:	bf44      	itt	mi
 800c26e:	232b      	movmi	r3, #43	; 0x2b
 800c270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c274:	f89a 3000 	ldrb.w	r3, [sl]
 800c278:	2b2a      	cmp	r3, #42	; 0x2a
 800c27a:	d015      	beq.n	800c2a8 <_vfiprintf_r+0x120>
 800c27c:	9a07      	ldr	r2, [sp, #28]
 800c27e:	4654      	mov	r4, sl
 800c280:	2000      	movs	r0, #0
 800c282:	f04f 0c0a 	mov.w	ip, #10
 800c286:	4621      	mov	r1, r4
 800c288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c28c:	3b30      	subs	r3, #48	; 0x30
 800c28e:	2b09      	cmp	r3, #9
 800c290:	d94d      	bls.n	800c32e <_vfiprintf_r+0x1a6>
 800c292:	b1b0      	cbz	r0, 800c2c2 <_vfiprintf_r+0x13a>
 800c294:	9207      	str	r2, [sp, #28]
 800c296:	e014      	b.n	800c2c2 <_vfiprintf_r+0x13a>
 800c298:	eba0 0308 	sub.w	r3, r0, r8
 800c29c:	fa09 f303 	lsl.w	r3, r9, r3
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	9304      	str	r3, [sp, #16]
 800c2a4:	46a2      	mov	sl, r4
 800c2a6:	e7d2      	b.n	800c24e <_vfiprintf_r+0xc6>
 800c2a8:	9b03      	ldr	r3, [sp, #12]
 800c2aa:	1d19      	adds	r1, r3, #4
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	9103      	str	r1, [sp, #12]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	bfbb      	ittet	lt
 800c2b4:	425b      	neglt	r3, r3
 800c2b6:	f042 0202 	orrlt.w	r2, r2, #2
 800c2ba:	9307      	strge	r3, [sp, #28]
 800c2bc:	9307      	strlt	r3, [sp, #28]
 800c2be:	bfb8      	it	lt
 800c2c0:	9204      	strlt	r2, [sp, #16]
 800c2c2:	7823      	ldrb	r3, [r4, #0]
 800c2c4:	2b2e      	cmp	r3, #46	; 0x2e
 800c2c6:	d10c      	bne.n	800c2e2 <_vfiprintf_r+0x15a>
 800c2c8:	7863      	ldrb	r3, [r4, #1]
 800c2ca:	2b2a      	cmp	r3, #42	; 0x2a
 800c2cc:	d134      	bne.n	800c338 <_vfiprintf_r+0x1b0>
 800c2ce:	9b03      	ldr	r3, [sp, #12]
 800c2d0:	1d1a      	adds	r2, r3, #4
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	9203      	str	r2, [sp, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	bfb8      	it	lt
 800c2da:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2de:	3402      	adds	r4, #2
 800c2e0:	9305      	str	r3, [sp, #20]
 800c2e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c3b8 <_vfiprintf_r+0x230>
 800c2e6:	7821      	ldrb	r1, [r4, #0]
 800c2e8:	2203      	movs	r2, #3
 800c2ea:	4650      	mov	r0, sl
 800c2ec:	f7f3 ff70 	bl	80001d0 <memchr>
 800c2f0:	b138      	cbz	r0, 800c302 <_vfiprintf_r+0x17a>
 800c2f2:	9b04      	ldr	r3, [sp, #16]
 800c2f4:	eba0 000a 	sub.w	r0, r0, sl
 800c2f8:	2240      	movs	r2, #64	; 0x40
 800c2fa:	4082      	lsls	r2, r0
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	3401      	adds	r4, #1
 800c300:	9304      	str	r3, [sp, #16]
 800c302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c306:	4829      	ldr	r0, [pc, #164]	; (800c3ac <_vfiprintf_r+0x224>)
 800c308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c30c:	2206      	movs	r2, #6
 800c30e:	f7f3 ff5f 	bl	80001d0 <memchr>
 800c312:	2800      	cmp	r0, #0
 800c314:	d03f      	beq.n	800c396 <_vfiprintf_r+0x20e>
 800c316:	4b26      	ldr	r3, [pc, #152]	; (800c3b0 <_vfiprintf_r+0x228>)
 800c318:	bb1b      	cbnz	r3, 800c362 <_vfiprintf_r+0x1da>
 800c31a:	9b03      	ldr	r3, [sp, #12]
 800c31c:	3307      	adds	r3, #7
 800c31e:	f023 0307 	bic.w	r3, r3, #7
 800c322:	3308      	adds	r3, #8
 800c324:	9303      	str	r3, [sp, #12]
 800c326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c328:	443b      	add	r3, r7
 800c32a:	9309      	str	r3, [sp, #36]	; 0x24
 800c32c:	e768      	b.n	800c200 <_vfiprintf_r+0x78>
 800c32e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c332:	460c      	mov	r4, r1
 800c334:	2001      	movs	r0, #1
 800c336:	e7a6      	b.n	800c286 <_vfiprintf_r+0xfe>
 800c338:	2300      	movs	r3, #0
 800c33a:	3401      	adds	r4, #1
 800c33c:	9305      	str	r3, [sp, #20]
 800c33e:	4619      	mov	r1, r3
 800c340:	f04f 0c0a 	mov.w	ip, #10
 800c344:	4620      	mov	r0, r4
 800c346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c34a:	3a30      	subs	r2, #48	; 0x30
 800c34c:	2a09      	cmp	r2, #9
 800c34e:	d903      	bls.n	800c358 <_vfiprintf_r+0x1d0>
 800c350:	2b00      	cmp	r3, #0
 800c352:	d0c6      	beq.n	800c2e2 <_vfiprintf_r+0x15a>
 800c354:	9105      	str	r1, [sp, #20]
 800c356:	e7c4      	b.n	800c2e2 <_vfiprintf_r+0x15a>
 800c358:	fb0c 2101 	mla	r1, ip, r1, r2
 800c35c:	4604      	mov	r4, r0
 800c35e:	2301      	movs	r3, #1
 800c360:	e7f0      	b.n	800c344 <_vfiprintf_r+0x1bc>
 800c362:	ab03      	add	r3, sp, #12
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	462a      	mov	r2, r5
 800c368:	4b12      	ldr	r3, [pc, #72]	; (800c3b4 <_vfiprintf_r+0x22c>)
 800c36a:	a904      	add	r1, sp, #16
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7fb fe4b 	bl	8008008 <_printf_float>
 800c372:	4607      	mov	r7, r0
 800c374:	1c78      	adds	r0, r7, #1
 800c376:	d1d6      	bne.n	800c326 <_vfiprintf_r+0x19e>
 800c378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c37a:	07d9      	lsls	r1, r3, #31
 800c37c:	d405      	bmi.n	800c38a <_vfiprintf_r+0x202>
 800c37e:	89ab      	ldrh	r3, [r5, #12]
 800c380:	059a      	lsls	r2, r3, #22
 800c382:	d402      	bmi.n	800c38a <_vfiprintf_r+0x202>
 800c384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c386:	f7fc fdb9 	bl	8008efc <__retarget_lock_release_recursive>
 800c38a:	89ab      	ldrh	r3, [r5, #12]
 800c38c:	065b      	lsls	r3, r3, #25
 800c38e:	f53f af1d 	bmi.w	800c1cc <_vfiprintf_r+0x44>
 800c392:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c394:	e71c      	b.n	800c1d0 <_vfiprintf_r+0x48>
 800c396:	ab03      	add	r3, sp, #12
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	462a      	mov	r2, r5
 800c39c:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <_vfiprintf_r+0x22c>)
 800c39e:	a904      	add	r1, sp, #16
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f7fc f8d5 	bl	8008550 <_printf_i>
 800c3a6:	e7e4      	b.n	800c372 <_vfiprintf_r+0x1ea>
 800c3a8:	0800ca71 	.word	0x0800ca71
 800c3ac:	0800ca7b 	.word	0x0800ca7b
 800c3b0:	08008009 	.word	0x08008009
 800c3b4:	0800c165 	.word	0x0800c165
 800c3b8:	0800ca77 	.word	0x0800ca77

0800c3bc <__swbuf_r>:
 800c3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3be:	460e      	mov	r6, r1
 800c3c0:	4614      	mov	r4, r2
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	b118      	cbz	r0, 800c3ce <__swbuf_r+0x12>
 800c3c6:	6a03      	ldr	r3, [r0, #32]
 800c3c8:	b90b      	cbnz	r3, 800c3ce <__swbuf_r+0x12>
 800c3ca:	f7fc fc7f 	bl	8008ccc <__sinit>
 800c3ce:	69a3      	ldr	r3, [r4, #24]
 800c3d0:	60a3      	str	r3, [r4, #8]
 800c3d2:	89a3      	ldrh	r3, [r4, #12]
 800c3d4:	071a      	lsls	r2, r3, #28
 800c3d6:	d525      	bpl.n	800c424 <__swbuf_r+0x68>
 800c3d8:	6923      	ldr	r3, [r4, #16]
 800c3da:	b31b      	cbz	r3, 800c424 <__swbuf_r+0x68>
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	6922      	ldr	r2, [r4, #16]
 800c3e0:	1a98      	subs	r0, r3, r2
 800c3e2:	6963      	ldr	r3, [r4, #20]
 800c3e4:	b2f6      	uxtb	r6, r6
 800c3e6:	4283      	cmp	r3, r0
 800c3e8:	4637      	mov	r7, r6
 800c3ea:	dc04      	bgt.n	800c3f6 <__swbuf_r+0x3a>
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	f7ff fa2a 	bl	800b848 <_fflush_r>
 800c3f4:	b9e0      	cbnz	r0, 800c430 <__swbuf_r+0x74>
 800c3f6:	68a3      	ldr	r3, [r4, #8]
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	60a3      	str	r3, [r4, #8]
 800c3fc:	6823      	ldr	r3, [r4, #0]
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	6022      	str	r2, [r4, #0]
 800c402:	701e      	strb	r6, [r3, #0]
 800c404:	6962      	ldr	r2, [r4, #20]
 800c406:	1c43      	adds	r3, r0, #1
 800c408:	429a      	cmp	r2, r3
 800c40a:	d004      	beq.n	800c416 <__swbuf_r+0x5a>
 800c40c:	89a3      	ldrh	r3, [r4, #12]
 800c40e:	07db      	lsls	r3, r3, #31
 800c410:	d506      	bpl.n	800c420 <__swbuf_r+0x64>
 800c412:	2e0a      	cmp	r6, #10
 800c414:	d104      	bne.n	800c420 <__swbuf_r+0x64>
 800c416:	4621      	mov	r1, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	f7ff fa15 	bl	800b848 <_fflush_r>
 800c41e:	b938      	cbnz	r0, 800c430 <__swbuf_r+0x74>
 800c420:	4638      	mov	r0, r7
 800c422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c424:	4621      	mov	r1, r4
 800c426:	4628      	mov	r0, r5
 800c428:	f000 f806 	bl	800c438 <__swsetup_r>
 800c42c:	2800      	cmp	r0, #0
 800c42e:	d0d5      	beq.n	800c3dc <__swbuf_r+0x20>
 800c430:	f04f 37ff 	mov.w	r7, #4294967295
 800c434:	e7f4      	b.n	800c420 <__swbuf_r+0x64>
	...

0800c438 <__swsetup_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	4b2a      	ldr	r3, [pc, #168]	; (800c4e4 <__swsetup_r+0xac>)
 800c43c:	4605      	mov	r5, r0
 800c43e:	6818      	ldr	r0, [r3, #0]
 800c440:	460c      	mov	r4, r1
 800c442:	b118      	cbz	r0, 800c44c <__swsetup_r+0x14>
 800c444:	6a03      	ldr	r3, [r0, #32]
 800c446:	b90b      	cbnz	r3, 800c44c <__swsetup_r+0x14>
 800c448:	f7fc fc40 	bl	8008ccc <__sinit>
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c452:	0718      	lsls	r0, r3, #28
 800c454:	d422      	bmi.n	800c49c <__swsetup_r+0x64>
 800c456:	06d9      	lsls	r1, r3, #27
 800c458:	d407      	bmi.n	800c46a <__swsetup_r+0x32>
 800c45a:	2309      	movs	r3, #9
 800c45c:	602b      	str	r3, [r5, #0]
 800c45e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	f04f 30ff 	mov.w	r0, #4294967295
 800c468:	e034      	b.n	800c4d4 <__swsetup_r+0x9c>
 800c46a:	0758      	lsls	r0, r3, #29
 800c46c:	d512      	bpl.n	800c494 <__swsetup_r+0x5c>
 800c46e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c470:	b141      	cbz	r1, 800c484 <__swsetup_r+0x4c>
 800c472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c476:	4299      	cmp	r1, r3
 800c478:	d002      	beq.n	800c480 <__swsetup_r+0x48>
 800c47a:	4628      	mov	r0, r5
 800c47c:	f7fd fbc2 	bl	8009c04 <_free_r>
 800c480:	2300      	movs	r3, #0
 800c482:	6363      	str	r3, [r4, #52]	; 0x34
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c48a:	81a3      	strh	r3, [r4, #12]
 800c48c:	2300      	movs	r3, #0
 800c48e:	6063      	str	r3, [r4, #4]
 800c490:	6923      	ldr	r3, [r4, #16]
 800c492:	6023      	str	r3, [r4, #0]
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	f043 0308 	orr.w	r3, r3, #8
 800c49a:	81a3      	strh	r3, [r4, #12]
 800c49c:	6923      	ldr	r3, [r4, #16]
 800c49e:	b94b      	cbnz	r3, 800c4b4 <__swsetup_r+0x7c>
 800c4a0:	89a3      	ldrh	r3, [r4, #12]
 800c4a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4aa:	d003      	beq.n	800c4b4 <__swsetup_r+0x7c>
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f000 f884 	bl	800c5bc <__smakebuf_r>
 800c4b4:	89a0      	ldrh	r0, [r4, #12]
 800c4b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4ba:	f010 0301 	ands.w	r3, r0, #1
 800c4be:	d00a      	beq.n	800c4d6 <__swsetup_r+0x9e>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60a3      	str	r3, [r4, #8]
 800c4c4:	6963      	ldr	r3, [r4, #20]
 800c4c6:	425b      	negs	r3, r3
 800c4c8:	61a3      	str	r3, [r4, #24]
 800c4ca:	6923      	ldr	r3, [r4, #16]
 800c4cc:	b943      	cbnz	r3, 800c4e0 <__swsetup_r+0xa8>
 800c4ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4d2:	d1c4      	bne.n	800c45e <__swsetup_r+0x26>
 800c4d4:	bd38      	pop	{r3, r4, r5, pc}
 800c4d6:	0781      	lsls	r1, r0, #30
 800c4d8:	bf58      	it	pl
 800c4da:	6963      	ldrpl	r3, [r4, #20]
 800c4dc:	60a3      	str	r3, [r4, #8]
 800c4de:	e7f4      	b.n	800c4ca <__swsetup_r+0x92>
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	e7f7      	b.n	800c4d4 <__swsetup_r+0x9c>
 800c4e4:	20000064 	.word	0x20000064

0800c4e8 <_raise_r>:
 800c4e8:	291f      	cmp	r1, #31
 800c4ea:	b538      	push	{r3, r4, r5, lr}
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	460d      	mov	r5, r1
 800c4f0:	d904      	bls.n	800c4fc <_raise_r+0x14>
 800c4f2:	2316      	movs	r3, #22
 800c4f4:	6003      	str	r3, [r0, #0]
 800c4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c4fe:	b112      	cbz	r2, 800c506 <_raise_r+0x1e>
 800c500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c504:	b94b      	cbnz	r3, 800c51a <_raise_r+0x32>
 800c506:	4620      	mov	r0, r4
 800c508:	f000 f830 	bl	800c56c <_getpid_r>
 800c50c:	462a      	mov	r2, r5
 800c50e:	4601      	mov	r1, r0
 800c510:	4620      	mov	r0, r4
 800c512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c516:	f000 b817 	b.w	800c548 <_kill_r>
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d00a      	beq.n	800c534 <_raise_r+0x4c>
 800c51e:	1c59      	adds	r1, r3, #1
 800c520:	d103      	bne.n	800c52a <_raise_r+0x42>
 800c522:	2316      	movs	r3, #22
 800c524:	6003      	str	r3, [r0, #0]
 800c526:	2001      	movs	r0, #1
 800c528:	e7e7      	b.n	800c4fa <_raise_r+0x12>
 800c52a:	2400      	movs	r4, #0
 800c52c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c530:	4628      	mov	r0, r5
 800c532:	4798      	blx	r3
 800c534:	2000      	movs	r0, #0
 800c536:	e7e0      	b.n	800c4fa <_raise_r+0x12>

0800c538 <raise>:
 800c538:	4b02      	ldr	r3, [pc, #8]	; (800c544 <raise+0xc>)
 800c53a:	4601      	mov	r1, r0
 800c53c:	6818      	ldr	r0, [r3, #0]
 800c53e:	f7ff bfd3 	b.w	800c4e8 <_raise_r>
 800c542:	bf00      	nop
 800c544:	20000064 	.word	0x20000064

0800c548 <_kill_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d07      	ldr	r5, [pc, #28]	; (800c568 <_kill_r+0x20>)
 800c54c:	2300      	movs	r3, #0
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	4611      	mov	r1, r2
 800c554:	602b      	str	r3, [r5, #0]
 800c556:	f7f5 fb57 	bl	8001c08 <_kill>
 800c55a:	1c43      	adds	r3, r0, #1
 800c55c:	d102      	bne.n	800c564 <_kill_r+0x1c>
 800c55e:	682b      	ldr	r3, [r5, #0]
 800c560:	b103      	cbz	r3, 800c564 <_kill_r+0x1c>
 800c562:	6023      	str	r3, [r4, #0]
 800c564:	bd38      	pop	{r3, r4, r5, pc}
 800c566:	bf00      	nop
 800c568:	20000618 	.word	0x20000618

0800c56c <_getpid_r>:
 800c56c:	f7f5 bb44 	b.w	8001bf8 <_getpid>

0800c570 <__swhatbuf_r>:
 800c570:	b570      	push	{r4, r5, r6, lr}
 800c572:	460c      	mov	r4, r1
 800c574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c578:	2900      	cmp	r1, #0
 800c57a:	b096      	sub	sp, #88	; 0x58
 800c57c:	4615      	mov	r5, r2
 800c57e:	461e      	mov	r6, r3
 800c580:	da0d      	bge.n	800c59e <__swhatbuf_r+0x2e>
 800c582:	89a3      	ldrh	r3, [r4, #12]
 800c584:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c588:	f04f 0100 	mov.w	r1, #0
 800c58c:	bf0c      	ite	eq
 800c58e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c592:	2340      	movne	r3, #64	; 0x40
 800c594:	2000      	movs	r0, #0
 800c596:	6031      	str	r1, [r6, #0]
 800c598:	602b      	str	r3, [r5, #0]
 800c59a:	b016      	add	sp, #88	; 0x58
 800c59c:	bd70      	pop	{r4, r5, r6, pc}
 800c59e:	466a      	mov	r2, sp
 800c5a0:	f000 f848 	bl	800c634 <_fstat_r>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	dbec      	blt.n	800c582 <__swhatbuf_r+0x12>
 800c5a8:	9901      	ldr	r1, [sp, #4]
 800c5aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c5ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c5b2:	4259      	negs	r1, r3
 800c5b4:	4159      	adcs	r1, r3
 800c5b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5ba:	e7eb      	b.n	800c594 <__swhatbuf_r+0x24>

0800c5bc <__smakebuf_r>:
 800c5bc:	898b      	ldrh	r3, [r1, #12]
 800c5be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5c0:	079d      	lsls	r5, r3, #30
 800c5c2:	4606      	mov	r6, r0
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	d507      	bpl.n	800c5d8 <__smakebuf_r+0x1c>
 800c5c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	6123      	str	r3, [r4, #16]
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	6163      	str	r3, [r4, #20]
 800c5d4:	b002      	add	sp, #8
 800c5d6:	bd70      	pop	{r4, r5, r6, pc}
 800c5d8:	ab01      	add	r3, sp, #4
 800c5da:	466a      	mov	r2, sp
 800c5dc:	f7ff ffc8 	bl	800c570 <__swhatbuf_r>
 800c5e0:	9900      	ldr	r1, [sp, #0]
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	f7fd fb81 	bl	8009cec <_malloc_r>
 800c5ea:	b948      	cbnz	r0, 800c600 <__smakebuf_r+0x44>
 800c5ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5f0:	059a      	lsls	r2, r3, #22
 800c5f2:	d4ef      	bmi.n	800c5d4 <__smakebuf_r+0x18>
 800c5f4:	f023 0303 	bic.w	r3, r3, #3
 800c5f8:	f043 0302 	orr.w	r3, r3, #2
 800c5fc:	81a3      	strh	r3, [r4, #12]
 800c5fe:	e7e3      	b.n	800c5c8 <__smakebuf_r+0xc>
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	6020      	str	r0, [r4, #0]
 800c604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	9b00      	ldr	r3, [sp, #0]
 800c60c:	6163      	str	r3, [r4, #20]
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	6120      	str	r0, [r4, #16]
 800c612:	b15b      	cbz	r3, 800c62c <__smakebuf_r+0x70>
 800c614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c618:	4630      	mov	r0, r6
 800c61a:	f000 f81d 	bl	800c658 <_isatty_r>
 800c61e:	b128      	cbz	r0, 800c62c <__smakebuf_r+0x70>
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	f023 0303 	bic.w	r3, r3, #3
 800c626:	f043 0301 	orr.w	r3, r3, #1
 800c62a:	81a3      	strh	r3, [r4, #12]
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	431d      	orrs	r5, r3
 800c630:	81a5      	strh	r5, [r4, #12]
 800c632:	e7cf      	b.n	800c5d4 <__smakebuf_r+0x18>

0800c634 <_fstat_r>:
 800c634:	b538      	push	{r3, r4, r5, lr}
 800c636:	4d07      	ldr	r5, [pc, #28]	; (800c654 <_fstat_r+0x20>)
 800c638:	2300      	movs	r3, #0
 800c63a:	4604      	mov	r4, r0
 800c63c:	4608      	mov	r0, r1
 800c63e:	4611      	mov	r1, r2
 800c640:	602b      	str	r3, [r5, #0]
 800c642:	f7f5 fb40 	bl	8001cc6 <_fstat>
 800c646:	1c43      	adds	r3, r0, #1
 800c648:	d102      	bne.n	800c650 <_fstat_r+0x1c>
 800c64a:	682b      	ldr	r3, [r5, #0]
 800c64c:	b103      	cbz	r3, 800c650 <_fstat_r+0x1c>
 800c64e:	6023      	str	r3, [r4, #0]
 800c650:	bd38      	pop	{r3, r4, r5, pc}
 800c652:	bf00      	nop
 800c654:	20000618 	.word	0x20000618

0800c658 <_isatty_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4d06      	ldr	r5, [pc, #24]	; (800c674 <_isatty_r+0x1c>)
 800c65c:	2300      	movs	r3, #0
 800c65e:	4604      	mov	r4, r0
 800c660:	4608      	mov	r0, r1
 800c662:	602b      	str	r3, [r5, #0]
 800c664:	f7f5 fb3f 	bl	8001ce6 <_isatty>
 800c668:	1c43      	adds	r3, r0, #1
 800c66a:	d102      	bne.n	800c672 <_isatty_r+0x1a>
 800c66c:	682b      	ldr	r3, [r5, #0]
 800c66e:	b103      	cbz	r3, 800c672 <_isatty_r+0x1a>
 800c670:	6023      	str	r3, [r4, #0]
 800c672:	bd38      	pop	{r3, r4, r5, pc}
 800c674:	20000618 	.word	0x20000618

0800c678 <_init>:
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	bf00      	nop
 800c67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c67e:	bc08      	pop	{r3}
 800c680:	469e      	mov	lr, r3
 800c682:	4770      	bx	lr

0800c684 <_fini>:
 800c684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c686:	bf00      	nop
 800c688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c68a:	bc08      	pop	{r3}
 800c68c:	469e      	mov	lr, r3
 800c68e:	4770      	bx	lr
